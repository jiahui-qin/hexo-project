{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/2021-12-7/mvn_life.png","path":"images/2021-12-7/mvn_life.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2021-02-18-GKD-hexo-github-pages-next-踩坑过程.md","hash":"d389af92d66b3f6c136c089b5ce88fdf477c8124","modified":1684396105865},{"_id":"source/_posts/2021-02-19-go中-语法糖的应用.md","hash":"1926857ef83ec1347bc092ed784ea176777d1b08","modified":1684396105865},{"_id":"source/_posts/2021-02-19-在windows环境下搭建linux开发环境.md","hash":"490d7eee41a6f3284cb69f9e05cd7045262cdb6b","modified":1684396105869},{"_id":"source/_posts/2021-02-19-如何写一个telegram-input插件.md","hash":"5ce5356ba81e0539ac86f71ccfb067ebdd3521d6","modified":1684396105869},{"_id":"source/_posts/2021-02-20-go并发基础知识.md","hash":"4b764000ad478c412175e5583edb65ff5cbd3a78","modified":1684396105869},{"_id":"source/_posts/2021-02-23-go并发示例.md","hash":"d2d83aec67e4dcf00e91c1e2fd2daaa8b4a9d873","modified":1684396105869},{"_id":"source/_posts/2021-02-23-java并发示例.md","hash":"c71b2e116a849c1f9e5d43818d70a92a8a847f99","modified":1684396105869},{"_id":"source/_posts/2021-02-25-Segment-Routing是什么？？.md","hash":"efd43fa54d63113599fbf8be56017979e7e66fa1","modified":1684396105869},{"_id":"source/_posts/2021-02-25-TICK技术栈简介.md","hash":"2169b7dc7d04c97d59b50c92ba36ca2750f2216c","modified":1684396105869},{"_id":"source/_posts/2021-02-26-TSN-常用协议简介.md","hash":"df1786df3224ca8020f44ff7321b2c63c6c424c5","modified":1684396105869},{"_id":"source/_posts/2021-02-26-mvn常用命令积累.md","hash":"8503696c2809e856b299b53a4406e1d5782bbf8c","modified":1684396105869},{"_id":"source/_posts/2021-03-02-Lambok注解介绍.md","hash":"009beba541a6d09537bfae23a2e5b96f30d838b3","modified":1684396105869},{"_id":"source/_posts/2021-03-04-Jsch-初应用.md","hash":"c0db41d0b023d2ecb838e66a881b696c627429fe","modified":1684396105869},{"_id":"source/_posts/2021-03-10-全局变量那点事.md","hash":"55848b0c3405e8e72958f8601c8096da0d83b06c","modified":1684396105869},{"_id":"source/_posts/2021-03-11-什么是RPC调用？.md","hash":"67f45d63afe2c0eae2bebfc6304e3d6ea826c5ce","modified":1684396105869},{"_id":"source/_posts/2021-03-17-初尝装饰者模式.md","hash":"09f2178d628517b585b565a6ca983c3eee093382","modified":1684396105869},{"_id":"source/_posts/2021-03-17-选基工具-开发计划.md","hash":"986e20ed192afb77dd361f590d9bf835a47e17c8","modified":1684396105869},{"_id":"source/_posts/2021-03-27-SelFund-开发计划（1）.md","hash":"ae143a3dd89e1757a37b1b5f7ee9c37291514e6f","modified":1684396105869},{"_id":"source/_posts/2021-04-16-java中父类object与子类object的转换.md","hash":"e866a69eecfb61ed393750554343610a1329da8b","modified":1684396105869},{"_id":"source/_posts/2021-04-22-redis能不能作为消息队列？.md","hash":"3292b4a5c210caeccf9da74d3450332a5c51b377","modified":1684396105869},{"_id":"source/_posts/2021-04-26-初探Optional类-代码精进之路-1.md","hash":"e8074e8be64c17dd5a31c430e856e27bac011077","modified":1684396105869},{"_id":"source/_posts/2021-04-27-SOLID设计原则-代码精进之路-2.md","hash":"ba998420e3f13c5cf0c878e7a1ce330deab74f2c","modified":1684396105869},{"_id":"source/_posts/2021-05-26-WSL2使用问题记录.md","hash":"2e2671b0e513acba214e9bec156adbb9ff260b3a","modified":1684396105869},{"_id":"source/_posts/2021-06-01-Q001-influxdb学习-基础-重复值解决.md","hash":"3c8096a19011aa657c86678d7618b07f91d1366d","modified":1684396105869},{"_id":"source/_posts/2021-06-10-Q003-influxdb中的存储策略.md","hash":"b54e0e153a4aab60650b613cbaaf404f9d860ed4","modified":1684396105869},{"_id":"source/_posts/2021-08-11-sonor常见问题修改.md","hash":"69ad1921fe346d737946abfb24bc39fda6443d68","modified":1684396105869},{"_id":"source/_posts/2021-08-13-SelFund-开发计划（2）.md","hash":"0b5d8d043e17e1f8a2e0224ae753e3a570eb1912","modified":1684396105869},{"_id":"source/_posts/2021-08-13-基于egg-js的聊天室后端服务.md","hash":"294357bae60c08636db92460901985f086fe8959","modified":1684396105869},{"_id":"source/_posts/2021-08-16-gin框架使用-selFund进展.md","hash":"702b941be3f77319b3004f5e5be2d2e6389ffcf0","modified":1684396105869},{"_id":"source/_posts/2021-08-31-docker-部署相关学习-1.md","hash":"682ce50a4f3328f699c88c6a6a8a9bd57e2a21a5","modified":1684396105869},{"_id":"source/_posts/2021-09-02-对高可用的第一印象.md","hash":"a03b5de3107991e37ff60193adb2a9b2df7d0d04","modified":1684396105869},{"_id":"source/_posts/2021-09-07-gorm使用踩坑.md","hash":"10acd5d3d7f37ab24759023792c28064ad259fbd","modified":1684396105869},{"_id":"source/_posts/2021-09-08-go中的错误处理.md","hash":"f2720f9cff08d3fca468cc7f4f9136e9849bb43a","modified":1684396105869},{"_id":"source/_posts/2021-09-09-给hexo的post文件名加上日期.md","hash":"1c585afa045b27a1140638581d6a004aae8b334b","modified":1684396105869},{"_id":"source/_posts/2021-09-10-用python来订阅redis消息.md","hash":"ed6f3e93bc1c4b4342495ee11e40f153fa3eafd7","modified":1684396105869},{"_id":"source/_posts/2021-09-13-harbor使用过程中遇到的小坑.md","hash":"a9dfe39efd6777ed5307e83edde1bd827f8dad78","modified":1684396105869},{"_id":"source/_posts/2021-09-20-约定大于配置？.md","hash":"4a403566935be16ca0e6bb9357bdad13eb3afef6","modified":1684396105869},{"_id":"source/_posts/2021-09-23-selFund开发进展.md","hash":"b94828c9f03b43c7851d7d83f2e98207f9cee93b","modified":1684396105869},{"_id":"source/_posts/2021-10-21-换工作也有一年了，好像也没什么进展嘛.md","hash":"2ec49184d9e6beda87f319962ee78de4077e82ae","modified":1684396105869},{"_id":"source/_posts/2021-10-29-mongodb-部署-简单操作.md","hash":"45b6874bdc8063d013c307631abef86f0cd998f2","modified":1684396105869},{"_id":"source/_posts/2021-11-04-spring-如何设置多数据源.md","hash":"0586a359329825f279079e4a6b1f5da996230279","modified":1684396105869},{"_id":"source/_posts/2021-11-04-代码托管平台的选择.md","hash":"db3ab3798bf1702477ffeebcc668d36e44f6caad","modified":1684396105869},{"_id":"source/_posts/2021-11-09-如何展示quartz所有可执行job.md","hash":"9130f790d6256c2d8619c2a2c156010686ee3b6c","modified":1684396105869},{"_id":"source/_posts/2021-11-09-展示hexo-blog中所有的tags和categories.md","hash":"f79e99399316cc44cf4b1f83fe773204d46aa5ba","modified":1684396105869},{"_id":"source/_posts/2021-11-26-MyBatis-Plus-使用tips.md","hash":"ef1bf27ab0b43aa541404de485a8b0c608c0392d","modified":1684396105869},{"_id":"source/_posts/2021-12-05-深圳光明区踩盘参考.md","hash":"38be955b7bd36adb85dda8d1b817e6ca00a79e7c","modified":1684396105869},{"_id":"source/_posts/2021-12-07-mave之为什么找不到我要的依赖.md","hash":"51d5a88ecd5557f316160d50ee992ac7e6651d1a","modified":1684396105869},{"_id":"source/_posts/2022-01-21-docker部署elk组件-logstash设置.md","hash":"2f8027840bcf7845d03c3d22c8cb3959e4d1067a","modified":1684396105869},{"_id":"source/_posts/2022-02-15-删除docker-images的正确姿势.md","hash":"30c75e4b6417a95ed5fa3513b088348109ced169","modified":1684396105869},{"_id":"source/_posts/2022-02-25-从0开始学习go微服务.md","hash":"9b446ffb956c15979c15f76d7ffb072a6cd73392","modified":1684396105869},{"_id":"source/_posts/2022-03-03-feign调用失败后返回错误结果.md","hash":"fea50f64649a6816d0fbd7c192abc93970603972","modified":1684396105869},{"_id":"source/_posts/2022-04-07-AutoCloseable的妙用.md","hash":"a90f393c5c7d5c673402c5e8c75b43290c1a0b74","modified":1684396105869},{"_id":"source/_posts/2022-04-07-FeignException中body长度的小坑.md","hash":"f4801c3a3d8c890ab4fbe54aefc9a582d363537c","modified":1684396105869},{"_id":"source/categories/index.md","hash":"20477b35b3a06416211fbad87f177f69fe3fe589","modified":1684396105869},{"_id":"source/plan/index.md","hash":"85c7deb25af6d05b0830ca5de6dfabf70945a299","modified":1684396105869},{"_id":"source/tags/index.md","hash":"0c0bae688723b2ff2b1c0651757634d616e57a39","modified":1684396105869},{"_id":"source/images/2021-12-7/mvn_life.png","hash":"179de1e9a71b8f79f58eef25653afb3fbf40ac50","modified":1684396105869},{"_id":"source/_posts/2021-12-29-NetconfBaseService-到设备的调用链.md","hash":"7bf374acdca4a06633fd6f35e707a832f48de25e","modified":1684396105869},{"_id":"source/_posts/2021-12-28-个人邮箱管理计划.md","hash":"44d9de4a650546d631a8f8d0b778a450f75503b1","modified":1684396105869},{"_id":"source/_posts/2021-12-08-mysql和redis中的数据一致性问题.md","hash":"4c12caf47b4c8a0f89a101c9811c4d168b905d35","modified":1684396105869},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1684396105869},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1684396105869},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1684396105869},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1684396105873},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1684396105873},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1684396105873},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1684396105873},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1684396105873},{"_id":"themes/next/_config.yml","hash":"b5b8dec81b4b3a2a815fbb20d432d838b5a8e0eb","modified":1684396105873},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1684396105873},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1684396105873},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1684396105881},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1684396105869},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1684396105869},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1684396105873},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1684396105873},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1684396105873},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1684396105873},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1684396105873},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1684396105873},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1684396105873},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1684396105873},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1684396105873},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1684396105873},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1684396105873},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1684396105873},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1684396105873},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1684396105873},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1684396105873},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1684396105873},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1684396105873},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1684396105873},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1684396105873},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1684396105873},{"_id":"themes/next/languages/default.yml","hash":"ee4e183f25501b55ce26326867b8ba514abb6163","modified":1684396105873},{"_id":"themes/next/languages/en.yml","hash":"ee4e183f25501b55ce26326867b8ba514abb6163","modified":1684396105873},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1684396105873},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1684396105873},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1684396105873},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1684396105873},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1684396105873},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1684396105873},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1684396105873},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1684396105873},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1684396105873},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1684396105873},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1684396105873},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1684396105873},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1684396105873},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1684396105873},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1684396105877},{"_id":"themes/next/languages/zh-CN.yml","hash":"4f2d2dcb12a6f5b9c61c1eae4f474d4ffa34872f","modified":1684396105877},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1684396105877},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1684396105877},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1684396105877},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1684396105877},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1684396105881},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1684396105881},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1684396105881},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1684396105881},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1684396105881},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1684396105881},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1684396105873},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1684396105873},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1684396105873},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1684396105873},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1684396105873},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1684396105873},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1684396105873},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1684396105873},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1684396105873},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1684396105877},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1684396105877},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1684396105877},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1684396105877},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1684396105877},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1684396105877},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1684396105877},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1684396105877},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1684396105877},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1684396105877},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1684396105877},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1684396105877},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1684396105877},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1684396105877},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1684396105877},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1684396105877},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1684396105877},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1684396105881},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1684396105881},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1684396105881},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1684396105881},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1684396105881},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1684396105881},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1684396105881},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1684396105881},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1684396105881},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1684396105881},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1684396105881},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1684396105881},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1684396105881},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1684396105881},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1684396105881},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1684396105881},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1684396105881},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1684396105881},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1684396105885},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1684396105885},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1684396105885},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1684396105885},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1684396105885},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1684396105885},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1684396105885},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1684396105885},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1684396105885},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1684396105885},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1684396105885},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1684396105885},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1684396105885},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1684396105885},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1684396105885},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1684396105889},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1684396105889},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1684396105889},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1684396105889},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1684396105889},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1684396105889},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1684396105889},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1684396105877},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1684396105877},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1684396105877},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1684396105877},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1684396105877},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1684396105877},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1684396105877},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1684396105877},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1684396105877},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1684396105877},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1684396105877},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1684396105877},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1684396105877},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1684396105877},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1684396105877},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1684396105877},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1684396105877},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1684396105877},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1684396105877},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1684396105877},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1684396105877},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1684396105877},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1684396105877},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1684396105877},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1684396105877},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1684396105877},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1684396105877},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1684396105877},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1684396105877},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1684396105877},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1684396105877},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1684396105877},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1684396105877},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1684396105877},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1684396105877},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1684396105877},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1684396105877},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1684396105877},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1684396105877},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1684396105877},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1684396105877},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1684396105877},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1684396105877},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1684396105877},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1684396105877},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1684396105877},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1684396105877},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1684396105877},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1684396105881},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1684396105881},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1684396105881},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1684396105881},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1684396105881},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1684396105881},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1684396105881},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1684396105881},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1684396105881},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1684396105881},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1684396105881},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1684396105885},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1684396105885},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1684396105885},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1684396105885},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1684396105885},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1684396105889},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1684396105889},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1684396105889},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1684396105889},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1684396105885},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1684396105885},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1684396105889},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1684396105881},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1684396105881},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1684396105885},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1684396105885},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1684396105881},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1684396105881},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1684396105889},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1684396105885},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1684396105885},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1684396105889},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1684396105889},{"_id":"public/plan/index.html","hash":"bbd41f7d69bd91c6f9170edcb752e4200e8a1cf0","modified":1684396152078},{"_id":"public/2021/11/04/代码托管平台的选择/index.html","hash":"240c41e4f90dcb549c22f559300fa8557e1a20c2","modified":1684396152078},{"_id":"public/2021/03/11/什么是RPC调用？/index.html","hash":"61b837259444a9250639c0b716bc4cb5b09f9214","modified":1684396152078},{"_id":"public/2021/02/25/Segment-Routing是什么？？/index.html","hash":"b4214de4288813276253cfc509b55d10ab70ac63","modified":1684396152078},{"_id":"public/2021/02/19/go中-语法糖的应用/index.html","hash":"e001d2bc836b07051d38e1249062e77f3ebd5130","modified":1684396152078},{"_id":"public/archives/page/6/index.html","hash":"bd2674fc79267c7f64c3826a426841e15a4bef59","modified":1684396152078},{"_id":"public/archives/2021/02/page/2/index.html","hash":"94237465291ec567e973af2acb460b88dabdf06f","modified":1684396152078},{"_id":"public/archives/2021/03/index.html","hash":"5a5b9605daa770d20b297af42b74c47918e29995","modified":1684396152078},{"_id":"public/archives/2021/04/index.html","hash":"5b0652147fefb271131175f83c75f372272a9056","modified":1684396152078},{"_id":"public/archives/2021/05/index.html","hash":"57853c7d94f8d6ee6deb8bb67184df04f9070e78","modified":1684396152078},{"_id":"public/archives/2021/06/index.html","hash":"e3a417f940c30ce2df89802d44d1ad647ea17b7c","modified":1684396152078},{"_id":"public/archives/2021/08/index.html","hash":"508f3dba4b2a01d0be8544315d4f04d4f283327f","modified":1684396152078},{"_id":"public/archives/2021/09/index.html","hash":"70ccb8a1c326651dacde8d086622486152efe4af","modified":1684396152078},{"_id":"public/archives/2021/10/index.html","hash":"ed8f30dc6d9a48e4abeeb9a03469b11595dc52cf","modified":1684396152078},{"_id":"public/archives/2021/11/index.html","hash":"d8d9923467bed86fe228b9e2057c796d23081e38","modified":1684396152078},{"_id":"public/archives/2021/12/index.html","hash":"6bd41b8cdee1cbb45af92599ae9c679ded1d48c7","modified":1684396152078},{"_id":"public/archives/2022/index.html","hash":"703121397acb31231962b7ffb4b98344b0481af5","modified":1684396152078},{"_id":"public/archives/2022/01/index.html","hash":"46ae6432cd91fd08ad60c29748b40faadfc69a59","modified":1684396152078},{"_id":"public/archives/2022/02/index.html","hash":"843ca2558cc138e6273c377b8eb090942e07fed0","modified":1684396152078},{"_id":"public/archives/2022/03/index.html","hash":"53eee19d86a8769d9058ebe08de977677368d44d","modified":1684396152078},{"_id":"public/archives/2022/04/index.html","hash":"abc81fc7f0ce00f9be4c3a897ba779816285d0a3","modified":1684396152078},{"_id":"public/categories/指南/index.html","hash":"f3ebbfca5ef44d108bff5df3d6f24bf03e93ee30","modified":1684396152078},{"_id":"public/categories/java初学者教程/index.html","hash":"9e95a8fc7dbbe53aea4883076b1957a76233857c","modified":1684396152078},{"_id":"public/categories/网络/index.html","hash":"3105db2e2e0401aac7981fedf63bed9faeb65889","modified":1684396152078},{"_id":"public/categories/初学者教程/index.html","hash":"957b7c4e00c1e99c7d411d48e7ba7a4f32f3d17e","modified":1684396152078},{"_id":"public/categories/java相关/index.html","hash":"1f4bb6a4afa844dd7a847f8731e4b6530d0c6c0c","modified":1684396152078},{"_id":"public/categories/设计模式/index.html","hash":"68868bda80df3cb3f12ffd0a2b74cf5fd62694e9","modified":1684396152078},{"_id":"public/categories/奇想天动/index.html","hash":"4f9092fcc90605adb3dbdfe63541645967f01b68","modified":1684396152078},{"_id":"public/categories/开发计划/index.html","hash":"2e9c53a1ac3255c238a7478c45c146f062119c37","modified":1684396152078},{"_id":"public/categories/go初学者教程/index.html","hash":"d26dde9ad0c7381d07b32bfe6e26ddff9476579b","modified":1684396152078},{"_id":"public/categories/代码精进之路/index.html","hash":"76a5d385fe3a6b096155498b8522b397c4afd5ea","modified":1684396152078},{"_id":"public/categories/WSL/index.html","hash":"4e8c481925889bd534ea115098a57498e86ab4cf","modified":1684396152078},{"_id":"public/categories/日常问题解决/index.html","hash":"d8ba4017fc9bf263e73c215b0a6bedad34a5faff","modified":1684396152078},{"_id":"public/categories/sonor/index.html","hash":"35e3bfffd57c59b6952d1899e8ccd8a90b2da993","modified":1684396152078},{"_id":"public/categories/开源项目/index.html","hash":"3511e0ae863de710276427918f65006c0d6d8fc5","modified":1684396152078},{"_id":"public/categories/go/index.html","hash":"ad13b088e48d5163d468d9979f99fe388635258f","modified":1684396152078},{"_id":"public/categories/部署-运维/index.html","hash":"45c64c4e4d721591634190615b73304f3c4eca08","modified":1684396152078},{"_id":"public/categories/方法论/index.html","hash":"bbb93f14231c51f7ed9cd14bf42f7260a88a4518","modified":1684396152078},{"_id":"public/categories/python小工具/index.html","hash":"36f9f9ce4a50b999a5b2c12b32e62515f8f56c00","modified":1684396152078},{"_id":"public/categories/编程/index.html","hash":"a996ba6c828d763ddb1eb67c6960450a1f5bcffd","modified":1684396152078},{"_id":"public/categories/other/index.html","hash":"fd59832d62d3101ca56e96c74ca9d180ae8692b9","modified":1684396152078},{"_id":"public/categories/mongodb/index.html","hash":"41c1f6981f8841255511495aa8ccc87978688530","modified":1684396152078},{"_id":"public/categories/backend/index.html","hash":"b552029c9ea5898d608517c29b0bc1658c6a1efb","modified":1684396152078},{"_id":"public/categories/chat/index.html","hash":"44176536354e7f4aba2c41541c86595eec445344","modified":1684396152078},{"_id":"public/categories/person—devlop/index.html","hash":"cb702afc8ddb52b22096c73f9837bb16ff2f17d5","modified":1684396152078},{"_id":"public/categories/life/index.html","hash":"66d45d98b26a1c951f00d1c5c03468839f0e4479","modified":1684396152078},{"_id":"public/tags/go/index.html","hash":"4bd1d66e6e1d7b3c092a7fafc3aa696ad1711c82","modified":1684396152078},{"_id":"public/tags/语法糖/index.html","hash":"cc918c6a2da34f0e29068d8c528fbca13dc69b7d","modified":1684396152078},{"_id":"public/tags/Windows/index.html","hash":"8b4cbcb1f047bf698b629d68e679106142de281e","modified":1684396152078},{"_id":"public/tags/wsl2/index.html","hash":"17f2b91963c9e350706c3185906f5dbc1f86f03b","modified":1684396152078},{"_id":"public/tags/Ubuntu/index.html","hash":"46a294be3c3391123f26a660d112fa9b9f510f10","modified":1684396152078},{"_id":"public/tags/github/index.html","hash":"6676b0bf45a763b73a8f4b6ac1ac0012ce3beb4f","modified":1684396152078},{"_id":"public/tags/hexo/index.html","hash":"50aa10f522c8d6282cd0325045638ba486f484a5","modified":1684396152078},{"_id":"public/tags/blog/index.html","hash":"8d679d90897a606262712ca9acff372e40143bb8","modified":1684396152078},{"_id":"public/tags/telegram/index.html","hash":"9da30d21d8aeb746dbc7fe3925bf5c25695a612b","modified":1684396152078},{"_id":"public/tags/并发/index.html","hash":"894dc09c67fe1267183ba9a688405e41232f354a","modified":1684396152078},{"_id":"public/tags/java/page/2/index.html","hash":"c9bbfe1cc046c0edff6ef8ee25250421b427ac6e","modified":1684396152078},{"_id":"public/tags/Segment-Routing/index.html","hash":"9b1f6f47ba74c807bfd0d8a735e592c0b682a8e9","modified":1684396152078},{"_id":"public/tags/TICK/index.html","hash":"f5ac7553c3253a1f59764b70e9b7d70aac7da461","modified":1684396152078},{"_id":"public/tags/监控系统/index.html","hash":"535f73162d2a4ea90f48d2e90d457f48c1adccde","modified":1684396152078},{"_id":"public/tags/协议/index.html","hash":"49d80439a5a4ea2e4d949522ddee13362d43df19","modified":1684396152078},{"_id":"public/tags/mvn/index.html","hash":"67885fe818c38b36546153f4cc98b3a05bd82f5c","modified":1684396152078},{"_id":"public/tags/Lambok/index.html","hash":"40923aa98396dd98b5e0e9034e415d0e64942e4a","modified":1684396152078},{"_id":"public/tags/jsch/index.html","hash":"494c2f88b8278561633c6695106c5c841fb5143b","modified":1684396152078},{"_id":"public/tags/装饰模式/index.html","hash":"4b6b70f9948e497ae806c548cda51a1160a6bc1e","modified":1684396152078},{"_id":"public/tags/学习/index.html","hash":"17f878b5af8c81ec4bfbe4a9236167edc45622f4","modified":1684396152078},{"_id":"public/tags/理财/index.html","hash":"5b5d666408cf5bf7b10650754c58c5d75003b06f","modified":1684396152078},{"_id":"public/tags/selFund/index.html","hash":"e8073deed5b68ea85c5db58b64367f26936685b5","modified":1684396152078},{"_id":"public/tags/语法/index.html","hash":"d651b79f09713e4e7baf2ae78a2c788807253200","modified":1684396152078},{"_id":"public/tags/转载/index.html","hash":"6cea44a61ccff6de1f3bccf391a1eeab2d65721f","modified":1684396152078},{"_id":"public/tags/读后感/index.html","hash":"7b0b37b4c2b4d92da7e46faef927b68f1671331f","modified":1684396152078},{"_id":"public/tags/问题记录/index.html","hash":"4a56e0e8afbab4f0beb2fd4cb77064620b04f89d","modified":1684396152078},{"_id":"public/tags/influxdb/index.html","hash":"bcb0de34f7617c07c9512f09a2a830e15a70679e","modified":1684396152078},{"_id":"public/tags/bug修复/index.html","hash":"46554856ecc658c6f0a9bf641908838b624d1808","modified":1684396152078},{"_id":"public/tags/代码异味/index.html","hash":"476b8cdeda0785ecbf58fe3d63cfad02eaa57f09","modified":1684396152078},{"_id":"public/tags/nodejs/index.html","hash":"1b84d06062bde092297fbc7a4d3da423ce3a2280","modified":1684396152078},{"_id":"public/tags/eggjs/index.html","hash":"40a19dc8ac0589bb84955468e3b3cbd4736d456a","modified":1684396152078},{"_id":"public/tags/开源/index.html","hash":"36c5a124f35f2451436f0a526e598a2b017d7611","modified":1684396152078},{"_id":"public/tags/gin/index.html","hash":"964f27bd43a05f1cc1bd8044aa50bab507b6a1be","modified":1684396152078},{"_id":"public/tags/docker/index.html","hash":"47c6012723008790c5ed23a55fa2d508bec471f3","modified":1684396152078},{"_id":"public/tags/docker-compose/index.html","hash":"9aee3a8c4b3bf0250a591d62a3ff268e5eaf5e28","modified":1684396152078},{"_id":"public/tags/gorm/index.html","hash":"abf550157b41a3d4ed7ec348904f19bf19cf1b3e","modified":1684396152078},{"_id":"public/tags/selfund/index.html","hash":"4b08fd8feeae20d3ddf2d09ae49cd4cd3e3b85f0","modified":1684396152078},{"_id":"public/tags/python/index.html","hash":"03bf401d1d9e5e3b8c2409e864b53f2a461b80b0","modified":1684396152078},{"_id":"public/tags/harbor/index.html","hash":"86f9f8ca91625b047f1fd65d2836ff2b024cce7b","modified":1684396152078},{"_id":"public/tags/编程思想/index.html","hash":"ce156407d029c0a719938aa98985a29a8f0cce8b","modified":1684396152078},{"_id":"public/tags/随笔/index.html","hash":"bff9512e499d9d1056896aa9e3a3e2ff925c0183","modified":1684396152078},{"_id":"public/tags/mongo/index.html","hash":"23a21177f039ee97ad5c83c1c8011cb47b3a76a2","modified":1684396152078},{"_id":"public/tags/spring/index.html","hash":"f478f81a1846d369e006c3cb731c4001845d0a19","modified":1684396152078},{"_id":"public/tags/database/index.html","hash":"461d9e2ca2dc81ea7585b975a366dfa47718a304","modified":1684396152078},{"_id":"public/tags/平台/index.html","hash":"7e165a9cc0aab4490257b1ca469ee6afb4906087","modified":1684396152078},{"_id":"public/tags/quartz/index.html","hash":"25daa9543b85644a66115cf386e69d75b8e87360","modified":1684396152078},{"_id":"public/tags/MyBatis-Plus/index.html","hash":"e116eb8893a35939553dbf032a4461480c595b9c","modified":1684396152078},{"_id":"public/tags/Java/index.html","hash":"a7196537864b19f7addbfedcf915041957ec8132","modified":1684396152078},{"_id":"public/tags/house/index.html","hash":"e08bfdbd156b13148b12779f3b0fd4b44a971958","modified":1684396152078},{"_id":"public/tags/maven/index.html","hash":"fa68f144f773a42212e50a886f42918d0ac4831a","modified":1684396152078},{"_id":"public/tags/mysql/index.html","hash":"3bf1ca1b42cdbb9f722b8533cc9e4e3836e8bfb1","modified":1684396152078},{"_id":"public/tags/redis/index.html","hash":"6df41747a46e279e1e6eea694b5523e5a5e8c2c8","modified":1684396152078},{"_id":"public/tags/email/index.html","hash":"5a96a7e0c05203af20da41ce091c713b2840f4d4","modified":1684396152078},{"_id":"public/tags/OpenDayLight/index.html","hash":"bc53c088df14b65db0212d30f81eae3015d7568e","modified":1684396152078},{"_id":"public/tags/elk/index.html","hash":"ccdb8ec275a8595a00b8ee3b32e5138ff614da50","modified":1684396152078},{"_id":"public/tags/micro-service/index.html","hash":"c65e4773bacbb5e318e407c7dcfa0ea888a4a8c4","modified":1684396152078},{"_id":"public/tags/feign/index.html","hash":"0e240d68042736c7fbaf1b9e582f85411895b299","modified":1684396152078},{"_id":"public/tags/spring-cloud/index.html","hash":"93deab33577eb275bb91cc7daa5d1a01e680cecd","modified":1684396152078},{"_id":"public/categories/index.html","hash":"dd2505ba145d369493bc2fdf6fa758ef797d0d40","modified":1684396152078},{"_id":"public/tags/index.html","hash":"da0172c75a9d56fd8642d76029f4049530d13e03","modified":1684396152078},{"_id":"public/2022/04/07/FeignException中body长度的小坑/index.html","hash":"b7b081277a1a2452fc10568ac0f2c56fe8e4f62f","modified":1684396152078},{"_id":"public/2022/04/07/AutoCloseable的妙用/index.html","hash":"ce918284c40cf28a2383698e0332aece9eaad4ba","modified":1684396152078},{"_id":"public/2022/03/03/feign调用失败后返回错误结果/index.html","hash":"659201f581b270fc48e8244148dcd7d59b5bbaa0","modified":1684396152078},{"_id":"public/2022/02/25/从0开始学习go微服务/index.html","hash":"6e7d4917569c9269898b319b95493ba6bc6d7d4a","modified":1684396152078},{"_id":"public/2022/02/15/删除docker-images的正确姿势/index.html","hash":"77aab1c487eb1b2b9d65f6c8fea828ce737b9102","modified":1684396152078},{"_id":"public/2022/01/21/docker部署elk组件-logstash设置/index.html","hash":"7155ba4f656e643a19151fe99788e8faac5b403d","modified":1684396152078},{"_id":"public/2021/12/29/NetconfBaseService-到设备的调用链/index.html","hash":"8adb9c9577a78e977839e62205b09795a72b6ce2","modified":1684396152078},{"_id":"public/2021/12/28/个人邮箱管理计划/index.html","hash":"1c39440c336c089269f1d8b35279bba80dbc3a0d","modified":1684396152078},{"_id":"public/2021/12/08/mysql和redis中的数据一致性问题/index.html","hash":"cf6ea3090515c79665ba2c4ec64b8ad1767954db","modified":1684396152078},{"_id":"public/2021/12/07/mave之为什么找不到我要的依赖/index.html","hash":"fbd1695b3506c515d043b25e2de4d5e7c8296396","modified":1684396152078},{"_id":"public/2021/12/05/深圳光明区踩盘参考/index.html","hash":"68bb7ee6d607cd91aa7c684fd6695a26f3ec0037","modified":1684396152078},{"_id":"public/2021/11/26/MyBatis-Plus-使用tips/index.html","hash":"eda46a2361a259d7933266e2a922afa53d045c0c","modified":1684396152078},{"_id":"public/2021/11/09/展示hexo-blog中所有的tags和categories/index.html","hash":"a548aa4bb56c31d8280ce8928bc370d3cf3416f7","modified":1684396152078},{"_id":"public/2021/11/09/如何展示quartz所有可执行job/index.html","hash":"6ebc787af87e0f7115e9459ea15a3f272adc80a5","modified":1684396152078},{"_id":"public/2021/11/04/spring-如何设置多数据源/index.html","hash":"9cb585de9f993015d14d8d72b233c79be13d4e58","modified":1684396152078},{"_id":"public/2021/10/29/mongodb-部署-简单操作/index.html","hash":"524b896f9f8ffb01176a9b26ec93398a1a341d07","modified":1684396152078},{"_id":"public/2021/10/21/换工作也有一年了，好像也没什么进展嘛/index.html","hash":"99efd31b6d5f62ee80774cc89fc988581ee3e1c8","modified":1684396152078},{"_id":"public/2021/09/23/selFund开发进展/index.html","hash":"5c39c43bc4bcfde5ebce7a562d10865737324049","modified":1684396152078},{"_id":"public/2021/09/20/约定大于配置？/index.html","hash":"bcc8d67886c4c775d29e3b639bebc959ce0e7655","modified":1684396152078},{"_id":"public/2021/09/13/harbor使用过程中遇到的小坑/index.html","hash":"466fa8a244b43d58d9bf6480a08181b066914f1d","modified":1684396152078},{"_id":"public/2021/09/10/用python来订阅redis消息/index.html","hash":"dd6ef32c4d48a804229b5c536c5931fe374c2724","modified":1684396152078},{"_id":"public/2021/09/09/给hexo的post文件名加上日期/index.html","hash":"c79d82e2dffd7d642b2236378c4f3a284f516838","modified":1684396152078},{"_id":"public/2021/09/08/go中的错误处理/index.html","hash":"f660c7f3f17491446cc8383054796b251c445f99","modified":1684396152078},{"_id":"public/2021/09/07/gorm使用踩坑/index.html","hash":"130db433187e5f77675367a61a22c84c1d2cd4f6","modified":1684396152078},{"_id":"public/2021/09/02/对高可用的第一印象/index.html","hash":"82188ac40705f85f93ee51e945b1efc2a57cac0e","modified":1684396152078},{"_id":"public/2021/08/31/docker-部署相关学习-1/index.html","hash":"5b97e036f8d60d711fdb7ef4e4ab87c04f22b9cb","modified":1684396152078},{"_id":"public/2021/08/16/gin框架使用-selFund进展/index.html","hash":"cdbe2c0c7682981ae5cf3761b83414e04a9ca2fe","modified":1684396152078},{"_id":"public/2021/08/13/SelFund-开发计划（2）/index.html","hash":"78cab8ab6fa7135205d1e0f24ba7b5ae38a1256e","modified":1684396152078},{"_id":"public/2021/08/13/基于egg-js的聊天室后端服务/index.html","hash":"f6a78a90a6b4fc30587c9a47be7016cf9e3185f6","modified":1684396152078},{"_id":"public/2021/08/11/sonor常见问题修改/index.html","hash":"ba00544960684ed9e2b45e11ba65c28e34edd9d3","modified":1684396152078},{"_id":"public/2021/06/10/Q003-influxdb中的存储策略/index.html","hash":"d747f66a6ea79d7bf6720ff32e55ae246fd8b9a6","modified":1684396152078},{"_id":"public/2021/06/01/Q001-influxdb学习-基础-重复值解决/index.html","hash":"097dd63d89a17cd619e1195c03f2999ef8f2bd42","modified":1684396152078},{"_id":"public/2021/05/26/WSL2使用问题记录/index.html","hash":"1aee3efba5c64a2286830653405b0212591b6e2a","modified":1684396152078},{"_id":"public/2021/04/27/SOLID设计原则-代码精进之路-2/index.html","hash":"b10e9f40974a99ef497a974f7991d5f95c3b9d1c","modified":1684396152078},{"_id":"public/2021/04/26/初探Optional类-代码精进之路-1/index.html","hash":"f64580376e403198c4fbe233c00fc90c185a8b36","modified":1684396152078},{"_id":"public/2021/04/22/redis能不能作为消息队列？/index.html","hash":"a97a527eae1cd71784efc3cd6f30a04573293ef8","modified":1684396152078},{"_id":"public/2021/04/16/java中父类object与子类object的转换/index.html","hash":"775725a7e909d56b3653e395d51ac27c4a014ac9","modified":1684396152078},{"_id":"public/2021/03/27/SelFund-开发计划（1）/index.html","hash":"6206e44d03c9fc688451a533dd544f3300fb9f4d","modified":1684396152078},{"_id":"public/2021/03/17/选基工具-开发计划/index.html","hash":"15670003783658d35ebd7bc5045499555fb052d1","modified":1684396152078},{"_id":"public/2021/03/17/初尝装饰者模式/index.html","hash":"aa669c7a46d19cae90fc83f961fce82267f179c9","modified":1684396152078},{"_id":"public/2021/03/10/全局变量那点事/index.html","hash":"a11ae2a7b298a9e1dfb8707ca34bd773ada2fb8b","modified":1684396152078},{"_id":"public/2021/03/04/Jsch-初应用/index.html","hash":"e066cac19edc6a4042fa62033e48ac9aa37b33c1","modified":1684396152078},{"_id":"public/2021/03/02/Lambok注解介绍/index.html","hash":"29522b43b2bf59e099ba7b8c45679e64eb9b538b","modified":1684396152078},{"_id":"public/2021/02/26/TSN-常用协议简介/index.html","hash":"4b6b55e171d01a7b7313fc3e5a2ec7dc9b1c4441","modified":1684396152078},{"_id":"public/2021/02/26/mvn常用命令积累/index.html","hash":"569a62bb7b7af25b710846ba4fbbcd4168c63ff5","modified":1684396152078},{"_id":"public/2021/02/25/TICK技术栈简介/index.html","hash":"7679313b54643785300979e57996d9aa8f095499","modified":1684396152078},{"_id":"public/2021/02/23/java并发示例/index.html","hash":"3e6b5135d24bc9161dd40c0310f90ad01140fab8","modified":1684396152078},{"_id":"public/2021/02/23/go并发示例/index.html","hash":"78389fd0fc331a07bc638ea750f89e80936679b9","modified":1684396152078},{"_id":"public/2021/02/20/go并发基础知识/index.html","hash":"80cde46e558f7c5afea4388c0c0c01117724f44e","modified":1684396152078},{"_id":"public/2021/02/19/如何写一个telegram-input插件/index.html","hash":"d8b7e290aca7f0a08037059d4073a22403bcdd59","modified":1684396152078},{"_id":"public/2021/02/19/在windows环境下搭建linux开发环境/index.html","hash":"e31ed877223900a90a27884380b5c2e7457ca725","modified":1684396152078},{"_id":"public/2021/02/18/GKD-hexo-github-pages-next-踩坑过程/index.html","hash":"2565c58fd1977d8a900c7f858756819d196a150e","modified":1684396152078},{"_id":"public/archives/index.html","hash":"986f1675105c2dedcf1d9508f9278148bc456f73","modified":1684396152078},{"_id":"public/archives/page/2/index.html","hash":"b3b0c1bcaac83be69b46fc96dc91b51b6c8d2c54","modified":1684396152078},{"_id":"public/archives/page/3/index.html","hash":"885264c5c1c02c3172cca3d4c7c75cc4710c7c2f","modified":1684396152078},{"_id":"public/archives/page/4/index.html","hash":"86139539bc832d7fc5741ded950da3631bf9b5c3","modified":1684396152078},{"_id":"public/archives/page/5/index.html","hash":"4696a97d5272832cea709dacde382861971881d3","modified":1684396152078},{"_id":"public/archives/2021/index.html","hash":"a20622d946d0c17b5287faeb4810bd1dc19ffaf9","modified":1684396152078},{"_id":"public/archives/2021/page/2/index.html","hash":"d3309e5b3da2b2ca1539e8fead1d3c67339b1f13","modified":1684396152078},{"_id":"public/archives/2021/page/3/index.html","hash":"ddaee9b9b7752b51efc716aff02750755dda0bd5","modified":1684396152078},{"_id":"public/archives/2021/page/4/index.html","hash":"92567e99684493a4af0977dab9958f58f4af2fbf","modified":1684396152078},{"_id":"public/archives/2021/page/5/index.html","hash":"2ecfca53c611a1f4fbd035917f0478589b6c2eae","modified":1684396152078},{"_id":"public/archives/2021/02/index.html","hash":"0002405c713c5ed61b9dd28e2c3302a2e8d271aa","modified":1684396152078},{"_id":"public/categories/develop/index.html","hash":"a4c02b3e9d381ca03189f358fb52ea7436f14a97","modified":1684396152078},{"_id":"public/index.html","hash":"b0d2318cf1608aa303417992bd41be73c15a7b38","modified":1684396152078},{"_id":"public/page/2/index.html","hash":"d6f22f04a375b41214863033c372811415de0b7f","modified":1684396152078},{"_id":"public/page/3/index.html","hash":"eb820b9fe67376b193a1c4a6ff2bb91305ed2301","modified":1684396152078},{"_id":"public/page/4/index.html","hash":"3a1d57e30a9124818adad407187112e9bde9af3c","modified":1684396152078},{"_id":"public/page/5/index.html","hash":"585e5f960ef25bf8ec70ca416d47bb2d8e206e0e","modified":1684396152078},{"_id":"public/page/6/index.html","hash":"ca2b72bd659ca1168a1de2d39284df827f556fd0","modified":1684396152078},{"_id":"public/tags/java/index.html","hash":"22dc86b5cb80d1ee580965d32d44c7a16e93232c","modified":1684396152078},{"_id":"public/images/2021-12-7/mvn_life.png","hash":"179de1e9a71b8f79f58eef25653afb3fbf40ac50","modified":1684396152078},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1684396152078},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1684396152078},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1684396152078},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1684396152078},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1684396152078},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1684396152078},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1684396152078},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1684396152078},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1684396152078},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1684396152078},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1684396152078},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1684396152078},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1684396152078},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1684396152078},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1684396152078},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1684396152078},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1684396152078},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1684396152078},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1684396152078},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1684396152078},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1684396152078},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1684396152078},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1684396152078},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1684396152078},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1684396152078},{"_id":"public/css/main.css","hash":"95cd55c6658abf3ba6cc6357ba09d6ba4938984b","modified":1684396152078},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1684396152078},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1684396152078},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1684396152078}],"Category":[{"name":"go初学者教程","_id":"clhstzfyk00042h5pdnt26qvc"},{"name":"指南","_id":"clhstzg3t000a2h5p77stb6zb"},{"name":"java初学者教程","_id":"clhstzgkd000s2h5phcpch5t2"},{"name":"网络","_id":"clhstzgmc000z2h5p91he8sxn"},{"name":"初学者教程","_id":"clhstzgq6001d2h5pbnwj0ngd"},{"name":"java相关","_id":"clhstzgvk001k2h5p6udwedft"},{"name":"设计模式","_id":"clhstzgz4001q2h5p726s5it1"},{"name":"奇想天动","_id":"clhstzh1a001y2h5pe5qhf0ek"},{"name":"开发计划","_id":"clhstzh5s00262h5p8o16ef26"},{"name":"代码精进之路","_id":"clhstzhac002j2h5paw0075sx"},{"name":"WSL","_id":"clhstzhf0002w2h5pcaw228cj"},{"name":"日常问题解决","_id":"clhstzhh100322h5p0y2pcmi1"},{"name":"sonor","_id":"clhstzhkp003f2h5pedr58jff"},{"name":"开源项目","_id":"clhstzhp8003s2h5phssgaryw"},{"name":"go","_id":"clhstzhr9003z2h5pflkcfu4r"},{"name":"部署&运维","_id":"clhstzhss00452h5p9417gllj"},{"name":"方法论","_id":"clhstzhuk004b2h5p5rf1exsv"},{"name":"python小工具","_id":"clhstzhzf004r2h5p5z9g622q"},{"name":"编程","_id":"clhstzi1b00532h5p7pav8tuk"},{"name":"other","_id":"clhstzi1q00582h5papsz6503"},{"name":"mongodb","_id":"clhstzi2n005d2h5p9qu29wwc"},{"name":"backend","_id":"clhstzi2s005g2h5p05rhat02"},{"name":"chat","_id":"clhstzi3h005j2h5p4wvf0vib"},{"name":"person—devlop","_id":"clhstzi4j005r2h5p1ws25xdz"},{"name":"life","_id":"clhstzi6400602h5p3yl487z1"},{"name":"develop","_id":"clhstzi7d00652h5pavkp0v4x"}],"Data":[],"Page":[{"title":"categories","date":"2021-02-19T10:55:48.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-02-19 10:55:48\ntype: categories\n---\n","updated":"2023-05-18T07:48:25.869Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clhstzfos00002h5pful6dk9e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"plan","date":"2021-02-19T16:08:19.000Z","_content":"\n# 我真的好菜\n\n> 这里做一个记录，记一下技术欠债&解决的时间\n\n|编号|提出时间| 问题描述 | 解决时间| 对应blog|\n|--|--|--|--|--|\n|Q001|2021/6/1|influxdb如何解决重复值问题？| 2021/06/08 | Q001:influxdb学习-基础&重复值解决 |\n|Q002|2021/6/3 |学习elk的作用、怎么使用、埋码相关问题|\n|Q003|2021/6/7 | 查询influxdb时为DB、measurement之间为啥会有autogen、rp30之类字符？|2021/06/11|Q003:influxdb中的存储策略&存储相关\n|Q004|2021/6/11| 常见的跳表是怎么样的数据结构？可以解决什么问题？|\n|Q005|2021/6/11| 怎么用正确的姿势创建线程池？创建了之后怎么正确使用？|","source":"plan/index.md","raw":"---\ntitle: plan\ndate: 2021-02-19 16:08:19\n---\n\n# 我真的好菜\n\n> 这里做一个记录，记一下技术欠债&解决的时间\n\n|编号|提出时间| 问题描述 | 解决时间| 对应blog|\n|--|--|--|--|--|\n|Q001|2021/6/1|influxdb如何解决重复值问题？| 2021/06/08 | Q001:influxdb学习-基础&重复值解决 |\n|Q002|2021/6/3 |学习elk的作用、怎么使用、埋码相关问题|\n|Q003|2021/6/7 | 查询influxdb时为DB、measurement之间为啥会有autogen、rp30之类字符？|2021/06/11|Q003:influxdb中的存储策略&存储相关\n|Q004|2021/6/11| 常见的跳表是怎么样的数据结构？可以解决什么问题？|\n|Q005|2021/6/11| 怎么用正确的姿势创建线程池？创建了之后怎么正确使用？|","updated":"2023-05-18T07:48:25.869Z","path":"plan/index.html","comments":1,"layout":"page","_id":"clhstzfx800022h5peqs3g462","content":"<h1 id=\"我真的好菜\"><a href=\"#我真的好菜\" class=\"headerlink\" title=\"我真的好菜\"></a>我真的好菜</h1><blockquote>\n<p>这里做一个记录，记一下技术欠债&amp;解决的时间</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>提出时间</th>\n<th>问题描述</th>\n<th>解决时间</th>\n<th>对应blog</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Q001</td>\n<td>2021/6/1</td>\n<td>influxdb如何解决重复值问题？</td>\n<td>2021/06/08</td>\n<td>Q001:influxdb学习-基础&amp;重复值解决</td>\n</tr>\n<tr>\n<td>Q002</td>\n<td>2021/6/3</td>\n<td>学习elk的作用、怎么使用、埋码相关问题</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Q003</td>\n<td>2021/6/7</td>\n<td>查询influxdb时为DB、measurement之间为啥会有autogen、rp30之类字符？</td>\n<td>2021/06/11</td>\n<td>Q003:influxdb中的存储策略&amp;存储相关</td>\n</tr>\n<tr>\n<td>Q004</td>\n<td>2021/6/11</td>\n<td>常见的跳表是怎么样的数据结构？可以解决什么问题？</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Q005</td>\n<td>2021/6/11</td>\n<td>怎么用正确的姿势创建线程池？创建了之后怎么正确使用？</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我真的好菜\"><a href=\"#我真的好菜\" class=\"headerlink\" title=\"我真的好菜\"></a>我真的好菜</h1><blockquote>\n<p>这里做一个记录，记一下技术欠债&amp;解决的时间</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>提出时间</th>\n<th>问题描述</th>\n<th>解决时间</th>\n<th>对应blog</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Q001</td>\n<td>2021/6/1</td>\n<td>influxdb如何解决重复值问题？</td>\n<td>2021/06/08</td>\n<td>Q001:influxdb学习-基础&amp;重复值解决</td>\n</tr>\n<tr>\n<td>Q002</td>\n<td>2021/6/3</td>\n<td>学习elk的作用、怎么使用、埋码相关问题</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Q003</td>\n<td>2021/6/7</td>\n<td>查询influxdb时为DB、measurement之间为啥会有autogen、rp30之类字符？</td>\n<td>2021/06/11</td>\n<td>Q003:influxdb中的存储策略&amp;存储相关</td>\n</tr>\n<tr>\n<td>Q004</td>\n<td>2021/6/11</td>\n<td>常见的跳表是怎么样的数据结构？可以解决什么问题？</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Q005</td>\n<td>2021/6/11</td>\n<td>怎么用正确的姿势创建线程池？创建了之后怎么正确使用？</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"tags","date":"2021-02-19T11:00:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-02-19 11:00:04\ntype: tags\n---\n","updated":"2023-05-18T07:48:25.869Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clhstzg0g00062h5p60uuf4jd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"go中...语法糖的应用","date":"2021-02-19T18:04:57.000Z","_content":"\n今天第一次用go刷leetcode，看到有这么一句：\n\n    ans = append(ans, append([]int(nil), comb...))\n\n对go的了解属实不深，不了解comb后边这...是干啥的，于是就查了下，以下是详细内容\n\n<!--more-->\n\n首先是函数定义的时候，可以做如下定义：\n\n    func test1(args ...string){}\n\n这里就可以传入多个string类型的变量，args也是一个可迭代的对象。这个用法有点像python里的变量前边加一个*就可以接受多个变量\n\n第二中用法是\n\n    var strss= []string{\"qwr\",\"234\",\"yui\"}\n    var strss2= []string{\"qqq\",\"aaa\",\"zzz\",\"zzz\",}\n    strss=append(strss,strss2...) //strss2的元素被打散一个个append进strss\n    fmt.Println(strss)\n\n    output:\n    [qwr 234 yui qqq aaa zzz zzz]\n\n    这里... 相当于把strss2做了切片，挨个传进了strss\n\n    毕竟append的第二个入参是...string 不是[]string，所以用这个还是相当方便的。\n","source":"_posts/2021-02-19-go中-语法糖的应用.md","raw":"---\ntitle: go中...语法糖的应用\ndate: 2021-02-19 18:04:57\ntags:\n- go\n- 语法糖\ncategories:\n- go初学者教程\n---\n\n今天第一次用go刷leetcode，看到有这么一句：\n\n    ans = append(ans, append([]int(nil), comb...))\n\n对go的了解属实不深，不了解comb后边这...是干啥的，于是就查了下，以下是详细内容\n\n<!--more-->\n\n首先是函数定义的时候，可以做如下定义：\n\n    func test1(args ...string){}\n\n这里就可以传入多个string类型的变量，args也是一个可迭代的对象。这个用法有点像python里的变量前边加一个*就可以接受多个变量\n\n第二中用法是\n\n    var strss= []string{\"qwr\",\"234\",\"yui\"}\n    var strss2= []string{\"qqq\",\"aaa\",\"zzz\",\"zzz\",}\n    strss=append(strss,strss2...) //strss2的元素被打散一个个append进strss\n    fmt.Println(strss)\n\n    output:\n    [qwr 234 yui qqq aaa zzz zzz]\n\n    这里... 相当于把strss2做了切片，挨个传进了strss\n\n    毕竟append的第二个入参是...string 不是[]string，所以用这个还是相当方便的。\n","slug":"go中-语法糖的应用","published":1,"updated":"2023-05-18T07:48:25.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzftf00012h5p0f0lgxtu","content":"<p>今天第一次用go刷leetcode，看到有这么一句：</p>\n<pre><code>ans = append(ans, append([]int(nil), comb...))\n</code></pre>\n<p>对go的了解属实不深，不了解comb后边这…是干啥的，于是就查了下，以下是详细内容</p>\n<a id=\"more\"></a>\n\n<p>首先是函数定义的时候，可以做如下定义：</p>\n<pre><code>func test1(args ...string)&#123;&#125;\n</code></pre>\n<p>这里就可以传入多个string类型的变量，args也是一个可迭代的对象。这个用法有点像python里的变量前边加一个*就可以接受多个变量</p>\n<p>第二中用法是</p>\n<pre><code>var strss= []string&#123;&quot;qwr&quot;,&quot;234&quot;,&quot;yui&quot;&#125;\nvar strss2= []string&#123;&quot;qqq&quot;,&quot;aaa&quot;,&quot;zzz&quot;,&quot;zzz&quot;,&#125;\nstrss=append(strss,strss2...) //strss2的元素被打散一个个append进strss\nfmt.Println(strss)\n\noutput:\n[qwr 234 yui qqq aaa zzz zzz]\n\n这里... 相当于把strss2做了切片，挨个传进了strss\n\n毕竟append的第二个入参是...string 不是[]string，所以用这个还是相当方便的。\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>今天第一次用go刷leetcode，看到有这么一句：</p>\n<pre><code>ans = append(ans, append([]int(nil), comb...))\n</code></pre>\n<p>对go的了解属实不深，不了解comb后边这…是干啥的，于是就查了下，以下是详细内容</p>","more":"<p>首先是函数定义的时候，可以做如下定义：</p>\n<pre><code>func test1(args ...string)&#123;&#125;\n</code></pre>\n<p>这里就可以传入多个string类型的变量，args也是一个可迭代的对象。这个用法有点像python里的变量前边加一个*就可以接受多个变量</p>\n<p>第二中用法是</p>\n<pre><code>var strss= []string&#123;&quot;qwr&quot;,&quot;234&quot;,&quot;yui&quot;&#125;\nvar strss2= []string&#123;&quot;qqq&quot;,&quot;aaa&quot;,&quot;zzz&quot;,&quot;zzz&quot;,&#125;\nstrss=append(strss,strss2...) //strss2的元素被打散一个个append进strss\nfmt.Println(strss)\n\noutput:\n[qwr 234 yui qqq aaa zzz zzz]\n\n这里... 相当于把strss2做了切片，挨个传进了strss\n\n毕竟append的第二个入参是...string 不是[]string，所以用这个还是相当方便的。\n</code></pre>"},{"title":"在windows环境下搭建linux+gvm开发环境","date":"2021-02-19T16:38:50.000Z","_content":"\n为什么要这么做呢？\n\n主要是做go开发的时候发现要修改telegram之类的插件都是在linux系统下开发编译比较方便，然而我手头又没有linux机器，只好考虑在本机上搭建这么一套环境了。\n\n其实这是一篇早就写好的文章，之前发表在了我的CSDN上，还是搬运了过来，以下是正文\n\n<!--more-->\n----\n\n## 安装ubuntu16.04\n\n这个没啥好说的，参考微软的文档绝对没问题\n\nhttps://docs.microsoft.com/zh-cn/windows/wsl/install-win10\n\n最简单的方法还是直接加入开发者计划，升级一下系统，一行命令就搞定\n\n## ubuntu设置\nUbuntu安装好之后还是要做一些设置的：\n\n1. 设置登陆账号密码 \n2. 权限提升，其实可以直接用root来登录，要设置root的密码\n\n\t\tsudo passwd root\n\t\n3. 升级apt-get，需要换源的可以参考这个[帖子](https://blog.csdn.net/weixin_39394526/article/details/87935449)\n\t\n\t\tapt-get update\n\t\n\n## 安装GVM \n\n[在ubuntu上安装GVM](https://www.cnblogs.com/or2-/p/4160814.html)\n\n\t//安装gvm的必要软件\n\tsudo apt-get install curl git mercurial make binutils bison gcc build-essential　\n\t//使用bash安装GVM\n\tbash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\n\n如果这个时候报了403错误，则按照下列操作\n\n\tsudo vim /etc/hosts\n\t//在文件中加下边一句\n\t199.232.28.133 raw.githubusercontent.com\n\n如果报了这个错误：\n\n\tcurl: (35) gnutls_handshake() failed: Error in the pull function.\n就按照这个[帖子](https://blog.csdn.net/anlian523/article/details/90729063)操作一下\n## 安装GO\n通过GVM来安装go，如果要安装1.13等高版本，需要首先安装1.4版本的go\n\n那么就先安装1.4，再安装1.13：\n\n\tgvm install go1.4\n\tgvm use go1.4\n\tgvm install go1.13\n安装1.4的是时候如果有报错：\n\n\tDownloading Go source...\n\tInstalling go1.4...\n\t * Compiling...\n\t/root/.gvm/scripts/install: line 84: go: command not found\n\tERROR: Failed to compile. Check the logs at /root/.gvm/logs/go-go1.4-compile.log\n\tERROR: Failed to use installed version\n那么就设置环境变量不使能cgo，主要参考的是这篇[文章](https://blog.csdn.net/zoumy3/article/details/78440880?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.not_use_machine_learn_pai)，一般就可以解决，接下来继续安装go1.13：\n\n\texport  CGO_ENABLED=0\n\t\n如果报这个错：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210108161709483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUzNzI4OQ==,size_16,color_FFFFFF,t_70)\n就换成如下安装命令：\n\t\n\tgvm install go1.4 -B\n\n## GO设置\ngo代理主要参考的是这一篇文章：\n\n[goproxy 代理设置](https://www.sunzhongwei.com/problem-of-domestic-go-get-unable-to-download?from=sidebar_new)\n\t\n\tgo env -w GO111MODULE=on\n\tgo env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct\n\n## 其他参考：\n\n[gvm更新以及安装go](https://travis-ci.org/github/monochromegane/the_platinum_searcher/jobs/30478610)\n\n\n","source":"_posts/2021-02-19-在windows环境下搭建linux开发环境.md","raw":"---\ntitle: 在windows环境下搭建linux+gvm开发环境\ndate: 2021-02-19 16:38:50\ntags:\n- Windows\n- wsl2\n- Ubuntu\ncategories:\n- 指南\n---\n\n为什么要这么做呢？\n\n主要是做go开发的时候发现要修改telegram之类的插件都是在linux系统下开发编译比较方便，然而我手头又没有linux机器，只好考虑在本机上搭建这么一套环境了。\n\n其实这是一篇早就写好的文章，之前发表在了我的CSDN上，还是搬运了过来，以下是正文\n\n<!--more-->\n----\n\n## 安装ubuntu16.04\n\n这个没啥好说的，参考微软的文档绝对没问题\n\nhttps://docs.microsoft.com/zh-cn/windows/wsl/install-win10\n\n最简单的方法还是直接加入开发者计划，升级一下系统，一行命令就搞定\n\n## ubuntu设置\nUbuntu安装好之后还是要做一些设置的：\n\n1. 设置登陆账号密码 \n2. 权限提升，其实可以直接用root来登录，要设置root的密码\n\n\t\tsudo passwd root\n\t\n3. 升级apt-get，需要换源的可以参考这个[帖子](https://blog.csdn.net/weixin_39394526/article/details/87935449)\n\t\n\t\tapt-get update\n\t\n\n## 安装GVM \n\n[在ubuntu上安装GVM](https://www.cnblogs.com/or2-/p/4160814.html)\n\n\t//安装gvm的必要软件\n\tsudo apt-get install curl git mercurial make binutils bison gcc build-essential　\n\t//使用bash安装GVM\n\tbash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\n\n如果这个时候报了403错误，则按照下列操作\n\n\tsudo vim /etc/hosts\n\t//在文件中加下边一句\n\t199.232.28.133 raw.githubusercontent.com\n\n如果报了这个错误：\n\n\tcurl: (35) gnutls_handshake() failed: Error in the pull function.\n就按照这个[帖子](https://blog.csdn.net/anlian523/article/details/90729063)操作一下\n## 安装GO\n通过GVM来安装go，如果要安装1.13等高版本，需要首先安装1.4版本的go\n\n那么就先安装1.4，再安装1.13：\n\n\tgvm install go1.4\n\tgvm use go1.4\n\tgvm install go1.13\n安装1.4的是时候如果有报错：\n\n\tDownloading Go source...\n\tInstalling go1.4...\n\t * Compiling...\n\t/root/.gvm/scripts/install: line 84: go: command not found\n\tERROR: Failed to compile. Check the logs at /root/.gvm/logs/go-go1.4-compile.log\n\tERROR: Failed to use installed version\n那么就设置环境变量不使能cgo，主要参考的是这篇[文章](https://blog.csdn.net/zoumy3/article/details/78440880?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.not_use_machine_learn_pai)，一般就可以解决，接下来继续安装go1.13：\n\n\texport  CGO_ENABLED=0\n\t\n如果报这个错：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210108161709483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUzNzI4OQ==,size_16,color_FFFFFF,t_70)\n就换成如下安装命令：\n\t\n\tgvm install go1.4 -B\n\n## GO设置\ngo代理主要参考的是这一篇文章：\n\n[goproxy 代理设置](https://www.sunzhongwei.com/problem-of-domestic-go-get-unable-to-download?from=sidebar_new)\n\t\n\tgo env -w GO111MODULE=on\n\tgo env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct\n\n## 其他参考：\n\n[gvm更新以及安装go](https://travis-ci.org/github/monochromegane/the_platinum_searcher/jobs/30478610)\n\n\n","slug":"在windows环境下搭建linux开发环境","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzfxx00032h5p7kbd0psk","content":"<p>为什么要这么做呢？</p>\n<p>主要是做go开发的时候发现要修改telegram之类的插件都是在linux系统下开发编译比较方便，然而我手头又没有linux机器，只好考虑在本机上搭建这么一套环境了。</p>\n<p>其实这是一篇早就写好的文章，之前发表在了我的CSDN上，还是搬运了过来，以下是正文</p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"安装ubuntu16-04\"><a href=\"#安装ubuntu16-04\" class=\"headerlink\" title=\"安装ubuntu16.04\"></a>安装ubuntu16.04</h2><p>这个没啥好说的，参考微软的文档绝对没问题</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10\">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>\n<p>最简单的方法还是直接加入开发者计划，升级一下系统，一行命令就搞定</p>\n<h2 id=\"ubuntu设置\"><a href=\"#ubuntu设置\" class=\"headerlink\" title=\"ubuntu设置\"></a>ubuntu设置</h2><p>Ubuntu安装好之后还是要做一些设置的：</p>\n<ol>\n<li><p>设置登陆账号密码 </p>\n</li>\n<li><p>权限提升，其实可以直接用root来登录，要设置root的密码</p>\n<pre><code> sudo passwd root\n</code></pre>\n</li>\n<li><p>升级apt-get，需要换源的可以参考这个<a href=\"https://blog.csdn.net/weixin_39394526/article/details/87935449\">帖子</a></p>\n<pre><code> apt-get update\n</code></pre>\n</li>\n</ol>\n<h2 id=\"安装GVM\"><a href=\"#安装GVM\" class=\"headerlink\" title=\"安装GVM\"></a>安装GVM</h2><p><a href=\"https://www.cnblogs.com/or2-/p/4160814.html\">在ubuntu上安装GVM</a></p>\n<pre><code>//安装gvm的必要软件\nsudo apt-get install curl git mercurial make binutils bison gcc build-essential　\n//使用bash安装GVM\nbash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\n</code></pre>\n<p>如果这个时候报了403错误，则按照下列操作</p>\n<pre><code>sudo vim /etc/hosts\n//在文件中加下边一句\n199.232.28.133 raw.githubusercontent.com\n</code></pre>\n<p>如果报了这个错误：</p>\n<pre><code>curl: (35) gnutls_handshake() failed: Error in the pull function.\n</code></pre>\n<p>就按照这个<a href=\"https://blog.csdn.net/anlian523/article/details/90729063\">帖子</a>操作一下</p>\n<h2 id=\"安装GO\"><a href=\"#安装GO\" class=\"headerlink\" title=\"安装GO\"></a>安装GO</h2><p>通过GVM来安装go，如果要安装1.13等高版本，需要首先安装1.4版本的go</p>\n<p>那么就先安装1.4，再安装1.13：</p>\n<pre><code>gvm install go1.4\ngvm use go1.4\ngvm install go1.13\n</code></pre>\n<p>安装1.4的是时候如果有报错：</p>\n<pre><code>Downloading Go source...\nInstalling go1.4...\n * Compiling...\n/root/.gvm/scripts/install: line 84: go: command not found\nERROR: Failed to compile. Check the logs at /root/.gvm/logs/go-go1.4-compile.log\nERROR: Failed to use installed version\n</code></pre>\n<p>那么就设置环境变量不使能cgo，主要参考的是这篇<a href=\"https://blog.csdn.net/zoumy3/article/details/78440880?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.not_use_machine_learn_pai\">文章</a>，一般就可以解决，接下来继续安装go1.13：</p>\n<pre><code>export  CGO_ENABLED=0\n</code></pre>\n<p>如果报这个错：<br><img src=\"https://img-blog.csdnimg.cn/20210108161709483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUzNzI4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>就换成如下安装命令：</p>\n<pre><code>gvm install go1.4 -B\n</code></pre>\n<h2 id=\"GO设置\"><a href=\"#GO设置\" class=\"headerlink\" title=\"GO设置\"></a>GO设置</h2><p>go代理主要参考的是这一篇文章：</p>\n<p><a href=\"https://www.sunzhongwei.com/problem-of-domestic-go-get-unable-to-download?from=sidebar_new\">goproxy 代理设置</a></p>\n<pre><code>go env -w GO111MODULE=on\ngo env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct\n</code></pre>\n<h2 id=\"其他参考：\"><a href=\"#其他参考：\" class=\"headerlink\" title=\"其他参考：\"></a>其他参考：</h2><p><a href=\"https://travis-ci.org/github/monochromegane/the_platinum_searcher/jobs/30478610\">gvm更新以及安装go</a></p>\n","site":{"data":{}},"excerpt":"<p>为什么要这么做呢？</p>\n<p>主要是做go开发的时候发现要修改telegram之类的插件都是在linux系统下开发编译比较方便，然而我手头又没有linux机器，只好考虑在本机上搭建这么一套环境了。</p>\n<p>其实这是一篇早就写好的文章，之前发表在了我的CSDN上，还是搬运了过来，以下是正文</p>","more":"<hr>\n<h2 id=\"安装ubuntu16-04\"><a href=\"#安装ubuntu16-04\" class=\"headerlink\" title=\"安装ubuntu16.04\"></a>安装ubuntu16.04</h2><p>这个没啥好说的，参考微软的文档绝对没问题</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10\">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>\n<p>最简单的方法还是直接加入开发者计划，升级一下系统，一行命令就搞定</p>\n<h2 id=\"ubuntu设置\"><a href=\"#ubuntu设置\" class=\"headerlink\" title=\"ubuntu设置\"></a>ubuntu设置</h2><p>Ubuntu安装好之后还是要做一些设置的：</p>\n<ol>\n<li><p>设置登陆账号密码 </p>\n</li>\n<li><p>权限提升，其实可以直接用root来登录，要设置root的密码</p>\n<pre><code> sudo passwd root\n</code></pre>\n</li>\n<li><p>升级apt-get，需要换源的可以参考这个<a href=\"https://blog.csdn.net/weixin_39394526/article/details/87935449\">帖子</a></p>\n<pre><code> apt-get update\n</code></pre>\n</li>\n</ol>\n<h2 id=\"安装GVM\"><a href=\"#安装GVM\" class=\"headerlink\" title=\"安装GVM\"></a>安装GVM</h2><p><a href=\"https://www.cnblogs.com/or2-/p/4160814.html\">在ubuntu上安装GVM</a></p>\n<pre><code>//安装gvm的必要软件\nsudo apt-get install curl git mercurial make binutils bison gcc build-essential　\n//使用bash安装GVM\nbash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\n</code></pre>\n<p>如果这个时候报了403错误，则按照下列操作</p>\n<pre><code>sudo vim /etc/hosts\n//在文件中加下边一句\n199.232.28.133 raw.githubusercontent.com\n</code></pre>\n<p>如果报了这个错误：</p>\n<pre><code>curl: (35) gnutls_handshake() failed: Error in the pull function.\n</code></pre>\n<p>就按照这个<a href=\"https://blog.csdn.net/anlian523/article/details/90729063\">帖子</a>操作一下</p>\n<h2 id=\"安装GO\"><a href=\"#安装GO\" class=\"headerlink\" title=\"安装GO\"></a>安装GO</h2><p>通过GVM来安装go，如果要安装1.13等高版本，需要首先安装1.4版本的go</p>\n<p>那么就先安装1.4，再安装1.13：</p>\n<pre><code>gvm install go1.4\ngvm use go1.4\ngvm install go1.13\n</code></pre>\n<p>安装1.4的是时候如果有报错：</p>\n<pre><code>Downloading Go source...\nInstalling go1.4...\n * Compiling...\n/root/.gvm/scripts/install: line 84: go: command not found\nERROR: Failed to compile. Check the logs at /root/.gvm/logs/go-go1.4-compile.log\nERROR: Failed to use installed version\n</code></pre>\n<p>那么就设置环境变量不使能cgo，主要参考的是这篇<a href=\"https://blog.csdn.net/zoumy3/article/details/78440880?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-3.not_use_machine_learn_pai\">文章</a>，一般就可以解决，接下来继续安装go1.13：</p>\n<pre><code>export  CGO_ENABLED=0\n</code></pre>\n<p>如果报这个错：<br><img src=\"https://img-blog.csdnimg.cn/20210108161709483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzUzNzI4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>就换成如下安装命令：</p>\n<pre><code>gvm install go1.4 -B\n</code></pre>\n<h2 id=\"GO设置\"><a href=\"#GO设置\" class=\"headerlink\" title=\"GO设置\"></a>GO设置</h2><p>go代理主要参考的是这一篇文章：</p>\n<p><a href=\"https://www.sunzhongwei.com/problem-of-domestic-go-get-unable-to-download?from=sidebar_new\">goproxy 代理设置</a></p>\n<pre><code>go env -w GO111MODULE=on\ngo env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct\n</code></pre>\n<h2 id=\"其他参考：\"><a href=\"#其他参考：\" class=\"headerlink\" title=\"其他参考：\"></a>其他参考：</h2><p><a href=\"https://travis-ci.org/github/monochromegane/the_platinum_searcher/jobs/30478610\">gvm更新以及安装go</a></p>"},{"title":"GKD! hexo + github pages + next 踩坑过程","date":"2021-02-18T17:17:24.000Z","_content":"\n其实在年前就试着想搞这么一套个人blog，然而年前只想着放假并没有开搞，于是在年后按照教程搞了一遍。\n\n----\n先讲一下总体思路：\n\ngithub pages 可以展示静态页面\n\nhexo 作为一个blog系统可以生成静态页面\n\nnext 其实就是一个主题，用来凑数的\n\nTravis CI 来做集成\n\n<!--more-->\n-----\n\n接下来是正文：\n\n1. 本地环境搭建，生成本地blog\n\n    按照hexo需要两个软件：Node.js 和 git，这两个的安装不在赘述\n\n    安装hexo：\n\n        npm install -g hexo-cli \n\n    hexo安装完成之后，使用以下命令可以新建一个hexo博客：\n\n        hexo init <floder>\n\n    floder为文件夹的名称，也就是新建的博客名，进入到这个文件夹中 *_config.yml* 是配置文件\n\n    到了这里本地的blog也就建好了，下一步我们将其迁移至github上\n\n2. 迁移至github\n\n    这里直接讲将站点文件公开的部署方法：\n\n    1. 在github上新建一个repository，这个repository的命名按照<项目名>.github.io的形式来命名（大部分人的这里的项目名都是直接用的github的用户名，可以直接用<用户名>.github.io的形式来访问这个博客。）\n\n    2. 将github上的repository clone至本地（一般建好的情况下会有一个gh-pages的分支有一些example页面文件，先不要管他），在本地新建一个master分支，将本地blog文件夹里的所有文件copy到master分支下。\n\n    3. travis CI配置：\n    \n        1). 将[travis CI](https://github.com/marketplace/travis-ci)配置到自己的github账户中\n\n        2). 打开github的[应用设置](https://github.com/settings/installations),里边选择travis ci后边的config，将其权限配置为运行访问所有repository\n\n        3). 在github中新建一个[token](https://github.com/settings/tokens),并勾选token的 repo 权限， 记录生成的token\n\n        4). 在[travis CI](https://travis-ci.com/)的页面，打开刚刚建立好的github项目的配置页面，在environment variables 下新建一个变量，变量名为 *GH_TOKEN*， 变量值为刚刚github上生成的token， 点击add保存\n\n    4. 修改travis ci配置\n\n        在刚刚复制过去的文件夹里，新建一个./.travis.yml文件\n\n            sudo: false\n            language: node_js\n            node_js:\n              - 10 # use nodejs v10 LTS\n            cache: npm\n            branches:\n              only:\n                - master # build master branch only\n            script:\n              - hexo generate # generate static files\n            deploy:\n              provider: pages\n              skip-cleanup: true\n              github-token: $GH_TOKEN\n              keep-history: true\n              on:\n                branch: master\n              local-dir: public\n    5. push master branch\n\n        到了这一步就基本完成了，将上述文件推送至github上，travis ci就会自动检测到此项目有变化，部署博客文件至gh-pages分支上。\n\n    6. 访问网站\n\n        如果项目名是github用户名的话，可以直接访问 https://<你的 GitHub 用户名>.github.io\n\n        如果不是的话，就访问 https://<你的 GitHub 用户名>.github.io/<项目名>\n\n-----\n\n坑：\n\n1. 如果项目名不是github用户名的话，github还是会访问https://<你的 GitHub 用户名>.github.io 下加载css文件，这个时候需要到 _config.yml 文件下修改url为https://<你的 GitHub 用户名>.github.io/<项目名>,以及修改root为/<项目名>/，才可以正常读取到css文件。\n\n    比如我的URL设置就是如下：\n\n        # URL\n        ## If your site is put in a subdirectory, set url as 'http://example.com/   child'     and root as '/child/'\n        url: https://jiahui-qin.github.io/dragonFlyInSky.GitHub.io/\n        root: /dragonFlyInSky.GitHub.io/\n        permalink: :year/:month/:day/:title/\n        permalink_defaults:\n        pretty_urls:\n          trailing_index: true # Set to false to remove trailing 'index.html'     from    permalinks\n          trailing_html: true # Set to false to remove trailing '.html' from    permalinks\n\n\n----\n\n参考：\n\n[hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n----\nps\n\n写完之后才发现这样的教程也太多了。\n","source":"_posts/2021-02-18-GKD-hexo-github-pages-next-踩坑过程.md","raw":"---\ntitle: GKD! hexo + github pages + next 踩坑过程\ndate: 2021-02-18 17:17:24\ntags:\n- github\n- hexo\n- blog\ncategories:\n- 指南\n---\n\n其实在年前就试着想搞这么一套个人blog，然而年前只想着放假并没有开搞，于是在年后按照教程搞了一遍。\n\n----\n先讲一下总体思路：\n\ngithub pages 可以展示静态页面\n\nhexo 作为一个blog系统可以生成静态页面\n\nnext 其实就是一个主题，用来凑数的\n\nTravis CI 来做集成\n\n<!--more-->\n-----\n\n接下来是正文：\n\n1. 本地环境搭建，生成本地blog\n\n    按照hexo需要两个软件：Node.js 和 git，这两个的安装不在赘述\n\n    安装hexo：\n\n        npm install -g hexo-cli \n\n    hexo安装完成之后，使用以下命令可以新建一个hexo博客：\n\n        hexo init <floder>\n\n    floder为文件夹的名称，也就是新建的博客名，进入到这个文件夹中 *_config.yml* 是配置文件\n\n    到了这里本地的blog也就建好了，下一步我们将其迁移至github上\n\n2. 迁移至github\n\n    这里直接讲将站点文件公开的部署方法：\n\n    1. 在github上新建一个repository，这个repository的命名按照<项目名>.github.io的形式来命名（大部分人的这里的项目名都是直接用的github的用户名，可以直接用<用户名>.github.io的形式来访问这个博客。）\n\n    2. 将github上的repository clone至本地（一般建好的情况下会有一个gh-pages的分支有一些example页面文件，先不要管他），在本地新建一个master分支，将本地blog文件夹里的所有文件copy到master分支下。\n\n    3. travis CI配置：\n    \n        1). 将[travis CI](https://github.com/marketplace/travis-ci)配置到自己的github账户中\n\n        2). 打开github的[应用设置](https://github.com/settings/installations),里边选择travis ci后边的config，将其权限配置为运行访问所有repository\n\n        3). 在github中新建一个[token](https://github.com/settings/tokens),并勾选token的 repo 权限， 记录生成的token\n\n        4). 在[travis CI](https://travis-ci.com/)的页面，打开刚刚建立好的github项目的配置页面，在environment variables 下新建一个变量，变量名为 *GH_TOKEN*， 变量值为刚刚github上生成的token， 点击add保存\n\n    4. 修改travis ci配置\n\n        在刚刚复制过去的文件夹里，新建一个./.travis.yml文件\n\n            sudo: false\n            language: node_js\n            node_js:\n              - 10 # use nodejs v10 LTS\n            cache: npm\n            branches:\n              only:\n                - master # build master branch only\n            script:\n              - hexo generate # generate static files\n            deploy:\n              provider: pages\n              skip-cleanup: true\n              github-token: $GH_TOKEN\n              keep-history: true\n              on:\n                branch: master\n              local-dir: public\n    5. push master branch\n\n        到了这一步就基本完成了，将上述文件推送至github上，travis ci就会自动检测到此项目有变化，部署博客文件至gh-pages分支上。\n\n    6. 访问网站\n\n        如果项目名是github用户名的话，可以直接访问 https://<你的 GitHub 用户名>.github.io\n\n        如果不是的话，就访问 https://<你的 GitHub 用户名>.github.io/<项目名>\n\n-----\n\n坑：\n\n1. 如果项目名不是github用户名的话，github还是会访问https://<你的 GitHub 用户名>.github.io 下加载css文件，这个时候需要到 _config.yml 文件下修改url为https://<你的 GitHub 用户名>.github.io/<项目名>,以及修改root为/<项目名>/，才可以正常读取到css文件。\n\n    比如我的URL设置就是如下：\n\n        # URL\n        ## If your site is put in a subdirectory, set url as 'http://example.com/   child'     and root as '/child/'\n        url: https://jiahui-qin.github.io/dragonFlyInSky.GitHub.io/\n        root: /dragonFlyInSky.GitHub.io/\n        permalink: :year/:month/:day/:title/\n        permalink_defaults:\n        pretty_urls:\n          trailing_index: true # Set to false to remove trailing 'index.html'     from    permalinks\n          trailing_html: true # Set to false to remove trailing '.html' from    permalinks\n\n\n----\n\n参考：\n\n[hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n----\nps\n\n写完之后才发现这样的教程也太多了。\n","slug":"GKD-hexo-github-pages-next-踩坑过程","published":1,"updated":"2023-05-18T07:48:25.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzg1e00072h5p5jlb2kdr","content":"<p>其实在年前就试着想搞这么一套个人blog，然而年前只想着放假并没有开搞，于是在年后按照教程搞了一遍。</p>\n<hr>\n<p>先讲一下总体思路：</p>\n<p>github pages 可以展示静态页面</p>\n<p>hexo 作为一个blog系统可以生成静态页面</p>\n<p>next 其实就是一个主题，用来凑数的</p>\n<p>Travis CI 来做集成</p>\n<a id=\"more\"></a>\n<hr>\n<p>接下来是正文：</p>\n<ol>\n<li><p>本地环境搭建，生成本地blog</p>\n<p> 按照hexo需要两个软件：Node.js 和 git，这两个的安装不在赘述</p>\n<p> 安装hexo：</p>\n<pre><code> npm install -g hexo-cli \n</code></pre>\n<p> hexo安装完成之后，使用以下命令可以新建一个hexo博客：</p>\n<pre><code> hexo init &lt;floder&gt;\n</code></pre>\n<p> floder为文件夹的名称，也就是新建的博客名，进入到这个文件夹中 <em>_config.yml</em> 是配置文件</p>\n<p> 到了这里本地的blog也就建好了，下一步我们将其迁移至github上</p>\n</li>\n<li><p>迁移至github</p>\n<p> 这里直接讲将站点文件公开的部署方法：</p>\n<ol>\n<li><p>在github上新建一个repository，这个repository的命名按照&lt;项目名&gt;.github.io的形式来命名（大部分人的这里的项目名都是直接用的github的用户名，可以直接用&lt;用户名&gt;.github.io的形式来访问这个博客。）</p>\n</li>\n<li><p>将github上的repository clone至本地（一般建好的情况下会有一个gh-pages的分支有一些example页面文件，先不要管他），在本地新建一个master分支，将本地blog文件夹里的所有文件copy到master分支下。</p>\n</li>\n<li><p>travis CI配置：</p>\n<p> 1). 将<a href=\"https://github.com/marketplace/travis-ci\">travis CI</a>配置到自己的github账户中</p>\n<p> 2). 打开github的<a href=\"https://github.com/settings/installations\">应用设置</a>,里边选择travis ci后边的config，将其权限配置为运行访问所有repository</p>\n<p> 3). 在github中新建一个<a href=\"https://github.com/settings/tokens\">token</a>,并勾选token的 repo 权限， 记录生成的token</p>\n<p> 4). 在<a href=\"https://travis-ci.com/\">travis CI</a>的页面，打开刚刚建立好的github项目的配置页面，在environment variables 下新建一个变量，变量名为 <em>GH_TOKEN</em>， 变量值为刚刚github上生成的token， 点击add保存</p>\n</li>\n<li><p>修改travis ci配置</p>\n<p> 在刚刚复制过去的文件夹里，新建一个./.travis.yml文件</p>\n<pre><code> sudo: false\n language: node_js\n node_js:\n   - 10 # use nodejs v10 LTS\n cache: npm\n branches:\n   only:\n     - master # build master branch only\n script:\n   - hexo generate # generate static files\n deploy:\n   provider: pages\n   skip-cleanup: true\n   github-token: $GH_TOKEN\n   keep-history: true\n   on:\n     branch: master\n   local-dir: public\n</code></pre>\n</li>\n<li><p>push master branch</p>\n<p> 到了这一步就基本完成了，将上述文件推送至github上，travis ci就会自动检测到此项目有变化，部署博客文件至gh-pages分支上。</p>\n</li>\n<li><p>访问网站</p>\n<p> 如果项目名是github用户名的话，可以直接访问 https://&lt;你的 GitHub 用户名&gt;.github.io</p>\n<p> 如果不是的话，就访问 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;项目名&gt;</p>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<p>坑：</p>\n<ol>\n<li><p>如果项目名不是github用户名的话，github还是会访问https://&lt;你的 GitHub 用户名&gt;.github.io 下加载css文件，这个时候需要到 _config.yml 文件下修改url为https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;项目名&gt;,以及修改root为/&lt;项目名&gt;/，才可以正常读取到css文件。</p>\n<p> 比如我的URL设置就是如下：</p>\n<pre><code> # URL\n ## If your site is put in a subdirectory, set url as &#39;http://example.com/   child&#39;     and root as &#39;/child/&#39;\n url: https://jiahui-qin.github.io/dragonFlyInSky.GitHub.io/\n root: /dragonFlyInSky.GitHub.io/\n permalink: :year/:month/:day/:title/\n permalink_defaults:\n pretty_urls:\n   trailing_index: true # Set to false to remove trailing &#39;index.html&#39;     from    permalinks\n   trailing_html: true # Set to false to remove trailing &#39;.html&#39; from    permalinks\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>参考：</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">hexo官方文档</a></p>\n<hr>\n<p>ps</p>\n<p>写完之后才发现这样的教程也太多了。</p>\n","site":{"data":{}},"excerpt":"<p>其实在年前就试着想搞这么一套个人blog，然而年前只想着放假并没有开搞，于是在年后按照教程搞了一遍。</p>\n<hr>\n<p>先讲一下总体思路：</p>\n<p>github pages 可以展示静态页面</p>\n<p>hexo 作为一个blog系统可以生成静态页面</p>\n<p>next 其实就是一个主题，用来凑数的</p>\n<p>Travis CI 来做集成</p>","more":"<hr>\n<p>接下来是正文：</p>\n<ol>\n<li><p>本地环境搭建，生成本地blog</p>\n<p> 按照hexo需要两个软件：Node.js 和 git，这两个的安装不在赘述</p>\n<p> 安装hexo：</p>\n<pre><code> npm install -g hexo-cli \n</code></pre>\n<p> hexo安装完成之后，使用以下命令可以新建一个hexo博客：</p>\n<pre><code> hexo init &lt;floder&gt;\n</code></pre>\n<p> floder为文件夹的名称，也就是新建的博客名，进入到这个文件夹中 <em>_config.yml</em> 是配置文件</p>\n<p> 到了这里本地的blog也就建好了，下一步我们将其迁移至github上</p>\n</li>\n<li><p>迁移至github</p>\n<p> 这里直接讲将站点文件公开的部署方法：</p>\n<ol>\n<li><p>在github上新建一个repository，这个repository的命名按照&lt;项目名&gt;.github.io的形式来命名（大部分人的这里的项目名都是直接用的github的用户名，可以直接用&lt;用户名&gt;.github.io的形式来访问这个博客。）</p>\n</li>\n<li><p>将github上的repository clone至本地（一般建好的情况下会有一个gh-pages的分支有一些example页面文件，先不要管他），在本地新建一个master分支，将本地blog文件夹里的所有文件copy到master分支下。</p>\n</li>\n<li><p>travis CI配置：</p>\n<p> 1). 将<a href=\"https://github.com/marketplace/travis-ci\">travis CI</a>配置到自己的github账户中</p>\n<p> 2). 打开github的<a href=\"https://github.com/settings/installations\">应用设置</a>,里边选择travis ci后边的config，将其权限配置为运行访问所有repository</p>\n<p> 3). 在github中新建一个<a href=\"https://github.com/settings/tokens\">token</a>,并勾选token的 repo 权限， 记录生成的token</p>\n<p> 4). 在<a href=\"https://travis-ci.com/\">travis CI</a>的页面，打开刚刚建立好的github项目的配置页面，在environment variables 下新建一个变量，变量名为 <em>GH_TOKEN</em>， 变量值为刚刚github上生成的token， 点击add保存</p>\n</li>\n<li><p>修改travis ci配置</p>\n<p> 在刚刚复制过去的文件夹里，新建一个./.travis.yml文件</p>\n<pre><code> sudo: false\n language: node_js\n node_js:\n   - 10 # use nodejs v10 LTS\n cache: npm\n branches:\n   only:\n     - master # build master branch only\n script:\n   - hexo generate # generate static files\n deploy:\n   provider: pages\n   skip-cleanup: true\n   github-token: $GH_TOKEN\n   keep-history: true\n   on:\n     branch: master\n   local-dir: public\n</code></pre>\n</li>\n<li><p>push master branch</p>\n<p> 到了这一步就基本完成了，将上述文件推送至github上，travis ci就会自动检测到此项目有变化，部署博客文件至gh-pages分支上。</p>\n</li>\n<li><p>访问网站</p>\n<p> 如果项目名是github用户名的话，可以直接访问 https://&lt;你的 GitHub 用户名&gt;.github.io</p>\n<p> 如果不是的话，就访问 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;项目名&gt;</p>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<p>坑：</p>\n<ol>\n<li><p>如果项目名不是github用户名的话，github还是会访问https://&lt;你的 GitHub 用户名&gt;.github.io 下加载css文件，这个时候需要到 _config.yml 文件下修改url为https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;项目名&gt;,以及修改root为/&lt;项目名&gt;/，才可以正常读取到css文件。</p>\n<p> 比如我的URL设置就是如下：</p>\n<pre><code> # URL\n ## If your site is put in a subdirectory, set url as &#39;http://example.com/   child&#39;     and root as &#39;/child/&#39;\n url: https://jiahui-qin.github.io/dragonFlyInSky.GitHub.io/\n root: /dragonFlyInSky.GitHub.io/\n permalink: :year/:month/:day/:title/\n permalink_defaults:\n pretty_urls:\n   trailing_index: true # Set to false to remove trailing &#39;index.html&#39;     from    permalinks\n   trailing_html: true # Set to false to remove trailing &#39;.html&#39; from    permalinks\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>参考：</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">hexo官方文档</a></p>\n<hr>\n<p>ps</p>\n<p>写完之后才发现这样的教程也太多了。</p>"},{"title":"如何写一个telegram input插件","date":"2021-02-19T23:02:34.000Z","_content":"\n# telegraf introduce\ntelegraf [github](https://github.com/influxdata/telegraf) 地址\n# why have this blog\n我要写一个特殊监控，现有的telegraf插件又没有办法实现，所以就要自己写一个input plugin\n\n先讲一下通常方法下，现有的input插件无法满足要求的情况下怎么做：\n\n有一个[input.exec](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/exec)插件，可以获取命令执行后的结果，取到这个结果然后结合一下telegraf允许输入的格式，就可以了。无奈我写bash的水平实在是太低了，刚开始的时候也没有发现这个东西，所以就没有管这个，直接上手撸了个插件\n\n<!--more-->\n\n# how write a input plugin\n先看一下[官方教程](https://github.com/influxdata/telegraf/blob/master/docs/INPUTS.md)吧\n\n如果看懂的话大概就不太需要接下来的东西了\n\n接下来是小白版的教程：\n\n一个input plugin需要从以下做起：\n\n1. 在 */telegraf/plugins/input/* 下增加插件文件夹\n2. 编写插件go文件\n3. 在 */telegraf/plugins/input/all/all.go*下增加编写好的路径\n4. 重新编译telegraf\n5. 运行\n\n接下来主要看以下 插件文件的编写，以下称为 example.go\n\n要先给定一个输入参数的结构体：\n\n```go\ntype Info struct {\n\tAddress  []string `toml:\"address\"`\n}\n```\n\n这个结构体会作为很多函数的输入用：\n\n描述：\n\n```go\nfunc (*Info) Description() string {\n\treturn \"return netconf result\"\n}\n```\n\n样例输入：\n\n```go\nvar sampleConfig = `\nAddress = [\"西街小学\"]\n`\n\nfunc (*Info) SampleConfig() string {\n\treturn sampleConfig\n}\n```\n\n初始化：\n\n```go\nfunc init() {\n\tinputs.Add(\"sample\", func() telegraf.Input {\n\t\treturn &Info{}\n\t})\n}\n```\n\nGather函数：用来处理信息、将信息给后续组件进行处理\n\n```go\nfunc (a *Info) Gather(acc telegraf.Accumulator) error {\n\t//内容自由发挥，填写好addGauge的四个参数就ok\n\tfieldsG := map[string]interface{}{\n\t\t\"address\": a.Address,\n\t} \n\ttags := map[string]string{}{}\n\tnow := time.Now()\n\tacc.AddGauge(\"test\", fieldsG, tags, now)\n\treturn nil\n}\n```\n将以上几个部分组合在一起就是一个最简单的input插件。最重要的就是gather函数，自己来组织fieldsG这个结构体，将要监控的信息填进去。\n\n\n\n","source":"_posts/2021-02-19-如何写一个telegram-input插件.md","raw":"---\ntitle: 如何写一个telegram input插件\ndate: 2021-02-19 23:02:34\ntags:\n- go\n- telegram\ncategories:\n- 指南\n---\n\n# telegraf introduce\ntelegraf [github](https://github.com/influxdata/telegraf) 地址\n# why have this blog\n我要写一个特殊监控，现有的telegraf插件又没有办法实现，所以就要自己写一个input plugin\n\n先讲一下通常方法下，现有的input插件无法满足要求的情况下怎么做：\n\n有一个[input.exec](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/exec)插件，可以获取命令执行后的结果，取到这个结果然后结合一下telegraf允许输入的格式，就可以了。无奈我写bash的水平实在是太低了，刚开始的时候也没有发现这个东西，所以就没有管这个，直接上手撸了个插件\n\n<!--more-->\n\n# how write a input plugin\n先看一下[官方教程](https://github.com/influxdata/telegraf/blob/master/docs/INPUTS.md)吧\n\n如果看懂的话大概就不太需要接下来的东西了\n\n接下来是小白版的教程：\n\n一个input plugin需要从以下做起：\n\n1. 在 */telegraf/plugins/input/* 下增加插件文件夹\n2. 编写插件go文件\n3. 在 */telegraf/plugins/input/all/all.go*下增加编写好的路径\n4. 重新编译telegraf\n5. 运行\n\n接下来主要看以下 插件文件的编写，以下称为 example.go\n\n要先给定一个输入参数的结构体：\n\n```go\ntype Info struct {\n\tAddress  []string `toml:\"address\"`\n}\n```\n\n这个结构体会作为很多函数的输入用：\n\n描述：\n\n```go\nfunc (*Info) Description() string {\n\treturn \"return netconf result\"\n}\n```\n\n样例输入：\n\n```go\nvar sampleConfig = `\nAddress = [\"西街小学\"]\n`\n\nfunc (*Info) SampleConfig() string {\n\treturn sampleConfig\n}\n```\n\n初始化：\n\n```go\nfunc init() {\n\tinputs.Add(\"sample\", func() telegraf.Input {\n\t\treturn &Info{}\n\t})\n}\n```\n\nGather函数：用来处理信息、将信息给后续组件进行处理\n\n```go\nfunc (a *Info) Gather(acc telegraf.Accumulator) error {\n\t//内容自由发挥，填写好addGauge的四个参数就ok\n\tfieldsG := map[string]interface{}{\n\t\t\"address\": a.Address,\n\t} \n\ttags := map[string]string{}{}\n\tnow := time.Now()\n\tacc.AddGauge(\"test\", fieldsG, tags, now)\n\treturn nil\n}\n```\n将以上几个部分组合在一起就是一个最简单的input插件。最重要的就是gather函数，自己来组织fieldsG这个结构体，将要监控的信息填进去。\n\n\n\n","slug":"如何写一个telegram-input插件","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzg2f00082h5pgbd4grz7","content":"<h1 id=\"telegraf-introduce\"><a href=\"#telegraf-introduce\" class=\"headerlink\" title=\"telegraf introduce\"></a>telegraf introduce</h1><p>telegraf <a href=\"https://github.com/influxdata/telegraf\">github</a> 地址</p>\n<h1 id=\"why-have-this-blog\"><a href=\"#why-have-this-blog\" class=\"headerlink\" title=\"why have this blog\"></a>why have this blog</h1><p>我要写一个特殊监控，现有的telegraf插件又没有办法实现，所以就要自己写一个input plugin</p>\n<p>先讲一下通常方法下，现有的input插件无法满足要求的情况下怎么做：</p>\n<p>有一个<a href=\"https://github.com/influxdata/telegraf/tree/master/plugins/inputs/exec\">input.exec</a>插件，可以获取命令执行后的结果，取到这个结果然后结合一下telegraf允许输入的格式，就可以了。无奈我写bash的水平实在是太低了，刚开始的时候也没有发现这个东西，所以就没有管这个，直接上手撸了个插件</p>\n<a id=\"more\"></a>\n\n<h1 id=\"how-write-a-input-plugin\"><a href=\"#how-write-a-input-plugin\" class=\"headerlink\" title=\"how write a input plugin\"></a>how write a input plugin</h1><p>先看一下<a href=\"https://github.com/influxdata/telegraf/blob/master/docs/INPUTS.md\">官方教程</a>吧</p>\n<p>如果看懂的话大概就不太需要接下来的东西了</p>\n<p>接下来是小白版的教程：</p>\n<p>一个input plugin需要从以下做起：</p>\n<ol>\n<li>在 <em>/telegraf/plugins/input/</em> 下增加插件文件夹</li>\n<li>编写插件go文件</li>\n<li>在 <em>/telegraf/plugins/input/all/all.go</em>下增加编写好的路径</li>\n<li>重新编译telegraf</li>\n<li>运行</li>\n</ol>\n<p>接下来主要看以下 插件文件的编写，以下称为 example.go</p>\n<p>要先给定一个输入参数的结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Info <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAddress  []<span class=\"keyword\">string</span> <span class=\"string\">`toml:&quot;address&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个结构体会作为很多函数的输入用：</p>\n<p>描述：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*Info)</span> <span class=\"title\">Description</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;return netconf result&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>样例输入：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sampleConfig = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">Address = [&quot;西街小学&quot;]</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*Info)</span> <span class=\"title\">SampleConfig</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sampleConfig</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tinputs.Add(<span class=\"string\">&quot;sample&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">telegraf</span>.<span class=\"title\">Input</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;Info&#123;&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Gather函数：用来处理信息、将信息给后续组件进行处理</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Info)</span> <span class=\"title\">Gather</span><span class=\"params\">(acc telegraf.Accumulator)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//内容自由发挥，填写好addGauge的四个参数就ok</span></span><br><span class=\"line\">\tfieldsG := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;address&quot;</span>: a.Address,</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\ttags := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\tnow := time.Now()</span><br><span class=\"line\">\tacc.AddGauge(<span class=\"string\">&quot;test&quot;</span>, fieldsG, tags, now)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将以上几个部分组合在一起就是一个最简单的input插件。最重要的就是gather函数，自己来组织fieldsG这个结构体，将要监控的信息填进去。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"telegraf-introduce\"><a href=\"#telegraf-introduce\" class=\"headerlink\" title=\"telegraf introduce\"></a>telegraf introduce</h1><p>telegraf <a href=\"https://github.com/influxdata/telegraf\">github</a> 地址</p>\n<h1 id=\"why-have-this-blog\"><a href=\"#why-have-this-blog\" class=\"headerlink\" title=\"why have this blog\"></a>why have this blog</h1><p>我要写一个特殊监控，现有的telegraf插件又没有办法实现，所以就要自己写一个input plugin</p>\n<p>先讲一下通常方法下，现有的input插件无法满足要求的情况下怎么做：</p>\n<p>有一个<a href=\"https://github.com/influxdata/telegraf/tree/master/plugins/inputs/exec\">input.exec</a>插件，可以获取命令执行后的结果，取到这个结果然后结合一下telegraf允许输入的格式，就可以了。无奈我写bash的水平实在是太低了，刚开始的时候也没有发现这个东西，所以就没有管这个，直接上手撸了个插件</p>","more":"<h1 id=\"how-write-a-input-plugin\"><a href=\"#how-write-a-input-plugin\" class=\"headerlink\" title=\"how write a input plugin\"></a>how write a input plugin</h1><p>先看一下<a href=\"https://github.com/influxdata/telegraf/blob/master/docs/INPUTS.md\">官方教程</a>吧</p>\n<p>如果看懂的话大概就不太需要接下来的东西了</p>\n<p>接下来是小白版的教程：</p>\n<p>一个input plugin需要从以下做起：</p>\n<ol>\n<li>在 <em>/telegraf/plugins/input/</em> 下增加插件文件夹</li>\n<li>编写插件go文件</li>\n<li>在 <em>/telegraf/plugins/input/all/all.go</em>下增加编写好的路径</li>\n<li>重新编译telegraf</li>\n<li>运行</li>\n</ol>\n<p>接下来主要看以下 插件文件的编写，以下称为 example.go</p>\n<p>要先给定一个输入参数的结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Info <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAddress  []<span class=\"keyword\">string</span> <span class=\"string\">`toml:&quot;address&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个结构体会作为很多函数的输入用：</p>\n<p>描述：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*Info)</span> <span class=\"title\">Description</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;return netconf result&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>样例输入：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sampleConfig = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">Address = [&quot;西街小学&quot;]</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*Info)</span> <span class=\"title\">SampleConfig</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sampleConfig</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tinputs.Add(<span class=\"string\">&quot;sample&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">telegraf</span>.<span class=\"title\">Input</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;Info&#123;&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Gather函数：用来处理信息、将信息给后续组件进行处理</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Info)</span> <span class=\"title\">Gather</span><span class=\"params\">(acc telegraf.Accumulator)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//内容自由发挥，填写好addGauge的四个参数就ok</span></span><br><span class=\"line\">\tfieldsG := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;address&quot;</span>: a.Address,</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\ttags := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\tnow := time.Now()</span><br><span class=\"line\">\tacc.AddGauge(<span class=\"string\">&quot;test&quot;</span>, fieldsG, tags, now)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将以上几个部分组合在一起就是一个最简单的input插件。最重要的就是gather函数，自己来组织fieldsG这个结构体，将要监控的信息填进去。</p>"},{"title":"go并发基础知识","date":"2021-02-20T11:21:49.000Z","_content":"\n既然标题是并发，先看看什么是并发：\n\n**多线程程序在单核心的CPU上运行是并发**， 多线程程序在多核心CPU上运行是并行\n\n并发是如何实现的呢？ 依靠的是CPU的时间分片来完成的。\n\n什么是进程、线程、协程呢？\n\n进程是程序的一次执行过程\n\n\n<!--more-->\n\n线程是进程的一个执行实体，是CPU调度和分派的基本单位。一个进程可以创建和撤销多个线程。\n\n协程： 独立的栈空间，共享堆空间，调度由用户自己控制。类似用户级线程。协程是轻量级的线程\n\n----\n\ngo并发设计的核心是 **goroutine**\n\n使用go关键词可以创建goroutine，将go声明放在一个函数前，运行这个函数，就会作为一个并发的独立线程。\n\n以下是三种用法：一个方法、匿名方法、直接写一个代码块\n\n````go\n//go 关键字放在方法调用前新建一个 goroutine 并执行方法体\ngo GetThingDone(param1, param2);\n\n//新建一个匿名方法并执行\ngo func(param1, param2) {\n}(val1, val2)\n\n//直接新建一个 goroutine 并在 goroutine 中执行代码块\ngo {\n    //do someting...\n}\n````\n\n进程间的通信可以使用channel，使用make离开创建channel\n\n````go\nci := make(chan int)\ncs := make(chan string)\ncf := make(chan interface{})\n````\n\n\n有一点没有搞明白：\n\njava可以先创建多个线程，再一起执行，在go里边怎么创建多个线程再一起执行呢？\n\n要通过channel拿结果的话就要一直等待这个线程执行完毕，那要如何实现呢？","source":"_posts/2021-02-20-go并发基础知识.md","raw":"---\ntitle: go并发基础知识\ndate: 2021-02-20 11:21:49\ntags:\n- go\n- 并发\ncategories:\n- go初学者教程\n---\n\n既然标题是并发，先看看什么是并发：\n\n**多线程程序在单核心的CPU上运行是并发**， 多线程程序在多核心CPU上运行是并行\n\n并发是如何实现的呢？ 依靠的是CPU的时间分片来完成的。\n\n什么是进程、线程、协程呢？\n\n进程是程序的一次执行过程\n\n\n<!--more-->\n\n线程是进程的一个执行实体，是CPU调度和分派的基本单位。一个进程可以创建和撤销多个线程。\n\n协程： 独立的栈空间，共享堆空间，调度由用户自己控制。类似用户级线程。协程是轻量级的线程\n\n----\n\ngo并发设计的核心是 **goroutine**\n\n使用go关键词可以创建goroutine，将go声明放在一个函数前，运行这个函数，就会作为一个并发的独立线程。\n\n以下是三种用法：一个方法、匿名方法、直接写一个代码块\n\n````go\n//go 关键字放在方法调用前新建一个 goroutine 并执行方法体\ngo GetThingDone(param1, param2);\n\n//新建一个匿名方法并执行\ngo func(param1, param2) {\n}(val1, val2)\n\n//直接新建一个 goroutine 并在 goroutine 中执行代码块\ngo {\n    //do someting...\n}\n````\n\n进程间的通信可以使用channel，使用make离开创建channel\n\n````go\nci := make(chan int)\ncs := make(chan string)\ncf := make(chan interface{})\n````\n\n\n有一点没有搞明白：\n\njava可以先创建多个线程，再一起执行，在go里边怎么创建多个线程再一起执行呢？\n\n要通过channel拿结果的话就要一直等待这个线程执行完毕，那要如何实现呢？","slug":"go并发基础知识","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzg3e00092h5ph9iq0qhx","content":"<p>既然标题是并发，先看看什么是并发：</p>\n<p><strong>多线程程序在单核心的CPU上运行是并发</strong>， 多线程程序在多核心CPU上运行是并行</p>\n<p>并发是如何实现的呢？ 依靠的是CPU的时间分片来完成的。</p>\n<p>什么是进程、线程、协程呢？</p>\n<p>进程是程序的一次执行过程</p>\n<a id=\"more\"></a>\n\n<p>线程是进程的一个执行实体，是CPU调度和分派的基本单位。一个进程可以创建和撤销多个线程。</p>\n<p>协程： 独立的栈空间，共享堆空间，调度由用户自己控制。类似用户级线程。协程是轻量级的线程</p>\n<hr>\n<p>go并发设计的核心是 <strong>goroutine</strong></p>\n<p>使用go关键词可以创建goroutine，将go声明放在一个函数前，运行这个函数，就会作为一个并发的独立线程。</p>\n<p>以下是三种用法：一个方法、匿名方法、直接写一个代码块</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go 关键字放在方法调用前新建一个 goroutine 并执行方法体</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> GetThingDone(param1, param2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新建一个匿名方法并执行</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(param1, param2)</span></span> &#123;</span><br><span class=\"line\">&#125;(val1, val2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接新建一个 goroutine 并在 goroutine 中执行代码块</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do someting...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进程间的通信可以使用channel，使用make离开创建channel</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ci := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">cs := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">cf := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>有一点没有搞明白：</p>\n<p>java可以先创建多个线程，再一起执行，在go里边怎么创建多个线程再一起执行呢？</p>\n<p>要通过channel拿结果的话就要一直等待这个线程执行完毕，那要如何实现呢？</p>\n","site":{"data":{}},"excerpt":"<p>既然标题是并发，先看看什么是并发：</p>\n<p><strong>多线程程序在单核心的CPU上运行是并发</strong>， 多线程程序在多核心CPU上运行是并行</p>\n<p>并发是如何实现的呢？ 依靠的是CPU的时间分片来完成的。</p>\n<p>什么是进程、线程、协程呢？</p>\n<p>进程是程序的一次执行过程</p>","more":"<p>线程是进程的一个执行实体，是CPU调度和分派的基本单位。一个进程可以创建和撤销多个线程。</p>\n<p>协程： 独立的栈空间，共享堆空间，调度由用户自己控制。类似用户级线程。协程是轻量级的线程</p>\n<hr>\n<p>go并发设计的核心是 <strong>goroutine</strong></p>\n<p>使用go关键词可以创建goroutine，将go声明放在一个函数前，运行这个函数，就会作为一个并发的独立线程。</p>\n<p>以下是三种用法：一个方法、匿名方法、直接写一个代码块</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go 关键字放在方法调用前新建一个 goroutine 并执行方法体</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> GetThingDone(param1, param2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新建一个匿名方法并执行</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(param1, param2)</span></span> &#123;</span><br><span class=\"line\">&#125;(val1, val2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接新建一个 goroutine 并在 goroutine 中执行代码块</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do someting...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进程间的通信可以使用channel，使用make离开创建channel</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ci := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">cs := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">cf := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>有一点没有搞明白：</p>\n<p>java可以先创建多个线程，再一起执行，在go里边怎么创建多个线程再一起执行呢？</p>\n<p>要通过channel拿结果的话就要一直等待这个线程执行完毕，那要如何实现呢？</p>"},{"title":"go并发示例","date":"2021-02-23T15:31:09.000Z","_content":"\n在这片文章主要记录几个并发编程的示例，在写一些理解\n\n[go语言中常见的并发模式](https://zhuanlan.zhihu.com/p/74655793)\n\n[go 生产者消费者模型](https://www.cnblogs.com/fengchuiyizh/p/12299630.html)\n\n我现阶段需要理解的核心还是通道的使用：\n\n通道是有方向的，用来在主进程与子进程之间传递消息，接下来主要还是要理解以下并发编程到底是怎么做的。\n\n\n<!--more-->\n\n\n\n````go\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\t// 开N个后台打印线程\n\tvar res []int\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tres = append(res, i)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\t// 等待N个后台线程完成\n\twg.Wait()\n\tfmt.Println(res)\n}\n\ninput：\n[10 10 10 10 10 10 10 10 10 10]\n````\n\n在这里最后的输出全都是10，在循环中把所有的线程都启动了起来再执行。\n\n\n-----\n\n生产者-消费者模式\n\n````go\nfunc Producer(ch chan int) {\n\t//生产者，把i传到ch里边\n\tfor i := 1; i <= 10; i++ {\n\t\tch <- i\n\t}\n\tclose(ch)\n}\n\nfunc Consumer(id int, ch chan int, done chan bool) {\n\t//消费者，接受ch，并进行消费，done是完成的标志\n\tfor {\n\t\tvalue, ok := <-ch\n\t\tif ok {\n\t\t\tfmt.Printf(\"id: %d, recv: %d\\n\", id, value)\n\t\t} else {\n\t\t\tfmt.Printf(\"id: %d, closed\\n\", id)\n\t\t\tbreak\n\t\t}\n\t}\n\tdone <- true\n}\n\nfunc main() {\n\tch := make(chan int, 3)\n\n\tcoNum := 2\n\tdone := make(chan bool, coNum)\n\tfor i := 1; i <= coNum; i++ {\n\t\tgo Consumer(i, ch, done)\n\t}\n\n\tgo Producer(ch)\n\n\t//这里要拿到done的结果，在这里要求完成？\n\tfor i := 1; i <= coNum; i++ {\n\t\tfmt.Println(<-done)\n\t}\n}\n`````\n\n\n-----\n并发版本的go素数筛\n\n````go\nfunc GenerateNatural() chan int {\n\tch := make(chan int)\n\tgo func() {\n\t\tfor i := 2; ; i++ {\n\t\t\tfmt.Println(i)\n\t\t\tch <- i\n\t\t}\n\t}()\n\treturn ch\n}\n\nfunc PrimeFilter(in <-chan int, prime int) chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tfor {\n\t\t\tif i := <-in; i%prime != 0 {\n\t\t\t\tout <- i\n\t\t\t}\n\t\t}\n\t}()\n\treturn out\n}\n\nfunc main() {\n\tch := GenerateNatural() // 自然数序列: 2, 3, 4, ...\n\tfor i := 0; i < 100; i++ {\n\t\tprime := <-ch // 新出现的素数\n\t\tfmt.Printf(\"%v: %v\\n\", i+1, prime)\n\t\tch = PrimeFilter(ch, prime) // 基于新素数构造的过滤器\n\t}\n}\n\n````","source":"_posts/2021-02-23-go并发示例.md","raw":"---\ntitle: go并发示例\ndate: 2021-02-23 15:31:09\ntags:\n- go\n- 并发\ncategories:\n- go初学者教程\n---\n\n在这片文章主要记录几个并发编程的示例，在写一些理解\n\n[go语言中常见的并发模式](https://zhuanlan.zhihu.com/p/74655793)\n\n[go 生产者消费者模型](https://www.cnblogs.com/fengchuiyizh/p/12299630.html)\n\n我现阶段需要理解的核心还是通道的使用：\n\n通道是有方向的，用来在主进程与子进程之间传递消息，接下来主要还是要理解以下并发编程到底是怎么做的。\n\n\n<!--more-->\n\n\n\n````go\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\t// 开N个后台打印线程\n\tvar res []int\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tres = append(res, i)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\t// 等待N个后台线程完成\n\twg.Wait()\n\tfmt.Println(res)\n}\n\ninput：\n[10 10 10 10 10 10 10 10 10 10]\n````\n\n在这里最后的输出全都是10，在循环中把所有的线程都启动了起来再执行。\n\n\n-----\n\n生产者-消费者模式\n\n````go\nfunc Producer(ch chan int) {\n\t//生产者，把i传到ch里边\n\tfor i := 1; i <= 10; i++ {\n\t\tch <- i\n\t}\n\tclose(ch)\n}\n\nfunc Consumer(id int, ch chan int, done chan bool) {\n\t//消费者，接受ch，并进行消费，done是完成的标志\n\tfor {\n\t\tvalue, ok := <-ch\n\t\tif ok {\n\t\t\tfmt.Printf(\"id: %d, recv: %d\\n\", id, value)\n\t\t} else {\n\t\t\tfmt.Printf(\"id: %d, closed\\n\", id)\n\t\t\tbreak\n\t\t}\n\t}\n\tdone <- true\n}\n\nfunc main() {\n\tch := make(chan int, 3)\n\n\tcoNum := 2\n\tdone := make(chan bool, coNum)\n\tfor i := 1; i <= coNum; i++ {\n\t\tgo Consumer(i, ch, done)\n\t}\n\n\tgo Producer(ch)\n\n\t//这里要拿到done的结果，在这里要求完成？\n\tfor i := 1; i <= coNum; i++ {\n\t\tfmt.Println(<-done)\n\t}\n}\n`````\n\n\n-----\n并发版本的go素数筛\n\n````go\nfunc GenerateNatural() chan int {\n\tch := make(chan int)\n\tgo func() {\n\t\tfor i := 2; ; i++ {\n\t\t\tfmt.Println(i)\n\t\t\tch <- i\n\t\t}\n\t}()\n\treturn ch\n}\n\nfunc PrimeFilter(in <-chan int, prime int) chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tfor {\n\t\t\tif i := <-in; i%prime != 0 {\n\t\t\t\tout <- i\n\t\t\t}\n\t\t}\n\t}()\n\treturn out\n}\n\nfunc main() {\n\tch := GenerateNatural() // 自然数序列: 2, 3, 4, ...\n\tfor i := 0; i < 100; i++ {\n\t\tprime := <-ch // 新出现的素数\n\t\tfmt.Printf(\"%v: %v\\n\", i+1, prime)\n\t\tch = PrimeFilter(ch, prime) // 基于新素数构造的过滤器\n\t}\n}\n\n````","slug":"go并发示例","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzg57000c2h5pbaandlm6","content":"<p>在这片文章主要记录几个并发编程的示例，在写一些理解</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/74655793\">go语言中常见的并发模式</a></p>\n<p><a href=\"https://www.cnblogs.com/fengchuiyizh/p/12299630.html\">go 生产者消费者模型</a></p>\n<p>我现阶段需要理解的核心还是通道的使用：</p>\n<p>通道是有方向的，用来在主进程与子进程之间传递消息，接下来主要还是要理解以下并发编程到底是怎么做的。</p>\n<a id=\"more\"></a>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\t<span class=\"comment\">// 开N个后台打印线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\tres = <span class=\"built_in\">append</span>(res, i)</span><br><span class=\"line\">\t\t\twg.Done()</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 等待N个后台线程完成</span></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input：</span><br><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n<p>在这里最后的输出全都是10，在循环中把所有的线程都启动了起来再执行。</p>\n<hr>\n<p>生产者-消费者模式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Producer</span><span class=\"params\">(ch <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//生产者，把i传到ch里边</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tch &lt;- i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Consumer</span><span class=\"params\">(id <span class=\"keyword\">int</span>, ch <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, done <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//消费者，接受ch，并进行消费，done是完成的标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tvalue, ok := &lt;-ch</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;id: %d, recv: %d\\n&quot;</span>, id, value)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;id: %d, closed\\n&quot;</span>, id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdone &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tcoNum := <span class=\"number\">2</span></span><br><span class=\"line\">\tdone := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>, coNum)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= coNum; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> Consumer(i, ch, done)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> Producer(ch)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//这里要拿到done的结果，在这里要求完成？</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= coNum; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(&lt;-done)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-----</span></span><br><span class=\"line\"><span class=\"string\">并发版本的go素数筛</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"string\">`go</span></span><br><span class=\"line\"><span class=\"string\">func GenerateNatural() chan int &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tch := make(chan int)</span></span><br><span class=\"line\"><span class=\"string\">\tgo func() &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tfor i := 2; ; i++ &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tfmt.Println(i)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tch &lt;- i</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;()</span></span><br><span class=\"line\"><span class=\"string\">\treturn ch</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">func PrimeFilter(in &lt;-chan int, prime int) chan int &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tout := make(chan int)</span></span><br><span class=\"line\"><span class=\"string\">\tgo func() &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tfor &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tif i := &lt;-in; i%prime != 0 &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tout &lt;- i</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;()</span></span><br><span class=\"line\"><span class=\"string\">\treturn out</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">func main() &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tch := GenerateNatural() // 自然数序列: 2, 3, 4, ...</span></span><br><span class=\"line\"><span class=\"string\">\tfor i := 0; i &lt; 100; i++ &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tprime := &lt;-ch // 新出现的素数</span></span><br><span class=\"line\"><span class=\"string\">\t\tfmt.Printf(&quot;%v: %v\\n&quot;, i+1, prime)</span></span><br><span class=\"line\"><span class=\"string\">\t\tch = PrimeFilter(ch, prime) // 基于新素数构造的过滤器</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在这片文章主要记录几个并发编程的示例，在写一些理解</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/74655793\">go语言中常见的并发模式</a></p>\n<p><a href=\"https://www.cnblogs.com/fengchuiyizh/p/12299630.html\">go 生产者消费者模型</a></p>\n<p>我现阶段需要理解的核心还是通道的使用：</p>\n<p>通道是有方向的，用来在主进程与子进程之间传递消息，接下来主要还是要理解以下并发编程到底是怎么做的。</p>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\t<span class=\"comment\">// 开N个后台打印线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\tres = <span class=\"built_in\">append</span>(res, i)</span><br><span class=\"line\">\t\t\twg.Done()</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 等待N个后台线程完成</span></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input：</span><br><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span> <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n<p>在这里最后的输出全都是10，在循环中把所有的线程都启动了起来再执行。</p>\n<hr>\n<p>生产者-消费者模式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Producer</span><span class=\"params\">(ch <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//生产者，把i传到ch里边</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tch &lt;- i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Consumer</span><span class=\"params\">(id <span class=\"keyword\">int</span>, ch <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, done <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//消费者，接受ch，并进行消费，done是完成的标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tvalue, ok := &lt;-ch</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;id: %d, recv: %d\\n&quot;</span>, id, value)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;id: %d, closed\\n&quot;</span>, id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdone &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tcoNum := <span class=\"number\">2</span></span><br><span class=\"line\">\tdone := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>, coNum)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= coNum; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> Consumer(i, ch, done)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> Producer(ch)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//这里要拿到done的结果，在这里要求完成？</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= coNum; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(&lt;-done)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-----</span></span><br><span class=\"line\"><span class=\"string\">并发版本的go素数筛</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"string\">`go</span></span><br><span class=\"line\"><span class=\"string\">func GenerateNatural() chan int &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tch := make(chan int)</span></span><br><span class=\"line\"><span class=\"string\">\tgo func() &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tfor i := 2; ; i++ &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tfmt.Println(i)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tch &lt;- i</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;()</span></span><br><span class=\"line\"><span class=\"string\">\treturn ch</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">func PrimeFilter(in &lt;-chan int, prime int) chan int &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tout := make(chan int)</span></span><br><span class=\"line\"><span class=\"string\">\tgo func() &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tfor &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tif i := &lt;-in; i%prime != 0 &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tout &lt;- i</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;()</span></span><br><span class=\"line\"><span class=\"string\">\treturn out</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">func main() &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tch := GenerateNatural() // 自然数序列: 2, 3, 4, ...</span></span><br><span class=\"line\"><span class=\"string\">\tfor i := 0; i &lt; 100; i++ &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tprime := &lt;-ch // 新出现的素数</span></span><br><span class=\"line\"><span class=\"string\">\t\tfmt.Printf(&quot;%v: %v\\n&quot;, i+1, prime)</span></span><br><span class=\"line\"><span class=\"string\">\t\tch = PrimeFilter(ch, prime) // 基于新素数构造的过滤器</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>"},{"title":"java并发示例","date":"2021-02-23T18:55:02.000Z","_content":"\n有一个需求是这样的：有一个ArrayList里边有n个string，有一个函数对可以处理每一个string，现在想要并发的完成这个任务，并将结果保存起来。\n\n一个参考的网址：\n\n[多线程处理任务bing获取任务结果](https://blog.csdn.net/mottohlm/article/details/89067154?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&dist_request_id=fd446bed-4237-4e4a-a547-a4045c39bf2b&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control)\n\n实现的方法就是**callable+Future**\n\n原博的example里边对循环和并行的效率做了对比\n\n<!--more-->\n\ncallable线程类\n\n````java\npackage com.learn.thread;\n \nimport java.util.Map;\nimport java.util.Random;\nimport java.util.concurrent.Callable;\n \npublic  class SendGift implements Callable<String[]> {\n \n    private String gift ;\n    private Map<String,String> resultMap ;\n \n    public SendGift(String gift ,Map<String,String> resultMap ){\n        this.gift = gift ;\n        this.resultMap = resultMap ;\n    }\n \n    @Override\n    public String[] call() throws Exception {\n        Random r = new Random();\n        int code = r.nextInt(100);\n        code = code%5;\n        String result = resultMap.get(code+\"\") ;\n        //System.out.println(\"the code is \"+code+\" , the result is \"+result);\n        //,为了让测试结果明显一点，一个循环设置花2秒\n        Thread.sleep(2000);\n        String[] resultArray  = {this.gift ,result};\n        return resultArray ;\n    }\n}\n````\n\nmain方法，并发调动callable类\n\n````java\npackage com.learn.thread;\n \nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport java.util.concurrent.*;\n \npublic class TestMain {\n    private static final int poolSize = 15 ;\n \n    public static void main(String[] args ){\n        //domain\n        try {\n            doTask(\"forEach\");\n            doTask(\"forThread\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n \n    public static void doTask(String type) throws  InterruptedException{\n        System.out.println(\"--------------start doTask for type:\"+type+\"--------------\");\n \n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        Long startMillis = System.currentTimeMillis() ;\n        String startDate = sdf.format(new Date(startMillis));\n        System.out.println(\"do \"+type+\" start time is :\"+startDate);\n        String[] gifts = {\"apple\",\"orange\",\"cat\",\"dog\",\"tomato\",\"monkey\",\"birds\",\"fish\",\"milk\",\"pen\"};\n        Map<String,String> resultMap = new HashMap<String,String>();\n        initData(resultMap);\n        Random r = new Random();\n        Map<String , String> family = new HashMap<>();\n        switch(type){\n            case \"forEach\":\n                doForEach(resultMap ,family,gifts);\n                break;\n            case \"forThread\":\n                doByThread(resultMap ,family,gifts);\n                break;\n            default:\n                break ;\n        }\n        Long endMillis = System.currentTimeMillis() ;\n        String endDate = sdf.format(new Date(endMillis));\n        System.out.println(\"do \"+type+\" end time is :\"+endDate);\n        System.out.println(\"do \"+type+\" cost time is :\"+ (endMillis -startMillis)/1000);\n        System.out.println(handleResult(family));\n    }\n \n    /**\n     * 以循环的方式去执行任务\n     * @throws InterruptedException\n     */\n    public static void doForEach(Map<String,String> resultMap ,Map<String , String> family,String[] gifts) throws  InterruptedException{\n \n        Random r = new Random();\n        //将10个礼物依次发出去，并收集感受\n        for(String gift : gifts){\n \n            int code = r.nextInt(100);\n            code = code%5;\n            String result = resultMap.get(code+\"\") ;\n            //System.out.println(\"the code is \"+code+\" , the result is \"+result);\n            family.put(gift,result) ;\n            //一个循环设置花2秒\n            Thread.sleep(2000);\n \n        }\n    }\n \n \n    /**\n     * 以线程的方式去执行任务\n     * @throws InterruptedException\n     */\n    public static void doByThread(Map<String,String> resultMap ,Map<String , String> family,String[] gifts)  throws  InterruptedException {\n \n        Random r = new Random();\n        ExecutorService es = Executors.newFixedThreadPool(poolSize);\n        System.out.println(\"the poolSize is \"+ poolSize);\n        List<Future<String[]>> futureList = new ArrayList<>( );\n \n        //将10个礼物依次发出去，并收集感受\n        for(String gift : gifts){\n \n            Future<String[]> future =  es.submit(new SendGift(gift ,resultMap));\n            futureList.add(future) ;\n \n        }\n        es.shutdown();\n        while(true){\n            if(es.isTerminated()){\n                System.out.println(\"所有线程都执行结束了.\");\n                break ;\n \n            }\n            Thread.sleep(100);\n        }\n \n        for(Future<String[]> f :futureList){\n            try {\n                String[] result = f.get();\n                family.put(result[0],result[1]);\n            } catch (ExecutionException e) {\n                e.printStackTrace();\n            }\n \n        }\n    }\n \n \n    /**\n     * 设置收获感受\n     * @param resultMap\n     */\n    private static void initData(Map<String,String> resultMap){\n        if(resultMap == null){\n            resultMap = new HashMap<String,String>() ;\n        }\n        resultMap.put(\"0\",\"sed\");\n        resultMap.put(\"1\",\"happy\");\n        resultMap.put(\"2\",\"so so\");\n        resultMap.put(\"3\",\"wanting others\");\n        resultMap.put(\"4\",\"too nice\");\n    }\n \n    /**\n     * 处理打印结果\n     * @param resultMap\n     * @return\n     */\n    private  static String handleResult(Map<String ,String> resultMap){\n \n        Iterator it = resultMap.entrySet().iterator();\n        StringBuffer sb = new StringBuffer();\n        while(it.hasNext()){\n            Map.Entry<String,String> entry =  (Map.Entry<String,String>) it.next();\n            String key = entry.getKey();\n            String val = entry.getValue();\n            sb.append(\"the family who get the \"+key +\" is think \"+val +\" ;\\n\");\n        }\n \n        return sb.toString().substring(0,sb.length()-1) ;\n    }\n \n}\n````","source":"_posts/2021-02-23-java并发示例.md","raw":"---\ntitle: java并发示例\ndate: 2021-02-23 18:55:02\ntags:\n- java\n- 并发\ncategories:\n- java初学者教程\n---\n\n有一个需求是这样的：有一个ArrayList里边有n个string，有一个函数对可以处理每一个string，现在想要并发的完成这个任务，并将结果保存起来。\n\n一个参考的网址：\n\n[多线程处理任务bing获取任务结果](https://blog.csdn.net/mottohlm/article/details/89067154?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&dist_request_id=fd446bed-4237-4e4a-a547-a4045c39bf2b&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control)\n\n实现的方法就是**callable+Future**\n\n原博的example里边对循环和并行的效率做了对比\n\n<!--more-->\n\ncallable线程类\n\n````java\npackage com.learn.thread;\n \nimport java.util.Map;\nimport java.util.Random;\nimport java.util.concurrent.Callable;\n \npublic  class SendGift implements Callable<String[]> {\n \n    private String gift ;\n    private Map<String,String> resultMap ;\n \n    public SendGift(String gift ,Map<String,String> resultMap ){\n        this.gift = gift ;\n        this.resultMap = resultMap ;\n    }\n \n    @Override\n    public String[] call() throws Exception {\n        Random r = new Random();\n        int code = r.nextInt(100);\n        code = code%5;\n        String result = resultMap.get(code+\"\") ;\n        //System.out.println(\"the code is \"+code+\" , the result is \"+result);\n        //,为了让测试结果明显一点，一个循环设置花2秒\n        Thread.sleep(2000);\n        String[] resultArray  = {this.gift ,result};\n        return resultArray ;\n    }\n}\n````\n\nmain方法，并发调动callable类\n\n````java\npackage com.learn.thread;\n \nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport java.util.concurrent.*;\n \npublic class TestMain {\n    private static final int poolSize = 15 ;\n \n    public static void main(String[] args ){\n        //domain\n        try {\n            doTask(\"forEach\");\n            doTask(\"forThread\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n \n    public static void doTask(String type) throws  InterruptedException{\n        System.out.println(\"--------------start doTask for type:\"+type+\"--------------\");\n \n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        Long startMillis = System.currentTimeMillis() ;\n        String startDate = sdf.format(new Date(startMillis));\n        System.out.println(\"do \"+type+\" start time is :\"+startDate);\n        String[] gifts = {\"apple\",\"orange\",\"cat\",\"dog\",\"tomato\",\"monkey\",\"birds\",\"fish\",\"milk\",\"pen\"};\n        Map<String,String> resultMap = new HashMap<String,String>();\n        initData(resultMap);\n        Random r = new Random();\n        Map<String , String> family = new HashMap<>();\n        switch(type){\n            case \"forEach\":\n                doForEach(resultMap ,family,gifts);\n                break;\n            case \"forThread\":\n                doByThread(resultMap ,family,gifts);\n                break;\n            default:\n                break ;\n        }\n        Long endMillis = System.currentTimeMillis() ;\n        String endDate = sdf.format(new Date(endMillis));\n        System.out.println(\"do \"+type+\" end time is :\"+endDate);\n        System.out.println(\"do \"+type+\" cost time is :\"+ (endMillis -startMillis)/1000);\n        System.out.println(handleResult(family));\n    }\n \n    /**\n     * 以循环的方式去执行任务\n     * @throws InterruptedException\n     */\n    public static void doForEach(Map<String,String> resultMap ,Map<String , String> family,String[] gifts) throws  InterruptedException{\n \n        Random r = new Random();\n        //将10个礼物依次发出去，并收集感受\n        for(String gift : gifts){\n \n            int code = r.nextInt(100);\n            code = code%5;\n            String result = resultMap.get(code+\"\") ;\n            //System.out.println(\"the code is \"+code+\" , the result is \"+result);\n            family.put(gift,result) ;\n            //一个循环设置花2秒\n            Thread.sleep(2000);\n \n        }\n    }\n \n \n    /**\n     * 以线程的方式去执行任务\n     * @throws InterruptedException\n     */\n    public static void doByThread(Map<String,String> resultMap ,Map<String , String> family,String[] gifts)  throws  InterruptedException {\n \n        Random r = new Random();\n        ExecutorService es = Executors.newFixedThreadPool(poolSize);\n        System.out.println(\"the poolSize is \"+ poolSize);\n        List<Future<String[]>> futureList = new ArrayList<>( );\n \n        //将10个礼物依次发出去，并收集感受\n        for(String gift : gifts){\n \n            Future<String[]> future =  es.submit(new SendGift(gift ,resultMap));\n            futureList.add(future) ;\n \n        }\n        es.shutdown();\n        while(true){\n            if(es.isTerminated()){\n                System.out.println(\"所有线程都执行结束了.\");\n                break ;\n \n            }\n            Thread.sleep(100);\n        }\n \n        for(Future<String[]> f :futureList){\n            try {\n                String[] result = f.get();\n                family.put(result[0],result[1]);\n            } catch (ExecutionException e) {\n                e.printStackTrace();\n            }\n \n        }\n    }\n \n \n    /**\n     * 设置收获感受\n     * @param resultMap\n     */\n    private static void initData(Map<String,String> resultMap){\n        if(resultMap == null){\n            resultMap = new HashMap<String,String>() ;\n        }\n        resultMap.put(\"0\",\"sed\");\n        resultMap.put(\"1\",\"happy\");\n        resultMap.put(\"2\",\"so so\");\n        resultMap.put(\"3\",\"wanting others\");\n        resultMap.put(\"4\",\"too nice\");\n    }\n \n    /**\n     * 处理打印结果\n     * @param resultMap\n     * @return\n     */\n    private  static String handleResult(Map<String ,String> resultMap){\n \n        Iterator it = resultMap.entrySet().iterator();\n        StringBuffer sb = new StringBuffer();\n        while(it.hasNext()){\n            Map.Entry<String,String> entry =  (Map.Entry<String,String>) it.next();\n            String key = entry.getKey();\n            String val = entry.getValue();\n            sb.append(\"the family who get the \"+key +\" is think \"+val +\" ;\\n\");\n        }\n \n        return sb.toString().substring(0,sb.length()-1) ;\n    }\n \n}\n````","slug":"java并发示例","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzg7w000d2h5pefga0v4c","content":"<p>有一个需求是这样的：有一个ArrayList里边有n个string，有一个函数对可以处理每一个string，现在想要并发的完成这个任务，并将结果保存起来。</p>\n<p>一个参考的网址：</p>\n<p><a href=\"https://blog.csdn.net/mottohlm/article/details/89067154?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&dist_request_id=fd446bed-4237-4e4a-a547-a4045c39bf2b&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control\">多线程处理任务bing获取任务结果</a></p>\n<p>实现的方法就是<strong>callable+Future</strong></p>\n<p>原博的example里边对循环和并行的效率做了对比</p>\n<a id=\"more\"></a>\n\n<p>callable线程类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.learn.thread;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"> </span><br><span class=\"line\">public  class SendGift implements Callable&lt;String[]&gt; &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gift ;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,String&gt; resultMap ;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SendGift</span><span class=\"params\">(String gift ,Map&lt;String,String&gt; resultMap )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gift = gift ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resultMap = resultMap ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] call() <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> code = r.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">        code = code%<span class=\"number\">5</span>;</span><br><span class=\"line\">        String result = resultMap.get(code+<span class=\"string\">&quot;&quot;</span>) ;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;the code is &quot;+code+&quot; , the result is &quot;+result);</span></span><br><span class=\"line\">        <span class=\"comment\">//,为了让测试结果明显一点，一个循环设置花2秒</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        String[] resultArray  = &#123;<span class=\"keyword\">this</span>.gift ,result&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultArray ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main方法，并发调动callable类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.learn.thread;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> poolSize = <span class=\"number\">15</span> ;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//domain</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            doTask(<span class=\"string\">&quot;forEach&quot;</span>);</span><br><span class=\"line\">            doTask(<span class=\"string\">&quot;forThread&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doTask</span><span class=\"params\">(String type)</span> <span class=\"keyword\">throws</span>  InterruptedException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--------------start doTask for type:&quot;</span>+type+<span class=\"string\">&quot;--------------&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        Long startMillis = System.currentTimeMillis() ;</span><br><span class=\"line\">        String startDate = sdf.format(<span class=\"keyword\">new</span> Date(startMillis));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;do &quot;</span>+type+<span class=\"string\">&quot; start time is :&quot;</span>+startDate);</span><br><span class=\"line\">        String[] gifts = &#123;<span class=\"string\">&quot;apple&quot;</span>,<span class=\"string\">&quot;orange&quot;</span>,<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;dog&quot;</span>,<span class=\"string\">&quot;tomato&quot;</span>,<span class=\"string\">&quot;monkey&quot;</span>,<span class=\"string\">&quot;birds&quot;</span>,<span class=\"string\">&quot;fish&quot;</span>,<span class=\"string\">&quot;milk&quot;</span>,<span class=\"string\">&quot;pen&quot;</span>&#125;;</span><br><span class=\"line\">        Map&lt;String,String&gt; resultMap = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">        initData(resultMap);</span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        Map&lt;String , String&gt; family = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;forEach&quot;</span>:</span><br><span class=\"line\">                doForEach(resultMap ,family,gifts);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;forThread&quot;</span>:</span><br><span class=\"line\">                doByThread(resultMap ,family,gifts);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Long endMillis = System.currentTimeMillis() ;</span><br><span class=\"line\">        String endDate = sdf.format(<span class=\"keyword\">new</span> Date(endMillis));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;do &quot;</span>+type+<span class=\"string\">&quot; end time is :&quot;</span>+endDate);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;do &quot;</span>+type+<span class=\"string\">&quot; cost time is :&quot;</span>+ (endMillis -startMillis)/<span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(handleResult(family));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以循环的方式去执行任务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doForEach</span><span class=\"params\">(Map&lt;String,String&gt; resultMap ,Map&lt;String , String&gt; family,String[] gifts)</span> <span class=\"keyword\">throws</span>  InterruptedException</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"comment\">//将10个礼物依次发出去，并收集感受</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String gift : gifts)&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">int</span> code = r.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">            code = code%<span class=\"number\">5</span>;</span><br><span class=\"line\">            String result = resultMap.get(code+<span class=\"string\">&quot;&quot;</span>) ;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;the code is &quot;+code+&quot; , the result is &quot;+result);</span></span><br><span class=\"line\">            family.put(gift,result) ;</span><br><span class=\"line\">            <span class=\"comment\">//一个循环设置花2秒</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以线程的方式去执行任务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doByThread</span><span class=\"params\">(Map&lt;String,String&gt; resultMap ,Map&lt;String , String&gt; family,String[] gifts)</span>  <span class=\"keyword\">throws</span>  InterruptedException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        ExecutorService es = Executors.newFixedThreadPool(poolSize);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the poolSize is &quot;</span>+ poolSize);</span><br><span class=\"line\">        List&lt;Future&lt;String[]&gt;&gt; futureList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;( );</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//将10个礼物依次发出去，并收集感受</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String gift : gifts)&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            Future&lt;String[]&gt; future =  es.submit(<span class=\"keyword\">new</span> SendGift(gift ,resultMap));</span><br><span class=\"line\">            futureList.add(future) ;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        es.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(es.isTerminated())&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;所有线程都执行结束了.&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Future&lt;String[]&gt; f :futureList)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String[] result = f.get();</span><br><span class=\"line\">                family.put(result[<span class=\"number\">0</span>],result[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置收获感受</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resultMap</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initData</span><span class=\"params\">(Map&lt;String,String&gt; resultMap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resultMap == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            resultMap = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;() ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;0&quot;</span>,<span class=\"string\">&quot;sed&quot;</span>);</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;happy&quot;</span>);</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;so so&quot;</span>);</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;3&quot;</span>,<span class=\"string\">&quot;wanting others&quot;</span>);</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;too nice&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理打印结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resultMap</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">static</span> String <span class=\"title\">handleResult</span><span class=\"params\">(Map&lt;String ,String&gt; resultMap)</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Iterator it = resultMap.entrySet().iterator();</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            Map.Entry&lt;String,String&gt; entry =  (Map.Entry&lt;String,String&gt;) it.next();</span><br><span class=\"line\">            String key = entry.getKey();</span><br><span class=\"line\">            String val = entry.getValue();</span><br><span class=\"line\">            sb.append(<span class=\"string\">&quot;the family who get the &quot;</span>+key +<span class=\"string\">&quot; is think &quot;</span>+val +<span class=\"string\">&quot; ;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString().substring(<span class=\"number\">0</span>,sb.length()-<span class=\"number\">1</span>) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>有一个需求是这样的：有一个ArrayList里边有n个string，有一个函数对可以处理每一个string，现在想要并发的完成这个任务，并将结果保存起来。</p>\n<p>一个参考的网址：</p>\n<p><a href=\"https://blog.csdn.net/mottohlm/article/details/89067154?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&dist_request_id=fd446bed-4237-4e4a-a547-a4045c39bf2b&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control\">多线程处理任务bing获取任务结果</a></p>\n<p>实现的方法就是<strong>callable+Future</strong></p>\n<p>原博的example里边对循环和并行的效率做了对比</p>","more":"<p>callable线程类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.learn.thread;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"> </span><br><span class=\"line\">public  class SendGift implements Callable&lt;String[]&gt; &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gift ;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,String&gt; resultMap ;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SendGift</span><span class=\"params\">(String gift ,Map&lt;String,String&gt; resultMap )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gift = gift ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resultMap = resultMap ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] call() <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> code = r.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">        code = code%<span class=\"number\">5</span>;</span><br><span class=\"line\">        String result = resultMap.get(code+<span class=\"string\">&quot;&quot;</span>) ;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;the code is &quot;+code+&quot; , the result is &quot;+result);</span></span><br><span class=\"line\">        <span class=\"comment\">//,为了让测试结果明显一点，一个循环设置花2秒</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        String[] resultArray  = &#123;<span class=\"keyword\">this</span>.gift ,result&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultArray ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main方法，并发调动callable类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.learn.thread;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> poolSize = <span class=\"number\">15</span> ;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//domain</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            doTask(<span class=\"string\">&quot;forEach&quot;</span>);</span><br><span class=\"line\">            doTask(<span class=\"string\">&quot;forThread&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doTask</span><span class=\"params\">(String type)</span> <span class=\"keyword\">throws</span>  InterruptedException</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--------------start doTask for type:&quot;</span>+type+<span class=\"string\">&quot;--------------&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        Long startMillis = System.currentTimeMillis() ;</span><br><span class=\"line\">        String startDate = sdf.format(<span class=\"keyword\">new</span> Date(startMillis));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;do &quot;</span>+type+<span class=\"string\">&quot; start time is :&quot;</span>+startDate);</span><br><span class=\"line\">        String[] gifts = &#123;<span class=\"string\">&quot;apple&quot;</span>,<span class=\"string\">&quot;orange&quot;</span>,<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;dog&quot;</span>,<span class=\"string\">&quot;tomato&quot;</span>,<span class=\"string\">&quot;monkey&quot;</span>,<span class=\"string\">&quot;birds&quot;</span>,<span class=\"string\">&quot;fish&quot;</span>,<span class=\"string\">&quot;milk&quot;</span>,<span class=\"string\">&quot;pen&quot;</span>&#125;;</span><br><span class=\"line\">        Map&lt;String,String&gt; resultMap = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">        initData(resultMap);</span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        Map&lt;String , String&gt; family = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;forEach&quot;</span>:</span><br><span class=\"line\">                doForEach(resultMap ,family,gifts);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;forThread&quot;</span>:</span><br><span class=\"line\">                doByThread(resultMap ,family,gifts);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Long endMillis = System.currentTimeMillis() ;</span><br><span class=\"line\">        String endDate = sdf.format(<span class=\"keyword\">new</span> Date(endMillis));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;do &quot;</span>+type+<span class=\"string\">&quot; end time is :&quot;</span>+endDate);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;do &quot;</span>+type+<span class=\"string\">&quot; cost time is :&quot;</span>+ (endMillis -startMillis)/<span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(handleResult(family));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以循环的方式去执行任务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doForEach</span><span class=\"params\">(Map&lt;String,String&gt; resultMap ,Map&lt;String , String&gt; family,String[] gifts)</span> <span class=\"keyword\">throws</span>  InterruptedException</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"comment\">//将10个礼物依次发出去，并收集感受</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String gift : gifts)&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">int</span> code = r.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">            code = code%<span class=\"number\">5</span>;</span><br><span class=\"line\">            String result = resultMap.get(code+<span class=\"string\">&quot;&quot;</span>) ;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;the code is &quot;+code+&quot; , the result is &quot;+result);</span></span><br><span class=\"line\">            family.put(gift,result) ;</span><br><span class=\"line\">            <span class=\"comment\">//一个循环设置花2秒</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以线程的方式去执行任务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doByThread</span><span class=\"params\">(Map&lt;String,String&gt; resultMap ,Map&lt;String , String&gt; family,String[] gifts)</span>  <span class=\"keyword\">throws</span>  InterruptedException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        ExecutorService es = Executors.newFixedThreadPool(poolSize);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the poolSize is &quot;</span>+ poolSize);</span><br><span class=\"line\">        List&lt;Future&lt;String[]&gt;&gt; futureList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;( );</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//将10个礼物依次发出去，并收集感受</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String gift : gifts)&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            Future&lt;String[]&gt; future =  es.submit(<span class=\"keyword\">new</span> SendGift(gift ,resultMap));</span><br><span class=\"line\">            futureList.add(future) ;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        es.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(es.isTerminated())&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;所有线程都执行结束了.&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Future&lt;String[]&gt; f :futureList)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String[] result = f.get();</span><br><span class=\"line\">                family.put(result[<span class=\"number\">0</span>],result[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置收获感受</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resultMap</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initData</span><span class=\"params\">(Map&lt;String,String&gt; resultMap)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resultMap == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            resultMap = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;() ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;0&quot;</span>,<span class=\"string\">&quot;sed&quot;</span>);</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;happy&quot;</span>);</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;so so&quot;</span>);</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;3&quot;</span>,<span class=\"string\">&quot;wanting others&quot;</span>);</span><br><span class=\"line\">        resultMap.put(<span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;too nice&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理打印结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resultMap</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">static</span> String <span class=\"title\">handleResult</span><span class=\"params\">(Map&lt;String ,String&gt; resultMap)</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Iterator it = resultMap.entrySet().iterator();</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            Map.Entry&lt;String,String&gt; entry =  (Map.Entry&lt;String,String&gt;) it.next();</span><br><span class=\"line\">            String key = entry.getKey();</span><br><span class=\"line\">            String val = entry.getValue();</span><br><span class=\"line\">            sb.append(<span class=\"string\">&quot;the family who get the &quot;</span>+key +<span class=\"string\">&quot; is think &quot;</span>+val +<span class=\"string\">&quot; ;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString().substring(<span class=\"number\">0</span>,sb.length()-<span class=\"number\">1</span>) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Segment Routing是什么？？","date":"2021-02-25T18:57:16.000Z","_content":"\n做的项目里边总会提到 Segment Routing/SR 但是自己却对这个一窍不通，这里大概了解一下这个技术是干嘛的吧！\n\n思科的SR介绍[网页](https://www.cisco.com/c/zh_cn/solutions/service-provider/segment_routing.html)\n\n<!--more-->","source":"_posts/2021-02-25-Segment-Routing是什么？？.md","raw":"---\ntitle: Segment Routing是什么？？\ndate: 2021-02-25 18:57:16\ntags:\n- Segment Routing\ncategories:\n- 网络\n---\n\n做的项目里边总会提到 Segment Routing/SR 但是自己却对这个一窍不通，这里大概了解一下这个技术是干嘛的吧！\n\n思科的SR介绍[网页](https://www.cisco.com/c/zh_cn/solutions/service-provider/segment_routing.html)\n\n<!--more-->","slug":"Segment-Routing是什么？？","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgby000h2h5p7icabslr","content":"<p>做的项目里边总会提到 Segment Routing/SR 但是自己却对这个一窍不通，这里大概了解一下这个技术是干嘛的吧！</p>\n<p>思科的SR介绍<a href=\"https://www.cisco.com/c/zh_cn/solutions/service-provider/segment_routing.html\">网页</a></p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<p>做的项目里边总会提到 Segment Routing/SR 但是自己却对这个一窍不通，这里大概了解一下这个技术是干嘛的吧！</p>\n<p>思科的SR介绍<a href=\"https://www.cisco.com/c/zh_cn/solutions/service-provider/segment_routing.html\">网页</a></p>","more":""},{"title":"TICK技术栈简介","date":"2021-02-25T11:28:05.000Z","_content":"\n最近在看监控系统相关的文章，TICK的应用比较广泛，这是InfluxData开发的一套工具栈，主要包括以下四个组件： Telegraf  Influxdb Chronograf grafana Kapacitor\n\n具体的可以看[图](http://zhoujinl.github.io/2018/02/27/tick/)\n\n## telegraf\n\n这是一个go开发的监控工具，可以用来收集和报告指标，通过输出、转换、输出插件等将数据从目标采集并发送给其他的数据存储、服务或者消息队列\n\n<!--more-->\n\n## influxDB\n\n这是一个go开发的时序数据库，为带有时间戳的数据编写。\n\n## chronograf\n\n是一个开源可视化引擎 -- 可能会被替代？\n\n## grafana\n\ngo和angular框架写的可视化工具，比较流行的时序数据可视化工具\n\n## Kapacitor\n\n是一个数据引擎，可以处理来自influxdb的流数据，并且可以监控和报警\n\n核心还是telegraf & influxdb\n\ninfluxdb更新了2.x版本，变化较大 [官方文档](https://docs.influxdata.com/influxdb/v2.0/get-started/)\n\n[更新内容](https://www.infoq.cn/article/662MdX6QNzcL-5D4axKb)","source":"_posts/2021-02-25-TICK技术栈简介.md","raw":"---\ntitle: TICK技术栈简介\ndate: 2021-02-25 11:28:05\ntags:\n- TICK\n- 监控系统\ncategories:\n- 指南\n---\n\n最近在看监控系统相关的文章，TICK的应用比较广泛，这是InfluxData开发的一套工具栈，主要包括以下四个组件： Telegraf  Influxdb Chronograf grafana Kapacitor\n\n具体的可以看[图](http://zhoujinl.github.io/2018/02/27/tick/)\n\n## telegraf\n\n这是一个go开发的监控工具，可以用来收集和报告指标，通过输出、转换、输出插件等将数据从目标采集并发送给其他的数据存储、服务或者消息队列\n\n<!--more-->\n\n## influxDB\n\n这是一个go开发的时序数据库，为带有时间戳的数据编写。\n\n## chronograf\n\n是一个开源可视化引擎 -- 可能会被替代？\n\n## grafana\n\ngo和angular框架写的可视化工具，比较流行的时序数据可视化工具\n\n## Kapacitor\n\n是一个数据引擎，可以处理来自influxdb的流数据，并且可以监控和报警\n\n核心还是telegraf & influxdb\n\ninfluxdb更新了2.x版本，变化较大 [官方文档](https://docs.influxdata.com/influxdb/v2.0/get-started/)\n\n[更新内容](https://www.infoq.cn/article/662MdX6QNzcL-5D4axKb)","slug":"TICK技术栈简介","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgeh000k2h5phxaj9n88","content":"<p>最近在看监控系统相关的文章，TICK的应用比较广泛，这是InfluxData开发的一套工具栈，主要包括以下四个组件： Telegraf  Influxdb Chronograf grafana Kapacitor</p>\n<p>具体的可以看<a href=\"http://zhoujinl.github.io/2018/02/27/tick/\">图</a></p>\n<h2 id=\"telegraf\"><a href=\"#telegraf\" class=\"headerlink\" title=\"telegraf\"></a>telegraf</h2><p>这是一个go开发的监控工具，可以用来收集和报告指标，通过输出、转换、输出插件等将数据从目标采集并发送给其他的数据存储、服务或者消息队列</p>\n<a id=\"more\"></a>\n\n<h2 id=\"influxDB\"><a href=\"#influxDB\" class=\"headerlink\" title=\"influxDB\"></a>influxDB</h2><p>这是一个go开发的时序数据库，为带有时间戳的数据编写。</p>\n<h2 id=\"chronograf\"><a href=\"#chronograf\" class=\"headerlink\" title=\"chronograf\"></a>chronograf</h2><p>是一个开源可视化引擎 – 可能会被替代？</p>\n<h2 id=\"grafana\"><a href=\"#grafana\" class=\"headerlink\" title=\"grafana\"></a>grafana</h2><p>go和angular框架写的可视化工具，比较流行的时序数据可视化工具</p>\n<h2 id=\"Kapacitor\"><a href=\"#Kapacitor\" class=\"headerlink\" title=\"Kapacitor\"></a>Kapacitor</h2><p>是一个数据引擎，可以处理来自influxdb的流数据，并且可以监控和报警</p>\n<p>核心还是telegraf &amp; influxdb</p>\n<p>influxdb更新了2.x版本，变化较大 <a href=\"https://docs.influxdata.com/influxdb/v2.0/get-started/\">官方文档</a></p>\n<p><a href=\"https://www.infoq.cn/article/662MdX6QNzcL-5D4axKb\">更新内容</a></p>\n","site":{"data":{}},"excerpt":"<p>最近在看监控系统相关的文章，TICK的应用比较广泛，这是InfluxData开发的一套工具栈，主要包括以下四个组件： Telegraf  Influxdb Chronograf grafana Kapacitor</p>\n<p>具体的可以看<a href=\"http://zhoujinl.github.io/2018/02/27/tick/\">图</a></p>\n<h2 id=\"telegraf\"><a href=\"#telegraf\" class=\"headerlink\" title=\"telegraf\"></a>telegraf</h2><p>这是一个go开发的监控工具，可以用来收集和报告指标，通过输出、转换、输出插件等将数据从目标采集并发送给其他的数据存储、服务或者消息队列</p>","more":"<h2 id=\"influxDB\"><a href=\"#influxDB\" class=\"headerlink\" title=\"influxDB\"></a>influxDB</h2><p>这是一个go开发的时序数据库，为带有时间戳的数据编写。</p>\n<h2 id=\"chronograf\"><a href=\"#chronograf\" class=\"headerlink\" title=\"chronograf\"></a>chronograf</h2><p>是一个开源可视化引擎 – 可能会被替代？</p>\n<h2 id=\"grafana\"><a href=\"#grafana\" class=\"headerlink\" title=\"grafana\"></a>grafana</h2><p>go和angular框架写的可视化工具，比较流行的时序数据可视化工具</p>\n<h2 id=\"Kapacitor\"><a href=\"#Kapacitor\" class=\"headerlink\" title=\"Kapacitor\"></a>Kapacitor</h2><p>是一个数据引擎，可以处理来自influxdb的流数据，并且可以监控和报警</p>\n<p>核心还是telegraf &amp; influxdb</p>\n<p>influxdb更新了2.x版本，变化较大 <a href=\"https://docs.influxdata.com/influxdb/v2.0/get-started/\">官方文档</a></p>\n<p><a href=\"https://www.infoq.cn/article/662MdX6QNzcL-5D4axKb\">更新内容</a></p>"},{"title":"TSN 常用协议简介","date":"2021-02-26T15:59:24.000Z","_content":"\n在做这个项目的时候，总是有很多协议不太清楚是什么意思，这里先记录一下四个比较重要的协议，大概讲一下每个协议是做什么的，有什么意义\n\n* P802.1Qci – Per-Stream Filtering and Policing\n\n    * 基于stream的流量监管\n\n\n* 802.1Qbu - Frame Preemption\n\n    * 抢占式mac？\n\n* 802.1Qbv - Enhancements for Scheduled Traffic\n\n    * 时间感知整形器\n\n* P802.1CB – Frame Replication and Elimination for Reliability\n\n    * 帧的复制和高可靠性消除\n\n* 802.1AS Timing and Synchronization\n\n    * 时间同步\n\n<!--more-->\n\n## QCI 基于stream的流量监管\n\n类似与防火墙的机制，对转发前的数据进行筛选和过滤，对特定标识的数据帧加以控制 -- 检测和缓解破坏性传输，提高系统的健壮性\n\nQ： 依据什么来筛选和过滤呢？stream是什么概念？\n\n## QBV 时间感知整形\n\nQBV是TSN的一个核心协议，时间感知队列通过时间感知整形器(Time Aware Shaper，TAS)使TSN交换机能够来控制队列流量（queued traffic），以太网帧被标识并指派给基于优先级的VLAN Tag，每个队列在一个时间表中定义，然后这些数据队列报文在预定时间窗口在出口执行传输。其它队列将被锁定在规定时间窗口里。因此消除了周期性数据被非周期性数据所影响的结果。这意味着每个交换机的延迟是确定的，可知的。而在TSN网络的数据报文延时被得到保障。\n\n[参考](https://www.sdnlab.com/22868.html)\n\n## QBU 抢占式mac\n\n这个是给端口配置的，主要的输入就两个： `发送帧抢占时pmac的最小帧长`, ``\n\n\n## AS 时间同步\n\n在802.1AS中，时间同步是按照“域”（domain）划分的，包含多个PTP节点。在这些PTP节点中，有且仅有一个全局主节点（GrandMaster PTP Instance），其负责提供时钟信息给所有其他从节点。\n\nPTP节点又分为两类：PTP End Instance（PTP端节点）和PTP Relay Instance（PTP交换节点）其中：\n\nPTP End Instance或者作为GrandMaster，或者接收来自GrandMaster的时间同步信息\n\nPTP Relay Instance从某一接口接收时间同步信息，修正时间同步信息后，转发到其他接口\n\n**如何选择GrandMaster？**\n\n现在看是只按照优先级来选，而不看其他的指标，另外可以通过端口上的port-state结合实际物理拓扑来构造出一副图来指示整个网络的时间拓扑","source":"_posts/2021-02-26-TSN-常用协议简介.md","raw":"---\ntitle: TSN 常用协议简介\ndate: 2021-02-26 15:59:24\ntags:\n- 协议\ncategories:\n- 网络\n---\n\n在做这个项目的时候，总是有很多协议不太清楚是什么意思，这里先记录一下四个比较重要的协议，大概讲一下每个协议是做什么的，有什么意义\n\n* P802.1Qci – Per-Stream Filtering and Policing\n\n    * 基于stream的流量监管\n\n\n* 802.1Qbu - Frame Preemption\n\n    * 抢占式mac？\n\n* 802.1Qbv - Enhancements for Scheduled Traffic\n\n    * 时间感知整形器\n\n* P802.1CB – Frame Replication and Elimination for Reliability\n\n    * 帧的复制和高可靠性消除\n\n* 802.1AS Timing and Synchronization\n\n    * 时间同步\n\n<!--more-->\n\n## QCI 基于stream的流量监管\n\n类似与防火墙的机制，对转发前的数据进行筛选和过滤，对特定标识的数据帧加以控制 -- 检测和缓解破坏性传输，提高系统的健壮性\n\nQ： 依据什么来筛选和过滤呢？stream是什么概念？\n\n## QBV 时间感知整形\n\nQBV是TSN的一个核心协议，时间感知队列通过时间感知整形器(Time Aware Shaper，TAS)使TSN交换机能够来控制队列流量（queued traffic），以太网帧被标识并指派给基于优先级的VLAN Tag，每个队列在一个时间表中定义，然后这些数据队列报文在预定时间窗口在出口执行传输。其它队列将被锁定在规定时间窗口里。因此消除了周期性数据被非周期性数据所影响的结果。这意味着每个交换机的延迟是确定的，可知的。而在TSN网络的数据报文延时被得到保障。\n\n[参考](https://www.sdnlab.com/22868.html)\n\n## QBU 抢占式mac\n\n这个是给端口配置的，主要的输入就两个： `发送帧抢占时pmac的最小帧长`, ``\n\n\n## AS 时间同步\n\n在802.1AS中，时间同步是按照“域”（domain）划分的，包含多个PTP节点。在这些PTP节点中，有且仅有一个全局主节点（GrandMaster PTP Instance），其负责提供时钟信息给所有其他从节点。\n\nPTP节点又分为两类：PTP End Instance（PTP端节点）和PTP Relay Instance（PTP交换节点）其中：\n\nPTP End Instance或者作为GrandMaster，或者接收来自GrandMaster的时间同步信息\n\nPTP Relay Instance从某一接口接收时间同步信息，修正时间同步信息后，转发到其他接口\n\n**如何选择GrandMaster？**\n\n现在看是只按照优先级来选，而不看其他的指标，另外可以通过端口上的port-state结合实际物理拓扑来构造出一副图来指示整个网络的时间拓扑","slug":"TSN-常用协议简介","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgh0000p2h5p9c68cyz1","content":"<p>在做这个项目的时候，总是有很多协议不太清楚是什么意思，这里先记录一下四个比较重要的协议，大概讲一下每个协议是做什么的，有什么意义</p>\n<ul>\n<li><p>P802.1Qci – Per-Stream Filtering and Policing</p>\n<ul>\n<li>基于stream的流量监管</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>802.1Qbu - Frame Preemption</p>\n<ul>\n<li>抢占式mac？</li>\n</ul>\n</li>\n<li><p>802.1Qbv - Enhancements for Scheduled Traffic</p>\n<ul>\n<li>时间感知整形器</li>\n</ul>\n</li>\n<li><p>P802.1CB – Frame Replication and Elimination for Reliability</p>\n<ul>\n<li>帧的复制和高可靠性消除</li>\n</ul>\n</li>\n<li><p>802.1AS Timing and Synchronization</p>\n<ul>\n<li>时间同步</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"QCI-基于stream的流量监管\"><a href=\"#QCI-基于stream的流量监管\" class=\"headerlink\" title=\"QCI 基于stream的流量监管\"></a>QCI 基于stream的流量监管</h2><p>类似与防火墙的机制，对转发前的数据进行筛选和过滤，对特定标识的数据帧加以控制 – 检测和缓解破坏性传输，提高系统的健壮性</p>\n<p>Q： 依据什么来筛选和过滤呢？stream是什么概念？</p>\n<h2 id=\"QBV-时间感知整形\"><a href=\"#QBV-时间感知整形\" class=\"headerlink\" title=\"QBV 时间感知整形\"></a>QBV 时间感知整形</h2><p>QBV是TSN的一个核心协议，时间感知队列通过时间感知整形器(Time Aware Shaper，TAS)使TSN交换机能够来控制队列流量（queued traffic），以太网帧被标识并指派给基于优先级的VLAN Tag，每个队列在一个时间表中定义，然后这些数据队列报文在预定时间窗口在出口执行传输。其它队列将被锁定在规定时间窗口里。因此消除了周期性数据被非周期性数据所影响的结果。这意味着每个交换机的延迟是确定的，可知的。而在TSN网络的数据报文延时被得到保障。</p>\n<p><a href=\"https://www.sdnlab.com/22868.html\">参考</a></p>\n<h2 id=\"QBU-抢占式mac\"><a href=\"#QBU-抢占式mac\" class=\"headerlink\" title=\"QBU 抢占式mac\"></a>QBU 抢占式mac</h2><p>这个是给端口配置的，主要的输入就两个： <code>发送帧抢占时pmac的最小帧长</code>, ``</p>\n<h2 id=\"AS-时间同步\"><a href=\"#AS-时间同步\" class=\"headerlink\" title=\"AS 时间同步\"></a>AS 时间同步</h2><p>在802.1AS中，时间同步是按照“域”（domain）划分的，包含多个PTP节点。在这些PTP节点中，有且仅有一个全局主节点（GrandMaster PTP Instance），其负责提供时钟信息给所有其他从节点。</p>\n<p>PTP节点又分为两类：PTP End Instance（PTP端节点）和PTP Relay Instance（PTP交换节点）其中：</p>\n<p>PTP End Instance或者作为GrandMaster，或者接收来自GrandMaster的时间同步信息</p>\n<p>PTP Relay Instance从某一接口接收时间同步信息，修正时间同步信息后，转发到其他接口</p>\n<p><strong>如何选择GrandMaster？</strong></p>\n<p>现在看是只按照优先级来选，而不看其他的指标，另外可以通过端口上的port-state结合实际物理拓扑来构造出一副图来指示整个网络的时间拓扑</p>\n","site":{"data":{}},"excerpt":"<p>在做这个项目的时候，总是有很多协议不太清楚是什么意思，这里先记录一下四个比较重要的协议，大概讲一下每个协议是做什么的，有什么意义</p>\n<ul>\n<li><p>P802.1Qci – Per-Stream Filtering and Policing</p>\n<ul>\n<li>基于stream的流量监管</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>802.1Qbu - Frame Preemption</p>\n<ul>\n<li>抢占式mac？</li>\n</ul>\n</li>\n<li><p>802.1Qbv - Enhancements for Scheduled Traffic</p>\n<ul>\n<li>时间感知整形器</li>\n</ul>\n</li>\n<li><p>P802.1CB – Frame Replication and Elimination for Reliability</p>\n<ul>\n<li>帧的复制和高可靠性消除</li>\n</ul>\n</li>\n<li><p>802.1AS Timing and Synchronization</p>\n<ul>\n<li>时间同步</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"QCI-基于stream的流量监管\"><a href=\"#QCI-基于stream的流量监管\" class=\"headerlink\" title=\"QCI 基于stream的流量监管\"></a>QCI 基于stream的流量监管</h2><p>类似与防火墙的机制，对转发前的数据进行筛选和过滤，对特定标识的数据帧加以控制 – 检测和缓解破坏性传输，提高系统的健壮性</p>\n<p>Q： 依据什么来筛选和过滤呢？stream是什么概念？</p>\n<h2 id=\"QBV-时间感知整形\"><a href=\"#QBV-时间感知整形\" class=\"headerlink\" title=\"QBV 时间感知整形\"></a>QBV 时间感知整形</h2><p>QBV是TSN的一个核心协议，时间感知队列通过时间感知整形器(Time Aware Shaper，TAS)使TSN交换机能够来控制队列流量（queued traffic），以太网帧被标识并指派给基于优先级的VLAN Tag，每个队列在一个时间表中定义，然后这些数据队列报文在预定时间窗口在出口执行传输。其它队列将被锁定在规定时间窗口里。因此消除了周期性数据被非周期性数据所影响的结果。这意味着每个交换机的延迟是确定的，可知的。而在TSN网络的数据报文延时被得到保障。</p>\n<p><a href=\"https://www.sdnlab.com/22868.html\">参考</a></p>\n<h2 id=\"QBU-抢占式mac\"><a href=\"#QBU-抢占式mac\" class=\"headerlink\" title=\"QBU 抢占式mac\"></a>QBU 抢占式mac</h2><p>这个是给端口配置的，主要的输入就两个： <code>发送帧抢占时pmac的最小帧长</code>, ``</p>\n<h2 id=\"AS-时间同步\"><a href=\"#AS-时间同步\" class=\"headerlink\" title=\"AS 时间同步\"></a>AS 时间同步</h2><p>在802.1AS中，时间同步是按照“域”（domain）划分的，包含多个PTP节点。在这些PTP节点中，有且仅有一个全局主节点（GrandMaster PTP Instance），其负责提供时钟信息给所有其他从节点。</p>\n<p>PTP节点又分为两类：PTP End Instance（PTP端节点）和PTP Relay Instance（PTP交换节点）其中：</p>\n<p>PTP End Instance或者作为GrandMaster，或者接收来自GrandMaster的时间同步信息</p>\n<p>PTP Relay Instance从某一接口接收时间同步信息，修正时间同步信息后，转发到其他接口</p>\n<p><strong>如何选择GrandMaster？</strong></p>\n<p>现在看是只按照优先级来选，而不看其他的指标，另外可以通过端口上的port-state结合实际物理拓扑来构造出一副图来指示整个网络的时间拓扑</p>"},{"title":"mvn常用命令积累","date":"2021-02-26T15:28:50.000Z","_content":"\n# 什么是MVN?\n\nAPACHE MAVEN 是一个项目管理和综合工具，帮助构建一个完整的生命周期框架，简化和标准化项目建设过程\n\n一个典型的maven构建的生命周期：\n\n|阶段|处理|描述|\n|--|--|--|\n|准备资源|资源复制|资源复制可以定制|\n|编译|执行编译|源代码编译|\n|包装|打包|创建JAR/WAR包、在pom.xml中定义提及的包|\n|安装|安装|本地/远程maven仓库中安装程序包\n<!--more-->\n# 常用命令\n\n## 打包跳过测试\n\n* mvn clean install -DskipTests\n    \n    * 不执行测试用例，但是编译测试用例生成相应class文件到target/test-classes下\n\n* mvn clean install -Dmaven.test.skip=true\n    \n    * 不执行测试用例，也不编译测试用例的类\n","source":"_posts/2021-02-26-mvn常用命令积累.md","raw":"---\ntitle: mvn常用命令积累\ndate: 2021-02-26 15:28:50\ntags:\n- mvn\ncategories:\n- 初学者教程\n---\n\n# 什么是MVN?\n\nAPACHE MAVEN 是一个项目管理和综合工具，帮助构建一个完整的生命周期框架，简化和标准化项目建设过程\n\n一个典型的maven构建的生命周期：\n\n|阶段|处理|描述|\n|--|--|--|\n|准备资源|资源复制|资源复制可以定制|\n|编译|执行编译|源代码编译|\n|包装|打包|创建JAR/WAR包、在pom.xml中定义提及的包|\n|安装|安装|本地/远程maven仓库中安装程序包\n<!--more-->\n# 常用命令\n\n## 打包跳过测试\n\n* mvn clean install -DskipTests\n    \n    * 不执行测试用例，但是编译测试用例生成相应class文件到target/test-classes下\n\n* mvn clean install -Dmaven.test.skip=true\n    \n    * 不执行测试用例，也不编译测试用例的类\n","slug":"mvn常用命令积累","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgjm000r2h5phcf9a8jz","content":"<h1 id=\"什么是MVN\"><a href=\"#什么是MVN\" class=\"headerlink\" title=\"什么是MVN?\"></a>什么是MVN?</h1><p>APACHE MAVEN 是一个项目管理和综合工具，帮助构建一个完整的生命周期框架，简化和标准化项目建设过程</p>\n<p>一个典型的maven构建的生命周期：</p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>处理</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>准备资源</td>\n<td>资源复制</td>\n<td>资源复制可以定制</td>\n</tr>\n<tr>\n<td>编译</td>\n<td>执行编译</td>\n<td>源代码编译</td>\n</tr>\n<tr>\n<td>包装</td>\n<td>打包</td>\n<td>创建JAR/WAR包、在pom.xml中定义提及的包</td>\n</tr>\n<tr>\n<td>安装</td>\n<td>安装</td>\n<td>本地/远程maven仓库中安装程序包</td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"打包跳过测试\"><a href=\"#打包跳过测试\" class=\"headerlink\" title=\"打包跳过测试\"></a>打包跳过测试</h2><ul>\n<li><p>mvn clean install -DskipTests</p>\n<ul>\n<li>不执行测试用例，但是编译测试用例生成相应class文件到target/test-classes下</li>\n</ul>\n</li>\n<li><p>mvn clean install -Dmaven.test.skip=true</p>\n<ul>\n<li>不执行测试用例，也不编译测试用例的类</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是MVN\"><a href=\"#什么是MVN\" class=\"headerlink\" title=\"什么是MVN?\"></a>什么是MVN?</h1><p>APACHE MAVEN 是一个项目管理和综合工具，帮助构建一个完整的生命周期框架，简化和标准化项目建设过程</p>\n<p>一个典型的maven构建的生命周期：</p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>处理</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>准备资源</td>\n<td>资源复制</td>\n<td>资源复制可以定制</td>\n</tr>\n<tr>\n<td>编译</td>\n<td>执行编译</td>\n<td>源代码编译</td>\n</tr>\n<tr>\n<td>包装</td>\n<td>打包</td>\n<td>创建JAR/WAR包、在pom.xml中定义提及的包</td>\n</tr>\n<tr>\n<td>安装</td>\n<td>安装</td>\n<td>本地/远程maven仓库中安装程序包</td>\n</tr>\n</tbody></table>","more":"<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"打包跳过测试\"><a href=\"#打包跳过测试\" class=\"headerlink\" title=\"打包跳过测试\"></a>打包跳过测试</h2><ul>\n<li><p>mvn clean install -DskipTests</p>\n<ul>\n<li>不执行测试用例，但是编译测试用例生成相应class文件到target/test-classes下</li>\n</ul>\n</li>\n<li><p>mvn clean install -Dmaven.test.skip=true</p>\n<ul>\n<li>不执行测试用例，也不编译测试用例的类</li>\n</ul>\n</li>\n</ul>"},{"title":"Lambok注解介绍","date":"2021-03-02T18:47:47.000Z","_content":"\n# Lambok 注解介绍\n\n## Lambok 介绍\n\n`lambok` 是一个帮助简化代码的工具类，主要就是可以帮助少写重复代码：采用注解的方式，消除代码中的构造方法\n\n<!--more-->\n\n## 注解介绍\n\n接下来遇到一个增加一个注解吧··，大概讲一下每个注解是干什么的\n\n### @SneakyThrows\n\nsneaky 是悄悄的意思， throws 就不用说了，java里边遇到异常就用这个抛出来，现在我们就可以用`SneakyThrows`来把异常处理掉。\n\n这个注解的实际作用只是帮助我们“骗过”编译器，让编译器不会对没有处理的异常报错而要求我们强制处理。如果程序运行过程中实际发生了错误，则会直接向上抛出。","source":"_posts/2021-03-02-Lambok注解介绍.md","raw":"---\ntitle: Lambok注解介绍\ndate: 2021-03-02 18:47:47\ntags:\n- Lambok\n- java\ncategories:\n- java相关\n---\n\n# Lambok 注解介绍\n\n## Lambok 介绍\n\n`lambok` 是一个帮助简化代码的工具类，主要就是可以帮助少写重复代码：采用注解的方式，消除代码中的构造方法\n\n<!--more-->\n\n## 注解介绍\n\n接下来遇到一个增加一个注解吧··，大概讲一下每个注解是干什么的\n\n### @SneakyThrows\n\nsneaky 是悄悄的意思， throws 就不用说了，java里边遇到异常就用这个抛出来，现在我们就可以用`SneakyThrows`来把异常处理掉。\n\n这个注解的实际作用只是帮助我们“骗过”编译器，让编译器不会对没有处理的异常报错而要求我们强制处理。如果程序运行过程中实际发生了错误，则会直接向上抛出。","slug":"Lambok注解介绍","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgl2000v2h5p5zau2giv","content":"<h1 id=\"Lambok-注解介绍\"><a href=\"#Lambok-注解介绍\" class=\"headerlink\" title=\"Lambok 注解介绍\"></a>Lambok 注解介绍</h1><h2 id=\"Lambok-介绍\"><a href=\"#Lambok-介绍\" class=\"headerlink\" title=\"Lambok 介绍\"></a>Lambok 介绍</h2><p><code>lambok</code> 是一个帮助简化代码的工具类，主要就是可以帮助少写重复代码：采用注解的方式，消除代码中的构造方法</p>\n<a id=\"more\"></a>\n\n<h2 id=\"注解介绍\"><a href=\"#注解介绍\" class=\"headerlink\" title=\"注解介绍\"></a>注解介绍</h2><p>接下来遇到一个增加一个注解吧··，大概讲一下每个注解是干什么的</p>\n<h3 id=\"SneakyThrows\"><a href=\"#SneakyThrows\" class=\"headerlink\" title=\"@SneakyThrows\"></a>@SneakyThrows</h3><p>sneaky 是悄悄的意思， throws 就不用说了，java里边遇到异常就用这个抛出来，现在我们就可以用<code>SneakyThrows</code>来把异常处理掉。</p>\n<p>这个注解的实际作用只是帮助我们“骗过”编译器，让编译器不会对没有处理的异常报错而要求我们强制处理。如果程序运行过程中实际发生了错误，则会直接向上抛出。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Lambok-注解介绍\"><a href=\"#Lambok-注解介绍\" class=\"headerlink\" title=\"Lambok 注解介绍\"></a>Lambok 注解介绍</h1><h2 id=\"Lambok-介绍\"><a href=\"#Lambok-介绍\" class=\"headerlink\" title=\"Lambok 介绍\"></a>Lambok 介绍</h2><p><code>lambok</code> 是一个帮助简化代码的工具类，主要就是可以帮助少写重复代码：采用注解的方式，消除代码中的构造方法</p>","more":"<h2 id=\"注解介绍\"><a href=\"#注解介绍\" class=\"headerlink\" title=\"注解介绍\"></a>注解介绍</h2><p>接下来遇到一个增加一个注解吧··，大概讲一下每个注解是干什么的</p>\n<h3 id=\"SneakyThrows\"><a href=\"#SneakyThrows\" class=\"headerlink\" title=\"@SneakyThrows\"></a>@SneakyThrows</h3><p>sneaky 是悄悄的意思， throws 就不用说了，java里边遇到异常就用这个抛出来，现在我们就可以用<code>SneakyThrows</code>来把异常处理掉。</p>\n<p>这个注解的实际作用只是帮助我们“骗过”编译器，让编译器不会对没有处理的异常报错而要求我们强制处理。如果程序运行过程中实际发生了错误，则会直接向上抛出。</p>"},{"title":"Jsch 初应用","date":"2021-03-04T17:25:01.000Z","_content":"\n## 什么是Jsch\n\nJsch是一个纯java写的ssh客户端，通过Jsch可以完全通过java来实现ssh的一些功能\n\n## 为什么要用Jsch？\n\n有个需求要做一个netconf长连接到设备上，监听notifaction，看了一圈好像没有现成的解决办法，所以只能自己想办法研究Jsch写一个\n\n<!--more-->\n\n## Jsch探索\n\n### Jsch中连接的方式：\n\n在Jsch中一个ssh连接称为一个Session，在一个建立好的Session中可以用 `sshSession.openChannel`获取不同类型的Channel：\n\n|channel|用途|备注\n|--|--|--|\n|exec|单独执行一个命令\n|shell|远程终端方式交互\n|subsystem| 子系统|要用`setSubsystem`来指定子系统类型，比如cmd，netconf\n|sftp|传输文件\n\n### 获取ssh的输出\n\n对channel有一个getInputStream的方法，可以获取到输入信息流，输出的类型是InputStream。当前的代码是这样的：\n\n````java\nInputStream inputStream = chn.getInputStream();\n    try {\n        //循环读取\n        byte[] buffer = new byte[1024];\n        int i = 0;\n        //如果没有数据来，线程会一直阻塞在这个地方等待数据。\n        while ((i = inputStream.read(buffer)) != -1) {\n            System.out.println(\"got data!\");\n            //TODO: 将获取的代码转化为字符串\n        }\n    } finally {\n        //断开连接后关闭会话\n        deviceConn.close();\n        if (inputStream != null) {\n            inputStream.close();\n        }\n    }\n````\n在这里实际上每次有输入的时候，都会看到got data，但是怎么把输入流转为string做解析我还在研究怎么做···\n\n这个[文章](https://www.baeldung.com/convert-input-stream-to-string)总结了一下如何把inputStream转化为string，但是我试了几个并不好用，最后用下列代码解决了输入流转string的问题：\n\n````java\nbyte[] buffer = new byte[1024];\nint i = 0;\n//如果没有数据来，线程会一直阻塞在这个地方等待数据。\nwhile ((i = inputStream.read(buffer)) != -1) {\n    TextMessage textMessage = new TextMessage(buffer);\n    System.out.println(textMessage.getPayload());\n}\n````\n\n当然为什么这个ok也是一个坑···具体的怎么用以后慢慢填坑吧···\n\nupdate 4.22：\n\n> buffer里边存的东西是ascii，所以也可以自己转啦··这样子可能更安全","source":"_posts/2021-03-04-Jsch-初应用.md","raw":"---\ntitle: Jsch 初应用\ndate: 2021-03-04 17:25:01\ntags:\n- java\n- jsch\ncategories:\n- java初学者教程\n---\n\n## 什么是Jsch\n\nJsch是一个纯java写的ssh客户端，通过Jsch可以完全通过java来实现ssh的一些功能\n\n## 为什么要用Jsch？\n\n有个需求要做一个netconf长连接到设备上，监听notifaction，看了一圈好像没有现成的解决办法，所以只能自己想办法研究Jsch写一个\n\n<!--more-->\n\n## Jsch探索\n\n### Jsch中连接的方式：\n\n在Jsch中一个ssh连接称为一个Session，在一个建立好的Session中可以用 `sshSession.openChannel`获取不同类型的Channel：\n\n|channel|用途|备注\n|--|--|--|\n|exec|单独执行一个命令\n|shell|远程终端方式交互\n|subsystem| 子系统|要用`setSubsystem`来指定子系统类型，比如cmd，netconf\n|sftp|传输文件\n\n### 获取ssh的输出\n\n对channel有一个getInputStream的方法，可以获取到输入信息流，输出的类型是InputStream。当前的代码是这样的：\n\n````java\nInputStream inputStream = chn.getInputStream();\n    try {\n        //循环读取\n        byte[] buffer = new byte[1024];\n        int i = 0;\n        //如果没有数据来，线程会一直阻塞在这个地方等待数据。\n        while ((i = inputStream.read(buffer)) != -1) {\n            System.out.println(\"got data!\");\n            //TODO: 将获取的代码转化为字符串\n        }\n    } finally {\n        //断开连接后关闭会话\n        deviceConn.close();\n        if (inputStream != null) {\n            inputStream.close();\n        }\n    }\n````\n在这里实际上每次有输入的时候，都会看到got data，但是怎么把输入流转为string做解析我还在研究怎么做···\n\n这个[文章](https://www.baeldung.com/convert-input-stream-to-string)总结了一下如何把inputStream转化为string，但是我试了几个并不好用，最后用下列代码解决了输入流转string的问题：\n\n````java\nbyte[] buffer = new byte[1024];\nint i = 0;\n//如果没有数据来，线程会一直阻塞在这个地方等待数据。\nwhile ((i = inputStream.read(buffer)) != -1) {\n    TextMessage textMessage = new TextMessage(buffer);\n    System.out.println(textMessage.getPayload());\n}\n````\n\n当然为什么这个ok也是一个坑···具体的怎么用以后慢慢填坑吧···\n\nupdate 4.22：\n\n> buffer里边存的东西是ascii，所以也可以自己转啦··这样子可能更安全","slug":"Jsch-初应用","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgmb000x2h5p77ezggq0","content":"<h2 id=\"什么是Jsch\"><a href=\"#什么是Jsch\" class=\"headerlink\" title=\"什么是Jsch\"></a>什么是Jsch</h2><p>Jsch是一个纯java写的ssh客户端，通过Jsch可以完全通过java来实现ssh的一些功能</p>\n<h2 id=\"为什么要用Jsch？\"><a href=\"#为什么要用Jsch？\" class=\"headerlink\" title=\"为什么要用Jsch？\"></a>为什么要用Jsch？</h2><p>有个需求要做一个netconf长连接到设备上，监听notifaction，看了一圈好像没有现成的解决办法，所以只能自己想办法研究Jsch写一个</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Jsch探索\"><a href=\"#Jsch探索\" class=\"headerlink\" title=\"Jsch探索\"></a>Jsch探索</h2><h3 id=\"Jsch中连接的方式：\"><a href=\"#Jsch中连接的方式：\" class=\"headerlink\" title=\"Jsch中连接的方式：\"></a>Jsch中连接的方式：</h3><p>在Jsch中一个ssh连接称为一个Session，在一个建立好的Session中可以用 <code>sshSession.openChannel</code>获取不同类型的Channel：</p>\n<table>\n<thead>\n<tr>\n<th>channel</th>\n<th>用途</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>exec</td>\n<td>单独执行一个命令</td>\n<td></td>\n</tr>\n<tr>\n<td>shell</td>\n<td>远程终端方式交互</td>\n<td></td>\n</tr>\n<tr>\n<td>subsystem</td>\n<td>子系统</td>\n<td>要用<code>setSubsystem</code>来指定子系统类型，比如cmd，netconf</td>\n</tr>\n<tr>\n<td>sftp</td>\n<td>传输文件</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"获取ssh的输出\"><a href=\"#获取ssh的输出\" class=\"headerlink\" title=\"获取ssh的输出\"></a>获取ssh的输出</h3><p>对channel有一个getInputStream的方法，可以获取到输入信息流，输出的类型是InputStream。当前的代码是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputStream inputStream = chn.getInputStream();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//循环读取</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有数据来，线程会一直阻塞在这个地方等待数据。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((i = inputStream.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;got data!&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//<span class=\"doctag\">TODO:</span> 将获取的代码转化为字符串</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//断开连接后关闭会话</span></span><br><span class=\"line\">        deviceConn.close();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inputStream != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            inputStream.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在这里实际上每次有输入的时候，都会看到got data，但是怎么把输入流转为string做解析我还在研究怎么做···</p>\n<p>这个<a href=\"https://www.baeldung.com/convert-input-stream-to-string\">文章</a>总结了一下如何把inputStream转化为string，但是我试了几个并不好用，最后用下列代码解决了输入流转string的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//如果没有数据来，线程会一直阻塞在这个地方等待数据。</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> ((i = inputStream.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    TextMessage textMessage = <span class=\"keyword\">new</span> TextMessage(buffer);</span><br><span class=\"line\">    System.out.println(textMessage.getPayload());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然为什么这个ok也是一个坑···具体的怎么用以后慢慢填坑吧···</p>\n<p>update 4.22：</p>\n<blockquote>\n<p>buffer里边存的东西是ascii，所以也可以自己转啦··这样子可能更安全</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是Jsch\"><a href=\"#什么是Jsch\" class=\"headerlink\" title=\"什么是Jsch\"></a>什么是Jsch</h2><p>Jsch是一个纯java写的ssh客户端，通过Jsch可以完全通过java来实现ssh的一些功能</p>\n<h2 id=\"为什么要用Jsch？\"><a href=\"#为什么要用Jsch？\" class=\"headerlink\" title=\"为什么要用Jsch？\"></a>为什么要用Jsch？</h2><p>有个需求要做一个netconf长连接到设备上，监听notifaction，看了一圈好像没有现成的解决办法，所以只能自己想办法研究Jsch写一个</p>","more":"<h2 id=\"Jsch探索\"><a href=\"#Jsch探索\" class=\"headerlink\" title=\"Jsch探索\"></a>Jsch探索</h2><h3 id=\"Jsch中连接的方式：\"><a href=\"#Jsch中连接的方式：\" class=\"headerlink\" title=\"Jsch中连接的方式：\"></a>Jsch中连接的方式：</h3><p>在Jsch中一个ssh连接称为一个Session，在一个建立好的Session中可以用 <code>sshSession.openChannel</code>获取不同类型的Channel：</p>\n<table>\n<thead>\n<tr>\n<th>channel</th>\n<th>用途</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>exec</td>\n<td>单独执行一个命令</td>\n<td></td>\n</tr>\n<tr>\n<td>shell</td>\n<td>远程终端方式交互</td>\n<td></td>\n</tr>\n<tr>\n<td>subsystem</td>\n<td>子系统</td>\n<td>要用<code>setSubsystem</code>来指定子系统类型，比如cmd，netconf</td>\n</tr>\n<tr>\n<td>sftp</td>\n<td>传输文件</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"获取ssh的输出\"><a href=\"#获取ssh的输出\" class=\"headerlink\" title=\"获取ssh的输出\"></a>获取ssh的输出</h3><p>对channel有一个getInputStream的方法，可以获取到输入信息流，输出的类型是InputStream。当前的代码是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputStream inputStream = chn.getInputStream();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//循环读取</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有数据来，线程会一直阻塞在这个地方等待数据。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((i = inputStream.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;got data!&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//<span class=\"doctag\">TODO:</span> 将获取的代码转化为字符串</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//断开连接后关闭会话</span></span><br><span class=\"line\">        deviceConn.close();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inputStream != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            inputStream.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在这里实际上每次有输入的时候，都会看到got data，但是怎么把输入流转为string做解析我还在研究怎么做···</p>\n<p>这个<a href=\"https://www.baeldung.com/convert-input-stream-to-string\">文章</a>总结了一下如何把inputStream转化为string，但是我试了几个并不好用，最后用下列代码解决了输入流转string的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//如果没有数据来，线程会一直阻塞在这个地方等待数据。</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> ((i = inputStream.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    TextMessage textMessage = <span class=\"keyword\">new</span> TextMessage(buffer);</span><br><span class=\"line\">    System.out.println(textMessage.getPayload());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然为什么这个ok也是一个坑···具体的怎么用以后慢慢填坑吧···</p>\n<p>update 4.22：</p>\n<blockquote>\n<p>buffer里边存的东西是ascii，所以也可以自己转啦··这样子可能更安全</p>\n</blockquote>"},{"title":"java变量那点事","date":"2021-03-10T18:55:40.000Z","_content":"\n为什么想要开这篇文章呢？因为在写代码的时候，发现一个很诡异的问题：\n\n有一个list想要插入数据库，在插入之前都会清空一遍数据库。但是每次插入完之后都发现好像清空数据库失败了。代码大概如下：\n\n<!--more-->\n\n````java\npublic class TestImpl {\n    List<Link> linkInfo = new ArrayList<>();\n    public static void main(String[] args){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"someAttr\", attr);\n        linkMapper.deleteByMap(map);\n        linkInfo = getInfo();\n        linkService.saveBatch(linkInfo)\n    }\n}\n````\n\n查了很多次都没有发现问题，断点执行后发现：每次linkInfo的长度都变得很长，就从最开始发现：每次linkInfo都带着上次执行之后的结果，append了现在的结果。\n\n这本来应该是个很简单的错误，我却看了很久，还是基础知识太薄弱了啊。\n\n## java中的变量类型\n\n````java\npublic class Variable{\n    static int allClicks=0;    // 类变量\n    String str=\"hello world\";  // 实例变量\n    public void method(){\n        int i =0;  // 局部变量\n    }\n}\n````\n\n### 实例变量\n\n上边的例子中显然linkInfo是一个实例变量，实例变量的特点有以下：\n\n* 实例变量声明在一个类中，但在方法、构造方法和语句块之外；\n* 当一个对象被实例化之后，每个实例变量的值就跟着确定；\n* 实例变量在对象创建的时候创建，在对象被销毁的时候销毁；\n* 实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；\n* 实例变量可以声明在使用前或者使用后；\n* 访问修饰符可以修饰实例变量；\n* 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私* 有。通过使用访问修饰符可以使实例变量对子类可见；\n* 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；\n* 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。\n\n\n这里主要关注一下第二、第三条：在springboot项目起来之后，这个对象就已经被实例化了，每次调用main方法，实际上linkInfo里边都包含上一次get到的值。所以实际要用的话每次调用main方法，都要置空linkInfo。\n\n其他的话，访问修饰符其实就是public, private, protect这些。还有一个[应用类型变量](https://www.cnblogs.com/ChrisMurphy/p/4825906.html),这个也要看文章了解一下。\n\n\n### 类变量\n\n* 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。\n* 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。\n* 静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。\n* 静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。\n* 静态变量在第一次被访问时创建，在程序结束时销毁。\n* 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。\n* 默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。\n* 静态变量可以通过：ClassName.VariableName的方式访问。\n* 类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。\n\n理解为静态变量可能会更好理解，总之就是作为常量使用，初始化之后不可改变\n\n### 局部变量\n\n* 局部变量声明在方法、构造方法或者语句块中；\n* 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；\n* 访问修饰符不能用于局部变量；\n* 局部变量只在声明它的方法、构造方法或者语句块中可见；\n* 局部变量是在栈上分配的。\n* 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。\n\n局部变量就是在函数中使用的变量，大概是使用最广泛的。\n\n-----\n\n编码过程中感觉基础真的挺重要，自己的java基础确实比较差，还要多学习··","source":"_posts/2021-03-10-全局变量那点事.md","raw":"---\ntitle: java变量那点事\ndate: 2021-03-10 18:55:40\ntags:\n- java\ncategories:\n- java初学者教程\n---\n\n为什么想要开这篇文章呢？因为在写代码的时候，发现一个很诡异的问题：\n\n有一个list想要插入数据库，在插入之前都会清空一遍数据库。但是每次插入完之后都发现好像清空数据库失败了。代码大概如下：\n\n<!--more-->\n\n````java\npublic class TestImpl {\n    List<Link> linkInfo = new ArrayList<>();\n    public static void main(String[] args){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"someAttr\", attr);\n        linkMapper.deleteByMap(map);\n        linkInfo = getInfo();\n        linkService.saveBatch(linkInfo)\n    }\n}\n````\n\n查了很多次都没有发现问题，断点执行后发现：每次linkInfo的长度都变得很长，就从最开始发现：每次linkInfo都带着上次执行之后的结果，append了现在的结果。\n\n这本来应该是个很简单的错误，我却看了很久，还是基础知识太薄弱了啊。\n\n## java中的变量类型\n\n````java\npublic class Variable{\n    static int allClicks=0;    // 类变量\n    String str=\"hello world\";  // 实例变量\n    public void method(){\n        int i =0;  // 局部变量\n    }\n}\n````\n\n### 实例变量\n\n上边的例子中显然linkInfo是一个实例变量，实例变量的特点有以下：\n\n* 实例变量声明在一个类中，但在方法、构造方法和语句块之外；\n* 当一个对象被实例化之后，每个实例变量的值就跟着确定；\n* 实例变量在对象创建的时候创建，在对象被销毁的时候销毁；\n* 实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；\n* 实例变量可以声明在使用前或者使用后；\n* 访问修饰符可以修饰实例变量；\n* 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私* 有。通过使用访问修饰符可以使实例变量对子类可见；\n* 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；\n* 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。\n\n\n这里主要关注一下第二、第三条：在springboot项目起来之后，这个对象就已经被实例化了，每次调用main方法，实际上linkInfo里边都包含上一次get到的值。所以实际要用的话每次调用main方法，都要置空linkInfo。\n\n其他的话，访问修饰符其实就是public, private, protect这些。还有一个[应用类型变量](https://www.cnblogs.com/ChrisMurphy/p/4825906.html),这个也要看文章了解一下。\n\n\n### 类变量\n\n* 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。\n* 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。\n* 静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。\n* 静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。\n* 静态变量在第一次被访问时创建，在程序结束时销毁。\n* 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。\n* 默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。\n* 静态变量可以通过：ClassName.VariableName的方式访问。\n* 类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。\n\n理解为静态变量可能会更好理解，总之就是作为常量使用，初始化之后不可改变\n\n### 局部变量\n\n* 局部变量声明在方法、构造方法或者语句块中；\n* 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；\n* 访问修饰符不能用于局部变量；\n* 局部变量只在声明它的方法、构造方法或者语句块中可见；\n* 局部变量是在栈上分配的。\n* 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。\n\n局部变量就是在函数中使用的变量，大概是使用最广泛的。\n\n-----\n\n编码过程中感觉基础真的挺重要，自己的java基础确实比较差，还要多学习··","slug":"全局变量那点事","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgmd00102h5p86wj4ypo","content":"<p>为什么想要开这篇文章呢？因为在写代码的时候，发现一个很诡异的问题：</p>\n<p>有一个list想要插入数据库，在插入之前都会清空一遍数据库。但是每次插入完之后都发现好像清空数据库失败了。代码大概如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestImpl</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Link&gt; linkInfo = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;someAttr&quot;</span>, attr);</span><br><span class=\"line\">        linkMapper.deleteByMap(map);</span><br><span class=\"line\">        linkInfo = getInfo();</span><br><span class=\"line\">        linkService.saveBatch(linkInfo)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查了很多次都没有发现问题，断点执行后发现：每次linkInfo的长度都变得很长，就从最开始发现：每次linkInfo都带着上次执行之后的结果，append了现在的结果。</p>\n<p>这本来应该是个很简单的错误，我却看了很久，还是基础知识太薄弱了啊。</p>\n<h2 id=\"java中的变量类型\"><a href=\"#java中的变量类型\" class=\"headerlink\" title=\"java中的变量类型\"></a>java中的变量类型</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Variable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> allClicks=<span class=\"number\">0</span>;    <span class=\"comment\">// 类变量</span></span><br><span class=\"line\">    String str=<span class=\"string\">&quot;hello world&quot;</span>;  <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;  <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h3><p>上边的例子中显然linkInfo是一个实例变量，实例变量的特点有以下：</p>\n<ul>\n<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>\n<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>\n<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>\n<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>\n<li>实例变量可以声明在使用前或者使用后；</li>\n<li>访问修饰符可以修饰实例变量；</li>\n<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私* 有。通过使用访问修饰符可以使实例变量对子类可见；</li>\n<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>\n<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>\n</ul>\n<p>这里主要关注一下第二、第三条：在springboot项目起来之后，这个对象就已经被实例化了，每次调用main方法，实际上linkInfo里边都包含上一次get到的值。所以实际要用的话每次调用main方法，都要置空linkInfo。</p>\n<p>其他的话，访问修饰符其实就是public, private, protect这些。还有一个<a href=\"https://www.cnblogs.com/ChrisMurphy/p/4825906.html\">应用类型变量</a>,这个也要看文章了解一下。</p>\n<h3 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h3><ul>\n<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>\n<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>\n<li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li>\n<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li>\n<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>\n<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li>\n<li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>\n<li>静态变量可以通过：ClassName.VariableName的方式访问。</li>\n<li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>\n</ul>\n<p>理解为静态变量可能会更好理解，总之就是作为常量使用，初始化之后不可改变</p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><ul>\n<li>局部变量声明在方法、构造方法或者语句块中；</li>\n<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>\n<li>访问修饰符不能用于局部变量；</li>\n<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>\n<li>局部变量是在栈上分配的。</li>\n<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>\n</ul>\n<p>局部变量就是在函数中使用的变量，大概是使用最广泛的。</p>\n<hr>\n<p>编码过程中感觉基础真的挺重要，自己的java基础确实比较差，还要多学习··</p>\n","site":{"data":{}},"excerpt":"<p>为什么想要开这篇文章呢？因为在写代码的时候，发现一个很诡异的问题：</p>\n<p>有一个list想要插入数据库，在插入之前都会清空一遍数据库。但是每次插入完之后都发现好像清空数据库失败了。代码大概如下：</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestImpl</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Link&gt; linkInfo = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;someAttr&quot;</span>, attr);</span><br><span class=\"line\">        linkMapper.deleteByMap(map);</span><br><span class=\"line\">        linkInfo = getInfo();</span><br><span class=\"line\">        linkService.saveBatch(linkInfo)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查了很多次都没有发现问题，断点执行后发现：每次linkInfo的长度都变得很长，就从最开始发现：每次linkInfo都带着上次执行之后的结果，append了现在的结果。</p>\n<p>这本来应该是个很简单的错误，我却看了很久，还是基础知识太薄弱了啊。</p>\n<h2 id=\"java中的变量类型\"><a href=\"#java中的变量类型\" class=\"headerlink\" title=\"java中的变量类型\"></a>java中的变量类型</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Variable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> allClicks=<span class=\"number\">0</span>;    <span class=\"comment\">// 类变量</span></span><br><span class=\"line\">    String str=<span class=\"string\">&quot;hello world&quot;</span>;  <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;  <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h3><p>上边的例子中显然linkInfo是一个实例变量，实例变量的特点有以下：</p>\n<ul>\n<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>\n<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>\n<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>\n<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>\n<li>实例变量可以声明在使用前或者使用后；</li>\n<li>访问修饰符可以修饰实例变量；</li>\n<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私* 有。通过使用访问修饰符可以使实例变量对子类可见；</li>\n<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>\n<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>\n</ul>\n<p>这里主要关注一下第二、第三条：在springboot项目起来之后，这个对象就已经被实例化了，每次调用main方法，实际上linkInfo里边都包含上一次get到的值。所以实际要用的话每次调用main方法，都要置空linkInfo。</p>\n<p>其他的话，访问修饰符其实就是public, private, protect这些。还有一个<a href=\"https://www.cnblogs.com/ChrisMurphy/p/4825906.html\">应用类型变量</a>,这个也要看文章了解一下。</p>\n<h3 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h3><ul>\n<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>\n<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>\n<li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li>\n<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li>\n<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>\n<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li>\n<li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>\n<li>静态变量可以通过：ClassName.VariableName的方式访问。</li>\n<li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>\n</ul>\n<p>理解为静态变量可能会更好理解，总之就是作为常量使用，初始化之后不可改变</p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><ul>\n<li>局部变量声明在方法、构造方法或者语句块中；</li>\n<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>\n<li>访问修饰符不能用于局部变量；</li>\n<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>\n<li>局部变量是在栈上分配的。</li>\n<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>\n</ul>\n<p>局部变量就是在函数中使用的变量，大概是使用最广泛的。</p>\n<hr>\n<p>编码过程中感觉基础真的挺重要，自己的java基础确实比较差，还要多学习··</p>"},{"title":"什么是RPC调用？","date":"2021-03-11T19:02:17.000Z","_content":"","source":"_posts/2021-03-11-什么是RPC调用？.md","raw":"---\ntitle: 什么是RPC调用？\ndate: 2021-03-11 19:02:17\ntags:\ncategories:\n---\n","slug":"什么是RPC调用？","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgme00132h5p68kv0o77","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"初尝装饰者模式","date":"2021-03-17T11:23:59.000Z","_content":"\n装饰模式是从重构以来一直说要用，但是我一直没有搞懂的一个设计模式，今天就借这个机会学习一下什么是装饰模式\n\n先看看别人对对于装饰模式的定义“\n\n\n> 装饰模式又名包装(Wrapper)模式。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。\n\n> 但是纯粹的装饰模式很难找到，大多数的装饰模式的实现都是“半透明”的，而不是完全透明的。换言之，允许装饰模式改变接口，增加新的方法。半透明的装饰模式是介于装饰模式和适配器模式之间的。适配器模式的用意是改变所考虑的类的接口，也可以通过改写一个或几个方法，或增加新的方法来增强或改变所考虑的类的功能。\n\n>大多数的装饰模式实际上是半透明的装饰模式，这样的装饰模式也称做半装饰、半适配器模式。\n\n对继承关系的一个替代方案··为什么要替代继承关系？\n","source":"_posts/2021-03-17-初尝装饰者模式.md","raw":"---\ntitle: 初尝装饰者模式\ndate: 2021-03-17 11:23:59\ntags:\n- 装饰模式\ncategories:\n- 设计模式\n---\n\n装饰模式是从重构以来一直说要用，但是我一直没有搞懂的一个设计模式，今天就借这个机会学习一下什么是装饰模式\n\n先看看别人对对于装饰模式的定义“\n\n\n> 装饰模式又名包装(Wrapper)模式。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。\n\n> 但是纯粹的装饰模式很难找到，大多数的装饰模式的实现都是“半透明”的，而不是完全透明的。换言之，允许装饰模式改变接口，增加新的方法。半透明的装饰模式是介于装饰模式和适配器模式之间的。适配器模式的用意是改变所考虑的类的接口，也可以通过改写一个或几个方法，或增加新的方法来增强或改变所考虑的类的功能。\n\n>大多数的装饰模式实际上是半透明的装饰模式，这样的装饰模式也称做半装饰、半适配器模式。\n\n对继承关系的一个替代方案··为什么要替代继承关系？\n","slug":"初尝装饰者模式","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgof00172h5pgsnz835d","content":"<p>装饰模式是从重构以来一直说要用，但是我一直没有搞懂的一个设计模式，今天就借这个机会学习一下什么是装饰模式</p>\n<p>先看看别人对对于装饰模式的定义“</p>\n<blockquote>\n<p>装饰模式又名包装(Wrapper)模式。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。</p>\n</blockquote>\n<blockquote>\n<p>但是纯粹的装饰模式很难找到，大多数的装饰模式的实现都是“半透明”的，而不是完全透明的。换言之，允许装饰模式改变接口，增加新的方法。半透明的装饰模式是介于装饰模式和适配器模式之间的。适配器模式的用意是改变所考虑的类的接口，也可以通过改写一个或几个方法，或增加新的方法来增强或改变所考虑的类的功能。</p>\n</blockquote>\n<blockquote>\n<p>大多数的装饰模式实际上是半透明的装饰模式，这样的装饰模式也称做半装饰、半适配器模式。</p>\n</blockquote>\n<p>对继承关系的一个替代方案··为什么要替代继承关系？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>装饰模式是从重构以来一直说要用，但是我一直没有搞懂的一个设计模式，今天就借这个机会学习一下什么是装饰模式</p>\n<p>先看看别人对对于装饰模式的定义“</p>\n<blockquote>\n<p>装饰模式又名包装(Wrapper)模式。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。</p>\n</blockquote>\n<blockquote>\n<p>但是纯粹的装饰模式很难找到，大多数的装饰模式的实现都是“半透明”的，而不是完全透明的。换言之，允许装饰模式改变接口，增加新的方法。半透明的装饰模式是介于装饰模式和适配器模式之间的。适配器模式的用意是改变所考虑的类的接口，也可以通过改写一个或几个方法，或增加新的方法来增强或改变所考虑的类的功能。</p>\n</blockquote>\n<blockquote>\n<p>大多数的装饰模式实际上是半透明的装饰模式，这样的装饰模式也称做半装饰、半适配器模式。</p>\n</blockquote>\n<p>对继承关系的一个替代方案··为什么要替代继承关系？</p>\n"},{"title":"选基工具--开发计划(SelFund)","date":"2021-03-17T11:24:28.000Z","_content":"\n这是一个突发奇想的开发计划！\n\n## 缘起\n\n最近买的基金总是跌的厉害，我经过仔细研究，感觉主要还是因为买的基金过于集中，比如买的n只基金的第一重仓股票都是茅台，那茅台一跌不就全完蛋了嘛。\n\n所以我感觉，买基金呢，一定要尽量分散风险，不能买和持有基金过于重合的基金，那还不如买同一只基金。\n\n但是如果不点进基金持仓呢，也不清楚这个基金到底怎么回事，怎么和已有基金做对比呢，所以我觉得可以开发这么一个工具，来帮助选取基金。\n\n## 需求\n\n暂定为两个版本，基础版和进阶版吧。\n\n基础版：\n\n输入当前持有的基金，在输入一只新的基金，展示这只基金和已持有基金中每个基金的相似度（通过持仓向量cos值来去欸的那个）、相同持股的数量\n\n只展示文字即可\n\n进阶版：\n\n输入当前持有的基金，再输入新的基金，给出总体相似度评分（通过持股所在领域来判断）\n\n制作ui界面\n\n## 技术选型\n\n现在自己会的有以下这么几种:\n\njava, springboot,还不太熟练，但是大体ok\n\npython, django 做过东西，想来问题也不大？\n\ngo 不熟练，但是可以试试？\n\n接下来先考虑以下框架吧。肯定是要做接口的。\n\n\n真的还是要开始吧。\n\n现在暂定用java来做吧，毕竟也不是太需要爬虫相关的技能，只是请求接口而已。\n\n框架就是springboot， 暂时还不需要前端框架，只有接口请求就ok，可以考虑用微信接口之类。\n\n数据库就用mysql，挺方便的。明天要设计一下数据库。","source":"_posts/2021-03-17-选基工具-开发计划.md","raw":"---\ntitle: 选基工具--开发计划(SelFund)\ndate: 2021-03-17 11:24:28\ntags:\n- 学习\n- 理财\ncategories:\n- 奇想天动\n---\n\n这是一个突发奇想的开发计划！\n\n## 缘起\n\n最近买的基金总是跌的厉害，我经过仔细研究，感觉主要还是因为买的基金过于集中，比如买的n只基金的第一重仓股票都是茅台，那茅台一跌不就全完蛋了嘛。\n\n所以我感觉，买基金呢，一定要尽量分散风险，不能买和持有基金过于重合的基金，那还不如买同一只基金。\n\n但是如果不点进基金持仓呢，也不清楚这个基金到底怎么回事，怎么和已有基金做对比呢，所以我觉得可以开发这么一个工具，来帮助选取基金。\n\n## 需求\n\n暂定为两个版本，基础版和进阶版吧。\n\n基础版：\n\n输入当前持有的基金，在输入一只新的基金，展示这只基金和已持有基金中每个基金的相似度（通过持仓向量cos值来去欸的那个）、相同持股的数量\n\n只展示文字即可\n\n进阶版：\n\n输入当前持有的基金，再输入新的基金，给出总体相似度评分（通过持股所在领域来判断）\n\n制作ui界面\n\n## 技术选型\n\n现在自己会的有以下这么几种:\n\njava, springboot,还不太熟练，但是大体ok\n\npython, django 做过东西，想来问题也不大？\n\ngo 不熟练，但是可以试试？\n\n接下来先考虑以下框架吧。肯定是要做接口的。\n\n\n真的还是要开始吧。\n\n现在暂定用java来做吧，毕竟也不是太需要爬虫相关的技能，只是请求接口而已。\n\n框架就是springboot， 暂时还不需要前端框架，只有接口请求就ok，可以考虑用微信接口之类。\n\n数据库就用mysql，挺方便的。明天要设计一下数据库。","slug":"选基工具-开发计划","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgoh001b2h5p70a3h8za","content":"<p>这是一个突发奇想的开发计划！</p>\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>最近买的基金总是跌的厉害，我经过仔细研究，感觉主要还是因为买的基金过于集中，比如买的n只基金的第一重仓股票都是茅台，那茅台一跌不就全完蛋了嘛。</p>\n<p>所以我感觉，买基金呢，一定要尽量分散风险，不能买和持有基金过于重合的基金，那还不如买同一只基金。</p>\n<p>但是如果不点进基金持仓呢，也不清楚这个基金到底怎么回事，怎么和已有基金做对比呢，所以我觉得可以开发这么一个工具，来帮助选取基金。</p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>暂定为两个版本，基础版和进阶版吧。</p>\n<p>基础版：</p>\n<p>输入当前持有的基金，在输入一只新的基金，展示这只基金和已持有基金中每个基金的相似度（通过持仓向量cos值来去欸的那个）、相同持股的数量</p>\n<p>只展示文字即可</p>\n<p>进阶版：</p>\n<p>输入当前持有的基金，再输入新的基金，给出总体相似度评分（通过持股所在领域来判断）</p>\n<p>制作ui界面</p>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>现在自己会的有以下这么几种:</p>\n<p>java, springboot,还不太熟练，但是大体ok</p>\n<p>python, django 做过东西，想来问题也不大？</p>\n<p>go 不熟练，但是可以试试？</p>\n<p>接下来先考虑以下框架吧。肯定是要做接口的。</p>\n<p>真的还是要开始吧。</p>\n<p>现在暂定用java来做吧，毕竟也不是太需要爬虫相关的技能，只是请求接口而已。</p>\n<p>框架就是springboot， 暂时还不需要前端框架，只有接口请求就ok，可以考虑用微信接口之类。</p>\n<p>数据库就用mysql，挺方便的。明天要设计一下数据库。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一个突发奇想的开发计划！</p>\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>最近买的基金总是跌的厉害，我经过仔细研究，感觉主要还是因为买的基金过于集中，比如买的n只基金的第一重仓股票都是茅台，那茅台一跌不就全完蛋了嘛。</p>\n<p>所以我感觉，买基金呢，一定要尽量分散风险，不能买和持有基金过于重合的基金，那还不如买同一只基金。</p>\n<p>但是如果不点进基金持仓呢，也不清楚这个基金到底怎么回事，怎么和已有基金做对比呢，所以我觉得可以开发这么一个工具，来帮助选取基金。</p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>暂定为两个版本，基础版和进阶版吧。</p>\n<p>基础版：</p>\n<p>输入当前持有的基金，在输入一只新的基金，展示这只基金和已持有基金中每个基金的相似度（通过持仓向量cos值来去欸的那个）、相同持股的数量</p>\n<p>只展示文字即可</p>\n<p>进阶版：</p>\n<p>输入当前持有的基金，再输入新的基金，给出总体相似度评分（通过持股所在领域来判断）</p>\n<p>制作ui界面</p>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>现在自己会的有以下这么几种:</p>\n<p>java, springboot,还不太熟练，但是大体ok</p>\n<p>python, django 做过东西，想来问题也不大？</p>\n<p>go 不熟练，但是可以试试？</p>\n<p>接下来先考虑以下框架吧。肯定是要做接口的。</p>\n<p>真的还是要开始吧。</p>\n<p>现在暂定用java来做吧，毕竟也不是太需要爬虫相关的技能，只是请求接口而已。</p>\n<p>框架就是springboot， 暂时还不需要前端框架，只有接口请求就ok，可以考虑用微信接口之类。</p>\n<p>数据库就用mysql，挺方便的。明天要设计一下数据库。</p>\n"},{"title":"SelFund 开发计划（1）","date":"2021-03-27T15:00:49.000Z","_content":"\n终于开始计划开发了，第一步先选定框架，和搭建环境\n\n## 框架\n\n原来计划用java，无奈本地没有装java环境，而正好有go的环境，就直接选了go里边star最高的项目： gin\n\nhttps://github.com/gin-gonic/gin\n\n数据库在选择在ubuntu里边装docker，里边再加一个mysql好了。\n\n## 搭建环境\n\ngo的环境搭建就不讲了，这里主要写一下其他方面的东西：\n\n\n### gin&开发相关：\n\n先确保本地环境搞过goproxy代理，然后直接 \n\n    go get -u github.com/gin-gonic/gin\n\n接下来按照quick start里边开始，新建一个example.go，运行的时候如果报错呢，可以按照如下操作\n\n    go mod init gin\n    go mod edit -require github.com/gin-gonic/gin@latest\n\n这个时候就会成功run起来，可以请求一下 *localhost:8080/pin*,就可以看到结果。\n\n如果想要热启动的话，可以参照一下[fresh](https://github.com/gravityblast/fresh)项目：\n\n    go get github.com/pilu/fresh\n    cd project\n    fresh\n\n### docker相关\n\n在ubuntu上安装docker：\n\n    curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n    service docker start\n    docker pull mysql\n    docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n\n接下来就可以用navicat来操作数据库了！\n\n先来建表吧！\n\n首先要存的就是基金的持仓信息*hold_share_info*：\n\n    CREATE DATABASE selfund\n    USE selfund\n    CREATE TABLE hold_share_info\n\n        DROP TABLE IF EXISTS `hold_share_info`;\n    CREATE TABLE `hold_share_info`  (\n      `id` int NOT NULL AUTO_INCREMENT,\n      `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\n      `hold_list` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `stock` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `bond` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `cash` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `total` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `update_time` datetime NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n      PRIMARY KEY (`id`) USING BTREE\n    ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;\n    \n    SET FOREIGN_KEY_CHECKS = 1;\n\n\n\n\n### 数据来源\n\n[小熊同学](https://www.doctorxiong.club/)\n\n","source":"_posts/2021-03-27-SelFund-开发计划（1）.md","raw":"---\ntitle: SelFund 开发计划（1）\ndate: 2021-03-27 15:00:49\ntags:\n- selFund\ncategories:\n- 开发计划\n---\n\n终于开始计划开发了，第一步先选定框架，和搭建环境\n\n## 框架\n\n原来计划用java，无奈本地没有装java环境，而正好有go的环境，就直接选了go里边star最高的项目： gin\n\nhttps://github.com/gin-gonic/gin\n\n数据库在选择在ubuntu里边装docker，里边再加一个mysql好了。\n\n## 搭建环境\n\ngo的环境搭建就不讲了，这里主要写一下其他方面的东西：\n\n\n### gin&开发相关：\n\n先确保本地环境搞过goproxy代理，然后直接 \n\n    go get -u github.com/gin-gonic/gin\n\n接下来按照quick start里边开始，新建一个example.go，运行的时候如果报错呢，可以按照如下操作\n\n    go mod init gin\n    go mod edit -require github.com/gin-gonic/gin@latest\n\n这个时候就会成功run起来，可以请求一下 *localhost:8080/pin*,就可以看到结果。\n\n如果想要热启动的话，可以参照一下[fresh](https://github.com/gravityblast/fresh)项目：\n\n    go get github.com/pilu/fresh\n    cd project\n    fresh\n\n### docker相关\n\n在ubuntu上安装docker：\n\n    curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n    service docker start\n    docker pull mysql\n    docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n\n接下来就可以用navicat来操作数据库了！\n\n先来建表吧！\n\n首先要存的就是基金的持仓信息*hold_share_info*：\n\n    CREATE DATABASE selfund\n    USE selfund\n    CREATE TABLE hold_share_info\n\n        DROP TABLE IF EXISTS `hold_share_info`;\n    CREATE TABLE `hold_share_info`  (\n      `id` int NOT NULL AUTO_INCREMENT,\n      `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\n      `hold_list` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `stock` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `bond` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `cash` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `total` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n      `update_time` datetime NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n      PRIMARY KEY (`id`) USING BTREE\n    ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;\n    \n    SET FOREIGN_KEY_CHECKS = 1;\n\n\n\n\n### 数据来源\n\n[小熊同学](https://www.doctorxiong.club/)\n\n","slug":"SelFund-开发计划（1）","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgqf001e2h5pfo7hhshk","content":"<p>终于开始计划开发了，第一步先选定框架，和搭建环境</p>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><p>原来计划用java，无奈本地没有装java环境，而正好有go的环境，就直接选了go里边star最高的项目： gin</p>\n<p><a href=\"https://github.com/gin-gonic/gin\">https://github.com/gin-gonic/gin</a></p>\n<p>数据库在选择在ubuntu里边装docker，里边再加一个mysql好了。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><p>go的环境搭建就不讲了，这里主要写一下其他方面的东西：</p>\n<h3 id=\"gin-amp-开发相关：\"><a href=\"#gin-amp-开发相关：\" class=\"headerlink\" title=\"gin&amp;开发相关：\"></a>gin&amp;开发相关：</h3><p>先确保本地环境搞过goproxy代理，然后直接 </p>\n<pre><code>go get -u github.com/gin-gonic/gin\n</code></pre>\n<p>接下来按照quick start里边开始，新建一个example.go，运行的时候如果报错呢，可以按照如下操作</p>\n<pre><code>go mod init gin\ngo mod edit -require github.com/gin-gonic/gin@latest\n</code></pre>\n<p>这个时候就会成功run起来，可以请求一下 <em>localhost:8080/pin</em>,就可以看到结果。</p>\n<p>如果想要热启动的话，可以参照一下<a href=\"https://github.com/gravityblast/fresh\">fresh</a>项目：</p>\n<pre><code>go get github.com/pilu/fresh\ncd project\nfresh\n</code></pre>\n<h3 id=\"docker相关\"><a href=\"#docker相关\" class=\"headerlink\" title=\"docker相关\"></a>docker相关</h3><p>在ubuntu上安装docker：</p>\n<pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\nservice docker start\ndocker pull mysql\ndocker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n</code></pre>\n<p>接下来就可以用navicat来操作数据库了！</p>\n<p>先来建表吧！</p>\n<p>首先要存的就是基金的持仓信息<em>hold_share_info</em>：</p>\n<pre><code>CREATE DATABASE selfund\nUSE selfund\nCREATE TABLE hold_share_info\n\n    DROP TABLE IF EXISTS `hold_share_info`;\nCREATE TABLE `hold_share_info`  (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\n  `hold_list` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `stock` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `bond` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `cash` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `total` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `update_time` datetime NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;\n\nSET FOREIGN_KEY_CHECKS = 1;\n</code></pre>\n<h3 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h3><p><a href=\"https://www.doctorxiong.club/\">小熊同学</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于开始计划开发了，第一步先选定框架，和搭建环境</p>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><p>原来计划用java，无奈本地没有装java环境，而正好有go的环境，就直接选了go里边star最高的项目： gin</p>\n<p><a href=\"https://github.com/gin-gonic/gin\">https://github.com/gin-gonic/gin</a></p>\n<p>数据库在选择在ubuntu里边装docker，里边再加一个mysql好了。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><p>go的环境搭建就不讲了，这里主要写一下其他方面的东西：</p>\n<h3 id=\"gin-amp-开发相关：\"><a href=\"#gin-amp-开发相关：\" class=\"headerlink\" title=\"gin&amp;开发相关：\"></a>gin&amp;开发相关：</h3><p>先确保本地环境搞过goproxy代理，然后直接 </p>\n<pre><code>go get -u github.com/gin-gonic/gin\n</code></pre>\n<p>接下来按照quick start里边开始，新建一个example.go，运行的时候如果报错呢，可以按照如下操作</p>\n<pre><code>go mod init gin\ngo mod edit -require github.com/gin-gonic/gin@latest\n</code></pre>\n<p>这个时候就会成功run起来，可以请求一下 <em>localhost:8080/pin</em>,就可以看到结果。</p>\n<p>如果想要热启动的话，可以参照一下<a href=\"https://github.com/gravityblast/fresh\">fresh</a>项目：</p>\n<pre><code>go get github.com/pilu/fresh\ncd project\nfresh\n</code></pre>\n<h3 id=\"docker相关\"><a href=\"#docker相关\" class=\"headerlink\" title=\"docker相关\"></a>docker相关</h3><p>在ubuntu上安装docker：</p>\n<pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\nservice docker start\ndocker pull mysql\ndocker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n</code></pre>\n<p>接下来就可以用navicat来操作数据库了！</p>\n<p>先来建表吧！</p>\n<p>首先要存的就是基金的持仓信息<em>hold_share_info</em>：</p>\n<pre><code>CREATE DATABASE selfund\nUSE selfund\nCREATE TABLE hold_share_info\n\n    DROP TABLE IF EXISTS `hold_share_info`;\nCREATE TABLE `hold_share_info`  (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\n  `hold_list` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `stock` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `bond` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `cash` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `total` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,\n  `update_time` datetime NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;\n\nSET FOREIGN_KEY_CHECKS = 1;\n</code></pre>\n<h3 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h3><p><a href=\"https://www.doctorxiong.club/\">小熊同学</a></p>\n"},{"title":"java中父类object与子类object的转换","date":"2021-04-16T16:37:57.000Z","_content":"\n今天写代码的时候有个小需求，需要将父类转换为子类，我也没想太多，就直接开干了，以下是示例代码：\n\n```java\n// 父类\npublic clas Parent {\n    private String attr1;\n}\n//子类\npublic clas Kid extends Parent {\n    private String attr2;\n}\n```\n<!--more-->\n接下来在一个操作子类的对象里边需要先获取到子类，再转换为父类操作，我也没想太多，就这么写了\n\n```java\nParent parent  = new Parent();\n(kid) parent.setAttr2(null)\n````\n\n\n刚开始感觉好像也没有问题嘛，结果运行的时候报了错：**ClassCastException**\n\n查了以下发现java中不允许父类向子类转换，因为父类对子类并不存在is a的关系，允许以下两种情况：\n\n* 子类转换为父类\n* 子类转换为父类之后，再转换为子类\n\n但是又要求父类转换为子类的话，要怎么办呢？一般有两种方法\n\n* 重新生成一个子类，将父类中的值赋给子类\n* 使用json来帮助转换：\n\n\n\n    ```java\n    import com.alibaba.fastjson.JSON;\n    Parent parent = new Parent();\n    String parentJson= JSON.toJSONString(parent);\n    Kid kid =  JSON.parseObject(parentJson, Kid.class);\n    ```\n","source":"_posts/2021-04-16-java中父类object与子类object的转换.md","raw":"---\ntitle: java中父类object与子类object的转换\ndate: 2021-04-16 16:37:57\ntags:\n- java\n- 语法\ncategories:\n- java相关\n\n---\n\n今天写代码的时候有个小需求，需要将父类转换为子类，我也没想太多，就直接开干了，以下是示例代码：\n\n```java\n// 父类\npublic clas Parent {\n    private String attr1;\n}\n//子类\npublic clas Kid extends Parent {\n    private String attr2;\n}\n```\n<!--more-->\n接下来在一个操作子类的对象里边需要先获取到子类，再转换为父类操作，我也没想太多，就这么写了\n\n```java\nParent parent  = new Parent();\n(kid) parent.setAttr2(null)\n````\n\n\n刚开始感觉好像也没有问题嘛，结果运行的时候报了错：**ClassCastException**\n\n查了以下发现java中不允许父类向子类转换，因为父类对子类并不存在is a的关系，允许以下两种情况：\n\n* 子类转换为父类\n* 子类转换为父类之后，再转换为子类\n\n但是又要求父类转换为子类的话，要怎么办呢？一般有两种方法\n\n* 重新生成一个子类，将父类中的值赋给子类\n* 使用json来帮助转换：\n\n\n\n    ```java\n    import com.alibaba.fastjson.JSON;\n    Parent parent = new Parent();\n    String parentJson= JSON.toJSONString(parent);\n    Kid kid =  JSON.parseObject(parentJson, Kid.class);\n    ```\n","slug":"java中父类object与子类object的转换","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgqv001h2h5p17xidwp9","content":"<p>今天写代码的时候有个小需求，需要将父类转换为子类，我也没想太多，就直接开干了，以下是示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> clas Parent &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String attr1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> clas Kid extends Parent &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String attr2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>接下来在一个操作子类的对象里边需要先获取到子类，再转换为父类操作，我也没想太多，就这么写了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parent parent  = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">(kid) parent.setAttr2(<span class=\"keyword\">null</span>)</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">刚开始感觉好像也没有问题嘛，结果运行的时候报了错：**ClassCastException**</span><br><span class=\"line\"></span><br><span class=\"line\">查了以下发现java中不允许父类向子类转换，因为父类对子类并不存在is a的关系，允许以下两种情况：</span><br><span class=\"line\"></span><br><span class=\"line\">* 子类转换为父类</span><br><span class=\"line\">* 子类转换为父类之后，再转换为子类</span><br><span class=\"line\"></span><br><span class=\"line\">但是又要求父类转换为子类的话，要怎么办呢？一般有两种方法</span><br><span class=\"line\"></span><br><span class=\"line\">* 重新生成一个子类，将父类中的值赋给子类</span><br><span class=\"line\">* 使用json来帮助转换：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ```java</span><br><span class=\"line\">    <span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\">    Parent parent = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">    String parentJson= JSON.toJSONString(parent);</span><br><span class=\"line\">    Kid kid =  JSON.parseObject(parentJson, Kid.class);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>今天写代码的时候有个小需求，需要将父类转换为子类，我也没想太多，就直接开干了，以下是示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> clas Parent &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String attr1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> clas Kid extends Parent &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String attr2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>接下来在一个操作子类的对象里边需要先获取到子类，再转换为父类操作，我也没想太多，就这么写了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parent parent  = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">(kid) parent.setAttr2(<span class=\"keyword\">null</span>)</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">刚开始感觉好像也没有问题嘛，结果运行的时候报了错：**ClassCastException**</span><br><span class=\"line\"></span><br><span class=\"line\">查了以下发现java中不允许父类向子类转换，因为父类对子类并不存在is a的关系，允许以下两种情况：</span><br><span class=\"line\"></span><br><span class=\"line\">* 子类转换为父类</span><br><span class=\"line\">* 子类转换为父类之后，再转换为子类</span><br><span class=\"line\"></span><br><span class=\"line\">但是又要求父类转换为子类的话，要怎么办呢？一般有两种方法</span><br><span class=\"line\"></span><br><span class=\"line\">* 重新生成一个子类，将父类中的值赋给子类</span><br><span class=\"line\">* 使用json来帮助转换：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ```java</span><br><span class=\"line\">    <span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\">    Parent parent = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">    String parentJson= JSON.toJSONString(parent);</span><br><span class=\"line\">    Kid kid =  JSON.parseObject(parentJson, Kid.class);</span><br></pre></td></tr></table></figure>"},{"title":"redis能不能作为消息队列？","date":"2021-04-22T19:00:38.000Z","_content":"\n昨天晚上睡觉之前看到一篇我觉得很好的文章，文章标题是[把 Redis 当作队列来用，真的合适吗？](https://mp.weixin.qq.com/s/QQTG7RIOgSvSIueTqOHwww)\n\n读完之后感觉好像写的很好，我在这里大致总结一下，主要有以下几个总结点\n\n1. 消息队列用来做什么？\n2. 用redis来做消息队列有什么方法？\n3. 为什么用redis来做消息队列/不做消息队列？\n4. 关于这一点的思考\n\n<!--more-->\n---\n## 消息队列是用来做什么的？\n\n消息队列是一个存放消息的容器，需要使用消息时可以取出消息供使用，有以下几个好处：\n\n* 异步处理提高系统性能，削峰\n* 降低系统耦合性\n\n常用的消息队列有 kafka, activeMQ, rabbitMQ, rocketMQ\n\n消息队列类似与先进先出的queue数据结构，在消息队列中我们可能需要考虑以下问题：\n\n* 消息是否有可能被重复消费？\n* 消息是否有可能丢失？：在生产者处丢失、在传输过程中丢失、消费者处丢失\n* 多消费者的情况下如何保证每个消费者都消费到了消息？\n* 消费顺序如何保证正确？\n ······\n\n可见引入消息队列也会使得系统可用性降低、复杂性提高、一致性处理复杂····\n\nredis是一个内存数据库，在某种程度上也可以用来做消息队列，接下来我们详细见讲一讲\n\n## redis怎么做消息队列？\n\n### 最简单的方法 List\n\nList是redis中的一个数据类型，底层实现是一个列表，直接如下操作就可以当作消息队列：\n\n    ## 生产者发布消息：\n    127.0.0.1:6379> LPUSH queue msg1\n    (integer) 1\n    127.0.0.1:6379> LPUSH queue msg2\n    (integer) 2\n\n    消费者这一侧，使用 RPOP 拉取消息：\n    127.0.0.1:6379> RPOP queue\n    \"msg1\"\n    127.0.0.1:6379> RPOP queue\n    \"msg2\"\n\n这么做非常好理解，一个放数据进来，一个取数据，但是会带来什么问题呢？\n\n没有一个消息提醒机制来告诉我们有消息进来了，所以我们需要在消费者处写一个死循环，不断的从队列中拉取数据：\n\n    while true:\n        msg = redis.rpop(\"queue\")\n        // 没有消息，继续循环\n        if msg == null:\n            continue\n        // 处理消息\n        handle(msg)\n\n如果没有数据，那么就会造成CPU空转，如果不想要CPU空转，那就要写一个休眠时间，每隔固定时间去请求数据。这样又会引入新的问题：休眠时来消息，会造成处理消息延迟。也就是说，消息延迟和CPU空转二者是一个鱼与熊掌不可兼得的问题。\n\n### 更高端的方式 BRPOP/BLPOP\n\n如果队列为空，消费者就处于阻塞状态等待，有新消息过来，就通知消费者进行处理。\n\n    while true:\n        // 没消息阻塞等待，0表示不设置超时时间\n        msg = redis.brpop(\"queue\", 0)\n        if msg == null:\n            continue\n        // 处理消息\n        handle(msg)\n\n这样就避免了上边的问题，但是缺点呢：不支持重复消费->不支持多个消费者消费同一批数据， 消息可能会丢失（无法重新消费）\n\n### 发布/订阅模型 pub/sub\n\n这个模型有点像BRPOP/BLPOP的进阶版本，这种模型可以解决一个问题：重复订阅\n\n它支持阻塞式拉取消息，可以让多组消费者消费同一个生产者生产的数据\n\n也提供了匹配订阅模式，可以使一个消费者订阅来自多个生产者的数据。\n\n缺点在于：可能会丢数据：消费者下线、redis宕机、消息堆积···\n\n造成整个缺点的原因在于\n* pub/sub整个过程中消息是实时转发的，没有消息存储。使得消费者必须先订阅队列，生产者才可以发布消息。\n* 读数据的buffer有大小限制，如果读取速度不匹配，buffer超过配置的大小，redis就会强制把消费者踢下线\n\n### 趋于成熟的队列 Stream\n\nredis5.0中，作者定义了一个新的数据类型Stream\n\nStream比较基础的指令有：\n\n* XADD 发布消息\n* XREAD 读取消息，如果要读上一条消息，要传入上一条消息的id， 读取消息的时候也可以加入BLOCK参数来支持阻塞式拉取消息\n* XGROUP/XREADGROUP 创建消费者组/指定消费者组下开启消费者拉去消息（可以让多个消费者消费同一批消息）\n* XACK 消费者处理完消息之后，使用XACK命令告诉redis这条数据被消费了，redis会标记这条数据处理完成（来解决丢数据的问题）\n\nStream是一个数据类型，会写到RDB和AOD中做数据持久化，就可以保证不在redis中丢数据\n\n消息堆积时怎么处理？ redis会丢弃掉就消息，保留固定长度的新消息\n\n## redis作为消息队列还有什么问题？\n\n消息队列的两个重要问题： 1 不丢失消息  2 消息可以堆积\n\n由于redis本身持久化的机制，可能会导致写消息的时候数据丢失，专业的消息中间件采用多集群的方式来规避这个问题\n\nredis面对消息积压只能丢失一定的数据，而专业的消息中间件则将数据保存在磁盘上，比内存的空间要大很多。\n\nredis的优点： 部署、运维轻量\n\n## 总结\n\nredis做消息队列还是适合与轻量的场景。\n\n每个工具都有它的优劣，在技术选型的时候更要注意分析具体的场景：是否可以实现业务功能、是否可以hold住对应的工具···\n\n任重道远··","source":"_posts/2021-04-22-redis能不能作为消息队列？.md","raw":"---\ntitle: redis能不能作为消息队列？\ndate: 2021-04-22 19:00:38\ntags:\n- 转载\ncategories:\n- 指南\n---\n\n昨天晚上睡觉之前看到一篇我觉得很好的文章，文章标题是[把 Redis 当作队列来用，真的合适吗？](https://mp.weixin.qq.com/s/QQTG7RIOgSvSIueTqOHwww)\n\n读完之后感觉好像写的很好，我在这里大致总结一下，主要有以下几个总结点\n\n1. 消息队列用来做什么？\n2. 用redis来做消息队列有什么方法？\n3. 为什么用redis来做消息队列/不做消息队列？\n4. 关于这一点的思考\n\n<!--more-->\n---\n## 消息队列是用来做什么的？\n\n消息队列是一个存放消息的容器，需要使用消息时可以取出消息供使用，有以下几个好处：\n\n* 异步处理提高系统性能，削峰\n* 降低系统耦合性\n\n常用的消息队列有 kafka, activeMQ, rabbitMQ, rocketMQ\n\n消息队列类似与先进先出的queue数据结构，在消息队列中我们可能需要考虑以下问题：\n\n* 消息是否有可能被重复消费？\n* 消息是否有可能丢失？：在生产者处丢失、在传输过程中丢失、消费者处丢失\n* 多消费者的情况下如何保证每个消费者都消费到了消息？\n* 消费顺序如何保证正确？\n ······\n\n可见引入消息队列也会使得系统可用性降低、复杂性提高、一致性处理复杂····\n\nredis是一个内存数据库，在某种程度上也可以用来做消息队列，接下来我们详细见讲一讲\n\n## redis怎么做消息队列？\n\n### 最简单的方法 List\n\nList是redis中的一个数据类型，底层实现是一个列表，直接如下操作就可以当作消息队列：\n\n    ## 生产者发布消息：\n    127.0.0.1:6379> LPUSH queue msg1\n    (integer) 1\n    127.0.0.1:6379> LPUSH queue msg2\n    (integer) 2\n\n    消费者这一侧，使用 RPOP 拉取消息：\n    127.0.0.1:6379> RPOP queue\n    \"msg1\"\n    127.0.0.1:6379> RPOP queue\n    \"msg2\"\n\n这么做非常好理解，一个放数据进来，一个取数据，但是会带来什么问题呢？\n\n没有一个消息提醒机制来告诉我们有消息进来了，所以我们需要在消费者处写一个死循环，不断的从队列中拉取数据：\n\n    while true:\n        msg = redis.rpop(\"queue\")\n        // 没有消息，继续循环\n        if msg == null:\n            continue\n        // 处理消息\n        handle(msg)\n\n如果没有数据，那么就会造成CPU空转，如果不想要CPU空转，那就要写一个休眠时间，每隔固定时间去请求数据。这样又会引入新的问题：休眠时来消息，会造成处理消息延迟。也就是说，消息延迟和CPU空转二者是一个鱼与熊掌不可兼得的问题。\n\n### 更高端的方式 BRPOP/BLPOP\n\n如果队列为空，消费者就处于阻塞状态等待，有新消息过来，就通知消费者进行处理。\n\n    while true:\n        // 没消息阻塞等待，0表示不设置超时时间\n        msg = redis.brpop(\"queue\", 0)\n        if msg == null:\n            continue\n        // 处理消息\n        handle(msg)\n\n这样就避免了上边的问题，但是缺点呢：不支持重复消费->不支持多个消费者消费同一批数据， 消息可能会丢失（无法重新消费）\n\n### 发布/订阅模型 pub/sub\n\n这个模型有点像BRPOP/BLPOP的进阶版本，这种模型可以解决一个问题：重复订阅\n\n它支持阻塞式拉取消息，可以让多组消费者消费同一个生产者生产的数据\n\n也提供了匹配订阅模式，可以使一个消费者订阅来自多个生产者的数据。\n\n缺点在于：可能会丢数据：消费者下线、redis宕机、消息堆积···\n\n造成整个缺点的原因在于\n* pub/sub整个过程中消息是实时转发的，没有消息存储。使得消费者必须先订阅队列，生产者才可以发布消息。\n* 读数据的buffer有大小限制，如果读取速度不匹配，buffer超过配置的大小，redis就会强制把消费者踢下线\n\n### 趋于成熟的队列 Stream\n\nredis5.0中，作者定义了一个新的数据类型Stream\n\nStream比较基础的指令有：\n\n* XADD 发布消息\n* XREAD 读取消息，如果要读上一条消息，要传入上一条消息的id， 读取消息的时候也可以加入BLOCK参数来支持阻塞式拉取消息\n* XGROUP/XREADGROUP 创建消费者组/指定消费者组下开启消费者拉去消息（可以让多个消费者消费同一批消息）\n* XACK 消费者处理完消息之后，使用XACK命令告诉redis这条数据被消费了，redis会标记这条数据处理完成（来解决丢数据的问题）\n\nStream是一个数据类型，会写到RDB和AOD中做数据持久化，就可以保证不在redis中丢数据\n\n消息堆积时怎么处理？ redis会丢弃掉就消息，保留固定长度的新消息\n\n## redis作为消息队列还有什么问题？\n\n消息队列的两个重要问题： 1 不丢失消息  2 消息可以堆积\n\n由于redis本身持久化的机制，可能会导致写消息的时候数据丢失，专业的消息中间件采用多集群的方式来规避这个问题\n\nredis面对消息积压只能丢失一定的数据，而专业的消息中间件则将数据保存在磁盘上，比内存的空间要大很多。\n\nredis的优点： 部署、运维轻量\n\n## 总结\n\nredis做消息队列还是适合与轻量的场景。\n\n每个工具都有它的优劣，在技术选型的时候更要注意分析具体的场景：是否可以实现业务功能、是否可以hold住对应的工具···\n\n任重道远··","slug":"redis能不能作为消息队列？","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzguk001j2h5p53k54qro","content":"<p>昨天晚上睡觉之前看到一篇我觉得很好的文章，文章标题是<a href=\"https://mp.weixin.qq.com/s/QQTG7RIOgSvSIueTqOHwww\">把 Redis 当作队列来用，真的合适吗？</a></p>\n<p>读完之后感觉好像写的很好，我在这里大致总结一下，主要有以下几个总结点</p>\n<ol>\n<li>消息队列用来做什么？</li>\n<li>用redis来做消息队列有什么方法？</li>\n<li>为什么用redis来做消息队列/不做消息队列？</li>\n<li>关于这一点的思考</li>\n</ol>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"消息队列是用来做什么的？\"><a href=\"#消息队列是用来做什么的？\" class=\"headerlink\" title=\"消息队列是用来做什么的？\"></a>消息队列是用来做什么的？</h2><p>消息队列是一个存放消息的容器，需要使用消息时可以取出消息供使用，有以下几个好处：</p>\n<ul>\n<li>异步处理提高系统性能，削峰</li>\n<li>降低系统耦合性</li>\n</ul>\n<p>常用的消息队列有 kafka, activeMQ, rabbitMQ, rocketMQ</p>\n<p>消息队列类似与先进先出的queue数据结构，在消息队列中我们可能需要考虑以下问题：</p>\n<ul>\n<li>消息是否有可能被重复消费？</li>\n<li>消息是否有可能丢失？：在生产者处丢失、在传输过程中丢失、消费者处丢失</li>\n<li>多消费者的情况下如何保证每个消费者都消费到了消息？</li>\n<li>消费顺序如何保证正确？<br>······</li>\n</ul>\n<p>可见引入消息队列也会使得系统可用性降低、复杂性提高、一致性处理复杂····</p>\n<p>redis是一个内存数据库，在某种程度上也可以用来做消息队列，接下来我们详细见讲一讲</p>\n<h2 id=\"redis怎么做消息队列？\"><a href=\"#redis怎么做消息队列？\" class=\"headerlink\" title=\"redis怎么做消息队列？\"></a>redis怎么做消息队列？</h2><h3 id=\"最简单的方法-List\"><a href=\"#最简单的方法-List\" class=\"headerlink\" title=\"最简单的方法 List\"></a>最简单的方法 List</h3><p>List是redis中的一个数据类型，底层实现是一个列表，直接如下操作就可以当作消息队列：</p>\n<pre><code>## 生产者发布消息：\n127.0.0.1:6379&gt; LPUSH queue msg1\n(integer) 1\n127.0.0.1:6379&gt; LPUSH queue msg2\n(integer) 2\n\n消费者这一侧，使用 RPOP 拉取消息：\n127.0.0.1:6379&gt; RPOP queue\n&quot;msg1&quot;\n127.0.0.1:6379&gt; RPOP queue\n&quot;msg2&quot;\n</code></pre>\n<p>这么做非常好理解，一个放数据进来，一个取数据，但是会带来什么问题呢？</p>\n<p>没有一个消息提醒机制来告诉我们有消息进来了，所以我们需要在消费者处写一个死循环，不断的从队列中拉取数据：</p>\n<pre><code>while true:\n    msg = redis.rpop(&quot;queue&quot;)\n    // 没有消息，继续循环\n    if msg == null:\n        continue\n    // 处理消息\n    handle(msg)\n</code></pre>\n<p>如果没有数据，那么就会造成CPU空转，如果不想要CPU空转，那就要写一个休眠时间，每隔固定时间去请求数据。这样又会引入新的问题：休眠时来消息，会造成处理消息延迟。也就是说，消息延迟和CPU空转二者是一个鱼与熊掌不可兼得的问题。</p>\n<h3 id=\"更高端的方式-BRPOP-BLPOP\"><a href=\"#更高端的方式-BRPOP-BLPOP\" class=\"headerlink\" title=\"更高端的方式 BRPOP/BLPOP\"></a>更高端的方式 BRPOP/BLPOP</h3><p>如果队列为空，消费者就处于阻塞状态等待，有新消息过来，就通知消费者进行处理。</p>\n<pre><code>while true:\n    // 没消息阻塞等待，0表示不设置超时时间\n    msg = redis.brpop(&quot;queue&quot;, 0)\n    if msg == null:\n        continue\n    // 处理消息\n    handle(msg)\n</code></pre>\n<p>这样就避免了上边的问题，但是缺点呢：不支持重复消费-&gt;不支持多个消费者消费同一批数据， 消息可能会丢失（无法重新消费）</p>\n<h3 id=\"发布-订阅模型-pub-sub\"><a href=\"#发布-订阅模型-pub-sub\" class=\"headerlink\" title=\"发布/订阅模型 pub/sub\"></a>发布/订阅模型 pub/sub</h3><p>这个模型有点像BRPOP/BLPOP的进阶版本，这种模型可以解决一个问题：重复订阅</p>\n<p>它支持阻塞式拉取消息，可以让多组消费者消费同一个生产者生产的数据</p>\n<p>也提供了匹配订阅模式，可以使一个消费者订阅来自多个生产者的数据。</p>\n<p>缺点在于：可能会丢数据：消费者下线、redis宕机、消息堆积···</p>\n<p>造成整个缺点的原因在于</p>\n<ul>\n<li>pub/sub整个过程中消息是实时转发的，没有消息存储。使得消费者必须先订阅队列，生产者才可以发布消息。</li>\n<li>读数据的buffer有大小限制，如果读取速度不匹配，buffer超过配置的大小，redis就会强制把消费者踢下线</li>\n</ul>\n<h3 id=\"趋于成熟的队列-Stream\"><a href=\"#趋于成熟的队列-Stream\" class=\"headerlink\" title=\"趋于成熟的队列 Stream\"></a>趋于成熟的队列 Stream</h3><p>redis5.0中，作者定义了一个新的数据类型Stream</p>\n<p>Stream比较基础的指令有：</p>\n<ul>\n<li>XADD 发布消息</li>\n<li>XREAD 读取消息，如果要读上一条消息，要传入上一条消息的id， 读取消息的时候也可以加入BLOCK参数来支持阻塞式拉取消息</li>\n<li>XGROUP/XREADGROUP 创建消费者组/指定消费者组下开启消费者拉去消息（可以让多个消费者消费同一批消息）</li>\n<li>XACK 消费者处理完消息之后，使用XACK命令告诉redis这条数据被消费了，redis会标记这条数据处理完成（来解决丢数据的问题）</li>\n</ul>\n<p>Stream是一个数据类型，会写到RDB和AOD中做数据持久化，就可以保证不在redis中丢数据</p>\n<p>消息堆积时怎么处理？ redis会丢弃掉就消息，保留固定长度的新消息</p>\n<h2 id=\"redis作为消息队列还有什么问题？\"><a href=\"#redis作为消息队列还有什么问题？\" class=\"headerlink\" title=\"redis作为消息队列还有什么问题？\"></a>redis作为消息队列还有什么问题？</h2><p>消息队列的两个重要问题： 1 不丢失消息  2 消息可以堆积</p>\n<p>由于redis本身持久化的机制，可能会导致写消息的时候数据丢失，专业的消息中间件采用多集群的方式来规避这个问题</p>\n<p>redis面对消息积压只能丢失一定的数据，而专业的消息中间件则将数据保存在磁盘上，比内存的空间要大很多。</p>\n<p>redis的优点： 部署、运维轻量</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>redis做消息队列还是适合与轻量的场景。</p>\n<p>每个工具都有它的优劣，在技术选型的时候更要注意分析具体的场景：是否可以实现业务功能、是否可以hold住对应的工具···</p>\n<p>任重道远··</p>\n","site":{"data":{}},"excerpt":"<p>昨天晚上睡觉之前看到一篇我觉得很好的文章，文章标题是<a href=\"https://mp.weixin.qq.com/s/QQTG7RIOgSvSIueTqOHwww\">把 Redis 当作队列来用，真的合适吗？</a></p>\n<p>读完之后感觉好像写的很好，我在这里大致总结一下，主要有以下几个总结点</p>\n<ol>\n<li>消息队列用来做什么？</li>\n<li>用redis来做消息队列有什么方法？</li>\n<li>为什么用redis来做消息队列/不做消息队列？</li>\n<li>关于这一点的思考</li>\n</ol>","more":"<hr>\n<h2 id=\"消息队列是用来做什么的？\"><a href=\"#消息队列是用来做什么的？\" class=\"headerlink\" title=\"消息队列是用来做什么的？\"></a>消息队列是用来做什么的？</h2><p>消息队列是一个存放消息的容器，需要使用消息时可以取出消息供使用，有以下几个好处：</p>\n<ul>\n<li>异步处理提高系统性能，削峰</li>\n<li>降低系统耦合性</li>\n</ul>\n<p>常用的消息队列有 kafka, activeMQ, rabbitMQ, rocketMQ</p>\n<p>消息队列类似与先进先出的queue数据结构，在消息队列中我们可能需要考虑以下问题：</p>\n<ul>\n<li>消息是否有可能被重复消费？</li>\n<li>消息是否有可能丢失？：在生产者处丢失、在传输过程中丢失、消费者处丢失</li>\n<li>多消费者的情况下如何保证每个消费者都消费到了消息？</li>\n<li>消费顺序如何保证正确？<br>······</li>\n</ul>\n<p>可见引入消息队列也会使得系统可用性降低、复杂性提高、一致性处理复杂····</p>\n<p>redis是一个内存数据库，在某种程度上也可以用来做消息队列，接下来我们详细见讲一讲</p>\n<h2 id=\"redis怎么做消息队列？\"><a href=\"#redis怎么做消息队列？\" class=\"headerlink\" title=\"redis怎么做消息队列？\"></a>redis怎么做消息队列？</h2><h3 id=\"最简单的方法-List\"><a href=\"#最简单的方法-List\" class=\"headerlink\" title=\"最简单的方法 List\"></a>最简单的方法 List</h3><p>List是redis中的一个数据类型，底层实现是一个列表，直接如下操作就可以当作消息队列：</p>\n<pre><code>## 生产者发布消息：\n127.0.0.1:6379&gt; LPUSH queue msg1\n(integer) 1\n127.0.0.1:6379&gt; LPUSH queue msg2\n(integer) 2\n\n消费者这一侧，使用 RPOP 拉取消息：\n127.0.0.1:6379&gt; RPOP queue\n&quot;msg1&quot;\n127.0.0.1:6379&gt; RPOP queue\n&quot;msg2&quot;\n</code></pre>\n<p>这么做非常好理解，一个放数据进来，一个取数据，但是会带来什么问题呢？</p>\n<p>没有一个消息提醒机制来告诉我们有消息进来了，所以我们需要在消费者处写一个死循环，不断的从队列中拉取数据：</p>\n<pre><code>while true:\n    msg = redis.rpop(&quot;queue&quot;)\n    // 没有消息，继续循环\n    if msg == null:\n        continue\n    // 处理消息\n    handle(msg)\n</code></pre>\n<p>如果没有数据，那么就会造成CPU空转，如果不想要CPU空转，那就要写一个休眠时间，每隔固定时间去请求数据。这样又会引入新的问题：休眠时来消息，会造成处理消息延迟。也就是说，消息延迟和CPU空转二者是一个鱼与熊掌不可兼得的问题。</p>\n<h3 id=\"更高端的方式-BRPOP-BLPOP\"><a href=\"#更高端的方式-BRPOP-BLPOP\" class=\"headerlink\" title=\"更高端的方式 BRPOP/BLPOP\"></a>更高端的方式 BRPOP/BLPOP</h3><p>如果队列为空，消费者就处于阻塞状态等待，有新消息过来，就通知消费者进行处理。</p>\n<pre><code>while true:\n    // 没消息阻塞等待，0表示不设置超时时间\n    msg = redis.brpop(&quot;queue&quot;, 0)\n    if msg == null:\n        continue\n    // 处理消息\n    handle(msg)\n</code></pre>\n<p>这样就避免了上边的问题，但是缺点呢：不支持重复消费-&gt;不支持多个消费者消费同一批数据， 消息可能会丢失（无法重新消费）</p>\n<h3 id=\"发布-订阅模型-pub-sub\"><a href=\"#发布-订阅模型-pub-sub\" class=\"headerlink\" title=\"发布/订阅模型 pub/sub\"></a>发布/订阅模型 pub/sub</h3><p>这个模型有点像BRPOP/BLPOP的进阶版本，这种模型可以解决一个问题：重复订阅</p>\n<p>它支持阻塞式拉取消息，可以让多组消费者消费同一个生产者生产的数据</p>\n<p>也提供了匹配订阅模式，可以使一个消费者订阅来自多个生产者的数据。</p>\n<p>缺点在于：可能会丢数据：消费者下线、redis宕机、消息堆积···</p>\n<p>造成整个缺点的原因在于</p>\n<ul>\n<li>pub/sub整个过程中消息是实时转发的，没有消息存储。使得消费者必须先订阅队列，生产者才可以发布消息。</li>\n<li>读数据的buffer有大小限制，如果读取速度不匹配，buffer超过配置的大小，redis就会强制把消费者踢下线</li>\n</ul>\n<h3 id=\"趋于成熟的队列-Stream\"><a href=\"#趋于成熟的队列-Stream\" class=\"headerlink\" title=\"趋于成熟的队列 Stream\"></a>趋于成熟的队列 Stream</h3><p>redis5.0中，作者定义了一个新的数据类型Stream</p>\n<p>Stream比较基础的指令有：</p>\n<ul>\n<li>XADD 发布消息</li>\n<li>XREAD 读取消息，如果要读上一条消息，要传入上一条消息的id， 读取消息的时候也可以加入BLOCK参数来支持阻塞式拉取消息</li>\n<li>XGROUP/XREADGROUP 创建消费者组/指定消费者组下开启消费者拉去消息（可以让多个消费者消费同一批消息）</li>\n<li>XACK 消费者处理完消息之后，使用XACK命令告诉redis这条数据被消费了，redis会标记这条数据处理完成（来解决丢数据的问题）</li>\n</ul>\n<p>Stream是一个数据类型，会写到RDB和AOD中做数据持久化，就可以保证不在redis中丢数据</p>\n<p>消息堆积时怎么处理？ redis会丢弃掉就消息，保留固定长度的新消息</p>\n<h2 id=\"redis作为消息队列还有什么问题？\"><a href=\"#redis作为消息队列还有什么问题？\" class=\"headerlink\" title=\"redis作为消息队列还有什么问题？\"></a>redis作为消息队列还有什么问题？</h2><p>消息队列的两个重要问题： 1 不丢失消息  2 消息可以堆积</p>\n<p>由于redis本身持久化的机制，可能会导致写消息的时候数据丢失，专业的消息中间件采用多集群的方式来规避这个问题</p>\n<p>redis面对消息积压只能丢失一定的数据，而专业的消息中间件则将数据保存在磁盘上，比内存的空间要大很多。</p>\n<p>redis的优点： 部署、运维轻量</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>redis做消息队列还是适合与轻量的场景。</p>\n<p>每个工具都有它的优劣，在技术选型的时候更要注意分析具体的场景：是否可以实现业务功能、是否可以hold住对应的工具···</p>\n<p>任重道远··</p>"},{"title":"初探Optional类-代码精进之路(1)","date":"2021-04-26T10:21:55.000Z","_content":"\n最近开始读张建飞的《代码精进之路：从码农到工匠》，感觉对于我这样没有开始太多编程的人是一本不错的书：没有经过系统的编码培训，需要从命名规范开始学起。\n\n计划在这个分类下边记录一下读这本书的一些感悟&知识，其实应该是感悟多一些，但是无奈java基础比较差，所以第一篇就以知识开始。\n\nOptional出现在书中的（3.7 精简辅助代码）中，这个看到同事也用过，但是现在还是不了解这个东西可以干嘛，所以就在这里记录一下。\n\n<!--more-->\n\n## 为什么会有Optional？\n\nOptional是java8开始引入的，主要是为了解决一个问题：空指针异常（NullPointerException）\n\n先看看java8之前是这么做的：\n\n以前我们想要完成以下逻辑的时候：\n\n````java\nString isocode = user.getAddress().getCountry().getIsocode().toUpperCase();\n`````\n\n就会考虑到：中间无论哪一个get如果是null的话，都不会得到最后的结果，所以代码只能这么写：\n\n````java\nif (user != null) {\n    Address address = user.getAddress();\n    if (address != null) {\n        Country country = address.getCountry();\n        if (country != null) {\n            String isocode = country.getIsocode();\n            if (isocode != null) {\n                isocode = isocode.toUpperCase();\n            }\n        }\n    }\n}\n````\n\n这样就把代码变得很麻烦。所以java8就推出了Optional来解决这个问题。\n\n## Optioal是什么\n\n>A container object which may or may not contain a non-null value. If a value is present, isPresent() returns true. If no value is present, the object is considered empty and isPresent() returns false.\n\n>Additional methods that depend on the presence or absence of a contained value are provided, such as orElse() (returns a default value if no value is present) and ifPresent() (performs an action if a value is present).\n\n>This is a value-based class; use of identity-sensitive operations (including reference equality (==), identity hash code, or synchronization) on instances of Optional may have unpredictable results and should be avoided.\n\n上边就是Optional代码的注释，简单的说就是一个容器可能包含了空值，使用isPresent()方法可以来判断值是否存在，还提供了orElse()这样的支持方法，同时禁止使用 identity-sensitive 类型的操作\n\n## 如何使用Optional\n\n如果对象可能为null也可以不能为null，那么应该这么做：\n\n    Optional<User> opt = Optional.ofNullable(user)\n\n想要访问对象的话，可以这么做：\n\n    opt.ifPresent( u -> assertEquals(user.getEmail(), u.getEmail()));\n\n\n此外还可以使用orElse()/orElseGet() 这样的方法来处理null的情况。\n\n针对一开始举的例子，就可以这么使用：\n\n    String isocode = Optional.ofNullable(user)\n                    .map(User::getAddress)\n                    .map(Address::getCountry)\n                    .map(Country::getIsocode)\n                    .orElse(\"test\")\n\n备注一下  :: 是[method reference](https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html)方法引用，也是java8更新的新特性。感觉像是为了优化代码结构而做，不用::也可以实现","source":"_posts/2021-04-26-初探Optional类-代码精进之路-1.md","raw":"---\ntitle: 初探Optional类-代码精进之路(1)\ndate: 2021-04-26 10:21:55\ntags:\n- 读后感\n- java\n- 语法\ncategories:\n- 代码精进之路\n---\n\n最近开始读张建飞的《代码精进之路：从码农到工匠》，感觉对于我这样没有开始太多编程的人是一本不错的书：没有经过系统的编码培训，需要从命名规范开始学起。\n\n计划在这个分类下边记录一下读这本书的一些感悟&知识，其实应该是感悟多一些，但是无奈java基础比较差，所以第一篇就以知识开始。\n\nOptional出现在书中的（3.7 精简辅助代码）中，这个看到同事也用过，但是现在还是不了解这个东西可以干嘛，所以就在这里记录一下。\n\n<!--more-->\n\n## 为什么会有Optional？\n\nOptional是java8开始引入的，主要是为了解决一个问题：空指针异常（NullPointerException）\n\n先看看java8之前是这么做的：\n\n以前我们想要完成以下逻辑的时候：\n\n````java\nString isocode = user.getAddress().getCountry().getIsocode().toUpperCase();\n`````\n\n就会考虑到：中间无论哪一个get如果是null的话，都不会得到最后的结果，所以代码只能这么写：\n\n````java\nif (user != null) {\n    Address address = user.getAddress();\n    if (address != null) {\n        Country country = address.getCountry();\n        if (country != null) {\n            String isocode = country.getIsocode();\n            if (isocode != null) {\n                isocode = isocode.toUpperCase();\n            }\n        }\n    }\n}\n````\n\n这样就把代码变得很麻烦。所以java8就推出了Optional来解决这个问题。\n\n## Optioal是什么\n\n>A container object which may or may not contain a non-null value. If a value is present, isPresent() returns true. If no value is present, the object is considered empty and isPresent() returns false.\n\n>Additional methods that depend on the presence or absence of a contained value are provided, such as orElse() (returns a default value if no value is present) and ifPresent() (performs an action if a value is present).\n\n>This is a value-based class; use of identity-sensitive operations (including reference equality (==), identity hash code, or synchronization) on instances of Optional may have unpredictable results and should be avoided.\n\n上边就是Optional代码的注释，简单的说就是一个容器可能包含了空值，使用isPresent()方法可以来判断值是否存在，还提供了orElse()这样的支持方法，同时禁止使用 identity-sensitive 类型的操作\n\n## 如何使用Optional\n\n如果对象可能为null也可以不能为null，那么应该这么做：\n\n    Optional<User> opt = Optional.ofNullable(user)\n\n想要访问对象的话，可以这么做：\n\n    opt.ifPresent( u -> assertEquals(user.getEmail(), u.getEmail()));\n\n\n此外还可以使用orElse()/orElseGet() 这样的方法来处理null的情况。\n\n针对一开始举的例子，就可以这么使用：\n\n    String isocode = Optional.ofNullable(user)\n                    .map(User::getAddress)\n                    .map(Address::getCountry)\n                    .map(Country::getIsocode)\n                    .orElse(\"test\")\n\n备注一下  :: 是[method reference](https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html)方法引用，也是java8更新的新特性。感觉像是为了优化代码结构而做，不用::也可以实现","slug":"初探Optional类-代码精进之路-1","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgw6001m2h5p63241u2m","content":"<p>最近开始读张建飞的《代码精进之路：从码农到工匠》，感觉对于我这样没有开始太多编程的人是一本不错的书：没有经过系统的编码培训，需要从命名规范开始学起。</p>\n<p>计划在这个分类下边记录一下读这本书的一些感悟&amp;知识，其实应该是感悟多一些，但是无奈java基础比较差，所以第一篇就以知识开始。</p>\n<p>Optional出现在书中的（3.7 精简辅助代码）中，这个看到同事也用过，但是现在还是不了解这个东西可以干嘛，所以就在这里记录一下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么会有Optional？\"><a href=\"#为什么会有Optional？\" class=\"headerlink\" title=\"为什么会有Optional？\"></a>为什么会有Optional？</h2><p>Optional是java8开始引入的，主要是为了解决一个问题：空指针异常（NullPointerException）</p>\n<p>先看看java8之前是这么做的：</p>\n<p>以前我们想要完成以下逻辑的时候：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String isocode = user.getAddress().getCountry().getIsocode().toUpperCase();</span><br><span class=\"line\">`````</span><br><span class=\"line\"></span><br><span class=\"line\">就会考虑到：中间无论哪一个get如果是<span class=\"keyword\">null</span>的话，都不会得到最后的结果，所以代码只能这么写：</span><br><span class=\"line\"></span><br><span class=\"line\">````java</span><br><span class=\"line\"><span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    Address address = user.getAddress();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (address != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Country country = address.getCountry();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (country != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String isocode = country.getIsocode();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isocode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                isocode = isocode.toUpperCase();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就把代码变得很麻烦。所以java8就推出了Optional来解决这个问题。</p>\n<h2 id=\"Optioal是什么\"><a href=\"#Optioal是什么\" class=\"headerlink\" title=\"Optioal是什么\"></a>Optioal是什么</h2><blockquote>\n<p>A container object which may or may not contain a non-null value. If a value is present, isPresent() returns true. If no value is present, the object is considered empty and isPresent() returns false.</p>\n</blockquote>\n<blockquote>\n<p>Additional methods that depend on the presence or absence of a contained value are provided, such as orElse() (returns a default value if no value is present) and ifPresent() (performs an action if a value is present).</p>\n</blockquote>\n<blockquote>\n<p>This is a value-based class; use of identity-sensitive operations (including reference equality (==), identity hash code, or synchronization) on instances of Optional may have unpredictable results and should be avoided.</p>\n</blockquote>\n<p>上边就是Optional代码的注释，简单的说就是一个容器可能包含了空值，使用isPresent()方法可以来判断值是否存在，还提供了orElse()这样的支持方法，同时禁止使用 identity-sensitive 类型的操作</p>\n<h2 id=\"如何使用Optional\"><a href=\"#如何使用Optional\" class=\"headerlink\" title=\"如何使用Optional\"></a>如何使用Optional</h2><p>如果对象可能为null也可以不能为null，那么应该这么做：</p>\n<pre><code>Optional&lt;User&gt; opt = Optional.ofNullable(user)\n</code></pre>\n<p>想要访问对象的话，可以这么做：</p>\n<pre><code>opt.ifPresent( u -&gt; assertEquals(user.getEmail(), u.getEmail()));\n</code></pre>\n<p>此外还可以使用orElse()/orElseGet() 这样的方法来处理null的情况。</p>\n<p>针对一开始举的例子，就可以这么使用：</p>\n<pre><code>String isocode = Optional.ofNullable(user)\n                .map(User::getAddress)\n                .map(Address::getCountry)\n                .map(Country::getIsocode)\n                .orElse(&quot;test&quot;)\n</code></pre>\n<p>备注一下  :: 是<a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\">method reference</a>方法引用，也是java8更新的新特性。感觉像是为了优化代码结构而做，不用::也可以实现</p>\n","site":{"data":{}},"excerpt":"<p>最近开始读张建飞的《代码精进之路：从码农到工匠》，感觉对于我这样没有开始太多编程的人是一本不错的书：没有经过系统的编码培训，需要从命名规范开始学起。</p>\n<p>计划在这个分类下边记录一下读这本书的一些感悟&amp;知识，其实应该是感悟多一些，但是无奈java基础比较差，所以第一篇就以知识开始。</p>\n<p>Optional出现在书中的（3.7 精简辅助代码）中，这个看到同事也用过，但是现在还是不了解这个东西可以干嘛，所以就在这里记录一下。</p>","more":"<h2 id=\"为什么会有Optional？\"><a href=\"#为什么会有Optional？\" class=\"headerlink\" title=\"为什么会有Optional？\"></a>为什么会有Optional？</h2><p>Optional是java8开始引入的，主要是为了解决一个问题：空指针异常（NullPointerException）</p>\n<p>先看看java8之前是这么做的：</p>\n<p>以前我们想要完成以下逻辑的时候：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String isocode = user.getAddress().getCountry().getIsocode().toUpperCase();</span><br><span class=\"line\">`````</span><br><span class=\"line\"></span><br><span class=\"line\">就会考虑到：中间无论哪一个get如果是<span class=\"keyword\">null</span>的话，都不会得到最后的结果，所以代码只能这么写：</span><br><span class=\"line\"></span><br><span class=\"line\">````java</span><br><span class=\"line\"><span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    Address address = user.getAddress();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (address != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Country country = address.getCountry();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (country != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String isocode = country.getIsocode();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isocode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                isocode = isocode.toUpperCase();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就把代码变得很麻烦。所以java8就推出了Optional来解决这个问题。</p>\n<h2 id=\"Optioal是什么\"><a href=\"#Optioal是什么\" class=\"headerlink\" title=\"Optioal是什么\"></a>Optioal是什么</h2><blockquote>\n<p>A container object which may or may not contain a non-null value. If a value is present, isPresent() returns true. If no value is present, the object is considered empty and isPresent() returns false.</p>\n</blockquote>\n<blockquote>\n<p>Additional methods that depend on the presence or absence of a contained value are provided, such as orElse() (returns a default value if no value is present) and ifPresent() (performs an action if a value is present).</p>\n</blockquote>\n<blockquote>\n<p>This is a value-based class; use of identity-sensitive operations (including reference equality (==), identity hash code, or synchronization) on instances of Optional may have unpredictable results and should be avoided.</p>\n</blockquote>\n<p>上边就是Optional代码的注释，简单的说就是一个容器可能包含了空值，使用isPresent()方法可以来判断值是否存在，还提供了orElse()这样的支持方法，同时禁止使用 identity-sensitive 类型的操作</p>\n<h2 id=\"如何使用Optional\"><a href=\"#如何使用Optional\" class=\"headerlink\" title=\"如何使用Optional\"></a>如何使用Optional</h2><p>如果对象可能为null也可以不能为null，那么应该这么做：</p>\n<pre><code>Optional&lt;User&gt; opt = Optional.ofNullable(user)\n</code></pre>\n<p>想要访问对象的话，可以这么做：</p>\n<pre><code>opt.ifPresent( u -&gt; assertEquals(user.getEmail(), u.getEmail()));\n</code></pre>\n<p>此外还可以使用orElse()/orElseGet() 这样的方法来处理null的情况。</p>\n<p>针对一开始举的例子，就可以这么使用：</p>\n<pre><code>String isocode = Optional.ofNullable(user)\n                .map(User::getAddress)\n                .map(Address::getCountry)\n                .map(Country::getIsocode)\n                .orElse(&quot;test&quot;)\n</code></pre>\n<p>备注一下  :: 是<a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\">method reference</a>方法引用，也是java8更新的新特性。感觉像是为了优化代码结构而做，不用::也可以实现</p>"},{"title":"SOLID设计原则-代码精进之路(2)","date":"2021-04-27T15:47:52.000Z","_content":"\nSOLID可以说是老生常谈了，秋招准备面试的时候就在看这个东西，无奈当时根本没有写代码，对于这些东西也完全不了解，最近写了一些代码，大概讲讲对这个的理解吧。\n\n## SOLID概览\n\n其中开闭原则、里氏替换原则是设计目标，单一职责、接口隔离、依赖倒置是设计方法\n\n这里讲的是设计原则，不过SOLID并不是所有的设计原则，除了这几条之外还有DRY, YANGI, Rule of three等设计原则\n\n## Single Responsibility Principle 单一职责原则\n\n这个比较简单：一个软件模块只负责一个职责\n\n## Open Close Principle 开闭原则\n\n软件实体对扩展开放，对修改关闭\n\n比如前段时间在用的装饰模式有一点开闭原则的感觉\n\n## Liskov Substitution Principle 里氏替换原则\n\n程序中所有的父类都可以被子类替换\n\nLSP认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”，即子类应该可以替换任何基类能够出现的地方，并且经过替换后，代码还能正常工作。\n\n## Interface Segregation Principle 接口隔离原则\n\n多个特定用途的客户端接口好过一个宽泛用途的接口 --> 这个思想很适合用来指导做接口拆分\n\n## Dependency Inverse Principle 依赖倒置原则\n\n模块之间交互应该依赖抽象，而非实现。DIP要求高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖细节，细节应该依赖抽象。\n\n## Don'r repeat Yourself\n\n同样的代码不要写太多次\n\n## You Ain’t Gonna Need It\n\n不一定需要提前做优化\n\n## Rule of Three\n\n针对上述两个设计原则，如果同样的代码出现了3次或者以上，就要考虑抽象出来了。","source":"_posts/2021-04-27-SOLID设计原则-代码精进之路-2.md","raw":"---\ntitle: SOLID设计原则-代码精进之路(2)\ndate: 2021-04-27 15:47:52\ntags:\n- 读后感\n- java\ncategories:\n- 代码精进之路\n---\n\nSOLID可以说是老生常谈了，秋招准备面试的时候就在看这个东西，无奈当时根本没有写代码，对于这些东西也完全不了解，最近写了一些代码，大概讲讲对这个的理解吧。\n\n## SOLID概览\n\n其中开闭原则、里氏替换原则是设计目标，单一职责、接口隔离、依赖倒置是设计方法\n\n这里讲的是设计原则，不过SOLID并不是所有的设计原则，除了这几条之外还有DRY, YANGI, Rule of three等设计原则\n\n## Single Responsibility Principle 单一职责原则\n\n这个比较简单：一个软件模块只负责一个职责\n\n## Open Close Principle 开闭原则\n\n软件实体对扩展开放，对修改关闭\n\n比如前段时间在用的装饰模式有一点开闭原则的感觉\n\n## Liskov Substitution Principle 里氏替换原则\n\n程序中所有的父类都可以被子类替换\n\nLSP认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”，即子类应该可以替换任何基类能够出现的地方，并且经过替换后，代码还能正常工作。\n\n## Interface Segregation Principle 接口隔离原则\n\n多个特定用途的客户端接口好过一个宽泛用途的接口 --> 这个思想很适合用来指导做接口拆分\n\n## Dependency Inverse Principle 依赖倒置原则\n\n模块之间交互应该依赖抽象，而非实现。DIP要求高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖细节，细节应该依赖抽象。\n\n## Don'r repeat Yourself\n\n同样的代码不要写太多次\n\n## You Ain’t Gonna Need It\n\n不一定需要提前做优化\n\n## Rule of Three\n\n针对上述两个设计原则，如果同样的代码出现了3次或者以上，就要考虑抽象出来了。","slug":"SOLID设计原则-代码精进之路-2","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzgy4001o2h5peux52o6s","content":"<p>SOLID可以说是老生常谈了，秋招准备面试的时候就在看这个东西，无奈当时根本没有写代码，对于这些东西也完全不了解，最近写了一些代码，大概讲讲对这个的理解吧。</p>\n<h2 id=\"SOLID概览\"><a href=\"#SOLID概览\" class=\"headerlink\" title=\"SOLID概览\"></a>SOLID概览</h2><p>其中开闭原则、里氏替换原则是设计目标，单一职责、接口隔离、依赖倒置是设计方法</p>\n<p>这里讲的是设计原则，不过SOLID并不是所有的设计原则，除了这几条之外还有DRY, YANGI, Rule of three等设计原则</p>\n<h2 id=\"Single-Responsibility-Principle-单一职责原则\"><a href=\"#Single-Responsibility-Principle-单一职责原则\" class=\"headerlink\" title=\"Single Responsibility Principle 单一职责原则\"></a>Single Responsibility Principle 单一职责原则</h2><p>这个比较简单：一个软件模块只负责一个职责</p>\n<h2 id=\"Open-Close-Principle-开闭原则\"><a href=\"#Open-Close-Principle-开闭原则\" class=\"headerlink\" title=\"Open Close Principle 开闭原则\"></a>Open Close Principle 开闭原则</h2><p>软件实体对扩展开放，对修改关闭</p>\n<p>比如前段时间在用的装饰模式有一点开闭原则的感觉</p>\n<h2 id=\"Liskov-Substitution-Principle-里氏替换原则\"><a href=\"#Liskov-Substitution-Principle-里氏替换原则\" class=\"headerlink\" title=\"Liskov Substitution Principle 里氏替换原则\"></a>Liskov Substitution Principle 里氏替换原则</h2><p>程序中所有的父类都可以被子类替换</p>\n<p>LSP认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”，即子类应该可以替换任何基类能够出现的地方，并且经过替换后，代码还能正常工作。</p>\n<h2 id=\"Interface-Segregation-Principle-接口隔离原则\"><a href=\"#Interface-Segregation-Principle-接口隔离原则\" class=\"headerlink\" title=\"Interface Segregation Principle 接口隔离原则\"></a>Interface Segregation Principle 接口隔离原则</h2><p>多个特定用途的客户端接口好过一个宽泛用途的接口 –&gt; 这个思想很适合用来指导做接口拆分</p>\n<h2 id=\"Dependency-Inverse-Principle-依赖倒置原则\"><a href=\"#Dependency-Inverse-Principle-依赖倒置原则\" class=\"headerlink\" title=\"Dependency Inverse Principle 依赖倒置原则\"></a>Dependency Inverse Principle 依赖倒置原则</h2><p>模块之间交互应该依赖抽象，而非实现。DIP要求高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖细节，细节应该依赖抽象。</p>\n<h2 id=\"Don’r-repeat-Yourself\"><a href=\"#Don’r-repeat-Yourself\" class=\"headerlink\" title=\"Don’r repeat Yourself\"></a>Don’r repeat Yourself</h2><p>同样的代码不要写太多次</p>\n<h2 id=\"You-Ain’t-Gonna-Need-It\"><a href=\"#You-Ain’t-Gonna-Need-It\" class=\"headerlink\" title=\"You Ain’t Gonna Need It\"></a>You Ain’t Gonna Need It</h2><p>不一定需要提前做优化</p>\n<h2 id=\"Rule-of-Three\"><a href=\"#Rule-of-Three\" class=\"headerlink\" title=\"Rule of Three\"></a>Rule of Three</h2><p>针对上述两个设计原则，如果同样的代码出现了3次或者以上，就要考虑抽象出来了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>SOLID可以说是老生常谈了，秋招准备面试的时候就在看这个东西，无奈当时根本没有写代码，对于这些东西也完全不了解，最近写了一些代码，大概讲讲对这个的理解吧。</p>\n<h2 id=\"SOLID概览\"><a href=\"#SOLID概览\" class=\"headerlink\" title=\"SOLID概览\"></a>SOLID概览</h2><p>其中开闭原则、里氏替换原则是设计目标，单一职责、接口隔离、依赖倒置是设计方法</p>\n<p>这里讲的是设计原则，不过SOLID并不是所有的设计原则，除了这几条之外还有DRY, YANGI, Rule of three等设计原则</p>\n<h2 id=\"Single-Responsibility-Principle-单一职责原则\"><a href=\"#Single-Responsibility-Principle-单一职责原则\" class=\"headerlink\" title=\"Single Responsibility Principle 单一职责原则\"></a>Single Responsibility Principle 单一职责原则</h2><p>这个比较简单：一个软件模块只负责一个职责</p>\n<h2 id=\"Open-Close-Principle-开闭原则\"><a href=\"#Open-Close-Principle-开闭原则\" class=\"headerlink\" title=\"Open Close Principle 开闭原则\"></a>Open Close Principle 开闭原则</h2><p>软件实体对扩展开放，对修改关闭</p>\n<p>比如前段时间在用的装饰模式有一点开闭原则的感觉</p>\n<h2 id=\"Liskov-Substitution-Principle-里氏替换原则\"><a href=\"#Liskov-Substitution-Principle-里氏替换原则\" class=\"headerlink\" title=\"Liskov Substitution Principle 里氏替换原则\"></a>Liskov Substitution Principle 里氏替换原则</h2><p>程序中所有的父类都可以被子类替换</p>\n<p>LSP认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”，即子类应该可以替换任何基类能够出现的地方，并且经过替换后，代码还能正常工作。</p>\n<h2 id=\"Interface-Segregation-Principle-接口隔离原则\"><a href=\"#Interface-Segregation-Principle-接口隔离原则\" class=\"headerlink\" title=\"Interface Segregation Principle 接口隔离原则\"></a>Interface Segregation Principle 接口隔离原则</h2><p>多个特定用途的客户端接口好过一个宽泛用途的接口 –&gt; 这个思想很适合用来指导做接口拆分</p>\n<h2 id=\"Dependency-Inverse-Principle-依赖倒置原则\"><a href=\"#Dependency-Inverse-Principle-依赖倒置原则\" class=\"headerlink\" title=\"Dependency Inverse Principle 依赖倒置原则\"></a>Dependency Inverse Principle 依赖倒置原则</h2><p>模块之间交互应该依赖抽象，而非实现。DIP要求高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖细节，细节应该依赖抽象。</p>\n<h2 id=\"Don’r-repeat-Yourself\"><a href=\"#Don’r-repeat-Yourself\" class=\"headerlink\" title=\"Don’r repeat Yourself\"></a>Don’r repeat Yourself</h2><p>同样的代码不要写太多次</p>\n<h2 id=\"You-Ain’t-Gonna-Need-It\"><a href=\"#You-Ain’t-Gonna-Need-It\" class=\"headerlink\" title=\"You Ain’t Gonna Need It\"></a>You Ain’t Gonna Need It</h2><p>不一定需要提前做优化</p>\n<h2 id=\"Rule-of-Three\"><a href=\"#Rule-of-Three\" class=\"headerlink\" title=\"Rule of Three\"></a>Rule of Three</h2><p>针对上述两个设计原则，如果同样的代码出现了3次或者以上，就要考虑抽象出来了。</p>\n"},{"title":"WSL2使用问题记录","date":"2021-05-26T15:07:19.000Z","_content":"\n今天在wsl2中起了一个nodejs的服务，服务起了之后显示如下：\n\n>2021-05-26 15:08:50,767 INFO 6103 [master] egg started on http://127.0.0.1:7002 (1032ms)\n\n但是在windows里边用工具请求localhost却完全请求不到api，返回都报的是500\n\n后来想了一下，大概是wsl2里边的网络和windows的网络不一样，所以宿主机的localhost并不是wsl2所显示的localhost···\n\n引用别人[blog](https://www.jianshu.com/p/ba2cf239ebe0)里边的话讲，大概是这样的：\n\n>  wsl2 则可以理解为宿主机完整虚拟出来的一个完整的 Linux 虚拟机，拥有自己的逻辑上独立的网卡，也即拥有属于自己的独立网络栈。与 VMware 的 bridge 模式和 docker 的 macvlan 模式类似。\n\n于是问题就比较好解决了：\n\n在wsl2里边用ifconfig查看一下 eth0 的ip地址，用eth0的ip地址来替换localhost，就可以成功查看了。\n\n","source":"_posts/2021-05-26-WSL2使用问题记录.md","raw":"---\ntitle: WSL2使用问题记录\ndate: 2021-05-26 15:07:19\ntags:\n- wsl2\n- 问题记录\ncategories:\n- WSL\n---\n\n今天在wsl2中起了一个nodejs的服务，服务起了之后显示如下：\n\n>2021-05-26 15:08:50,767 INFO 6103 [master] egg started on http://127.0.0.1:7002 (1032ms)\n\n但是在windows里边用工具请求localhost却完全请求不到api，返回都报的是500\n\n后来想了一下，大概是wsl2里边的网络和windows的网络不一样，所以宿主机的localhost并不是wsl2所显示的localhost···\n\n引用别人[blog](https://www.jianshu.com/p/ba2cf239ebe0)里边的话讲，大概是这样的：\n\n>  wsl2 则可以理解为宿主机完整虚拟出来的一个完整的 Linux 虚拟机，拥有自己的逻辑上独立的网卡，也即拥有属于自己的独立网络栈。与 VMware 的 bridge 模式和 docker 的 macvlan 模式类似。\n\n于是问题就比较好解决了：\n\n在wsl2里边用ifconfig查看一下 eth0 的ip地址，用eth0的ip地址来替换localhost，就可以成功查看了。\n\n","slug":"WSL2使用问题记录","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzh02001s2h5payfn6yji","content":"<p>今天在wsl2中起了一个nodejs的服务，服务起了之后显示如下：</p>\n<blockquote>\n<p>2021-05-26 15:08:50,767 INFO 6103 [master] egg started on <a href=\"http://127.0.0.1:7002/\">http://127.0.0.1:7002</a> (1032ms)</p>\n</blockquote>\n<p>但是在windows里边用工具请求localhost却完全请求不到api，返回都报的是500</p>\n<p>后来想了一下，大概是wsl2里边的网络和windows的网络不一样，所以宿主机的localhost并不是wsl2所显示的localhost···</p>\n<p>引用别人<a href=\"https://www.jianshu.com/p/ba2cf239ebe0\">blog</a>里边的话讲，大概是这样的：</p>\n<blockquote>\n<p> wsl2 则可以理解为宿主机完整虚拟出来的一个完整的 Linux 虚拟机，拥有自己的逻辑上独立的网卡，也即拥有属于自己的独立网络栈。与 VMware 的 bridge 模式和 docker 的 macvlan 模式类似。</p>\n</blockquote>\n<p>于是问题就比较好解决了：</p>\n<p>在wsl2里边用ifconfig查看一下 eth0 的ip地址，用eth0的ip地址来替换localhost，就可以成功查看了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在wsl2中起了一个nodejs的服务，服务起了之后显示如下：</p>\n<blockquote>\n<p>2021-05-26 15:08:50,767 INFO 6103 [master] egg started on <a href=\"http://127.0.0.1:7002/\">http://127.0.0.1:7002</a> (1032ms)</p>\n</blockquote>\n<p>但是在windows里边用工具请求localhost却完全请求不到api，返回都报的是500</p>\n<p>后来想了一下，大概是wsl2里边的网络和windows的网络不一样，所以宿主机的localhost并不是wsl2所显示的localhost···</p>\n<p>引用别人<a href=\"https://www.jianshu.com/p/ba2cf239ebe0\">blog</a>里边的话讲，大概是这样的：</p>\n<blockquote>\n<p> wsl2 则可以理解为宿主机完整虚拟出来的一个完整的 Linux 虚拟机，拥有自己的逻辑上独立的网卡，也即拥有属于自己的独立网络栈。与 VMware 的 bridge 模式和 docker 的 macvlan 模式类似。</p>\n</blockquote>\n<p>于是问题就比较好解决了：</p>\n<p>在wsl2里边用ifconfig查看一下 eth0 的ip地址，用eth0的ip地址来替换localhost，就可以成功查看了。</p>\n"},{"title":"Q001:influxdb学习-基础&重复值解决","date":"2021-06-01T18:51:17.000Z","_content":"\n为什么要写这篇文章呢？\n\n因为这两天想要走一个查询接口按照时间来查询记录去插入到influxdb里边，但是考虑到程序运行时之类的问题，严格按照运行间隔来取时间查询肯定会存在漏掉记录的可能性，所以最好还是多查一段时间，然后再去掉重复值\n\n思路呢，就按照这么来：\n\n1. 先复习一下influxdb的数据格式\n2. 看一下如何解决这个问题\n3. 其他\n\n<!--more-->\n\n## influxdb的数据格式\n\n这个很多[blog](https://www.cnblogs.com/shhnwangjian/p/6897216.html)里边都有，这里我大致重复一下\n\ninfluxdb里边可以将一条数据看为一个虚拟的key和其对应的value\n\n    cpu_usage,host=server01,region=us-west value=0.64 1434055562000000000\n\n其中key包括以下部分\n\n* database 数据库名，在influxdb中可以创建多个数据库，不同数据库的文件可以隔离存放\n\n* retention policy: 存储策略，用于设置数据保留的时间，每个数据库刚开始会自动创建一个默认的存储策略 autogen，数据保留时间为永久，之后用户可以自己设置，例如保留最近2小时的数据。插入和查询数据时如果不指定存储策略，则使用默认存储策略，且默认存储策略可以修改。InfluxDB 会定期清除过期的数据。\n\n* measurement: 测量指标名，例如 cpu_usage 表示 cpu 的使用率。\n\n* tag sets: tags 在 InfluxDB 中会按照字典序排序，不管是 tagk 还是 tagv，只要不一致就分别属于两个 key，例如 host=server01,region=us-west 和 host=server02,region=us-west 就是两个不同的 tag set。\n\n* tag--标签，在InfluxDB中，tag是一个非常重要的部分，表名+tag一起作为数据库的索引，是“key-value”的形式。\n\n* field name: 例如上面数据中的 value 就是 fieldName，InfluxDB 中支持一条数据中插入多个 fieldName，这其实是一个语法上的优化，在实际的底层存储中，是当作多条数据来存储。\n\n* timestamp: 每一条数据都需要指定一个时间戳，在 TSM 存储引擎中会特殊对待，以为了优化后续的查询操作。 \n\ntag + field + field 合起来就是point，可以简单理解为：\n\n1. tags是有索引的属性\n2. time是主索引，存储进去的时间\n3. fields是数据，没有索引的属性\n\n## 如何应对重复值？\n\n一般插入的时候不会写time，但是time+用户自定义的tag 才是完整的tag，而tag又是用来做索引的，这里我们就可以考虑一下：完全一样的tag能不能插入呢？\n\n做以下测试：\n\n先进入influxdb的命令行界面，插入以下三条一样的数据：\n\n    INSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\n    INSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\n    INSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\n                                    \n然后再查询一下：\n\n    name: dupltest\n    time                host    region  value\n    ----                ----    ------  -----\n    1623146232869000000 serverA us_west 0.64\n\n果然不能重复插入。到这里问题就解决了：只要tags完全一样，就不会重复插入。\n\n那考虑其他的情况：如果time是自动生成的话要怎么办呢？这样就不能通过依赖重复tag来剔除掉重复数据了。\n\n可以考虑一下自己插入一个时间数据，然后查询的时候查询最后一个时间，如果时间小于这个最后时间，就不插入。","source":"_posts/2021-06-01-Q001-influxdb学习-基础-重复值解决.md","raw":"---\ntitle: Q001:influxdb学习-基础&重复值解决\ndate: 2021-06-01 18:51:17\ntags:\n- TICK\n- influxdb\ncategories:\n- 日常问题解决\n---\n\n为什么要写这篇文章呢？\n\n因为这两天想要走一个查询接口按照时间来查询记录去插入到influxdb里边，但是考虑到程序运行时之类的问题，严格按照运行间隔来取时间查询肯定会存在漏掉记录的可能性，所以最好还是多查一段时间，然后再去掉重复值\n\n思路呢，就按照这么来：\n\n1. 先复习一下influxdb的数据格式\n2. 看一下如何解决这个问题\n3. 其他\n\n<!--more-->\n\n## influxdb的数据格式\n\n这个很多[blog](https://www.cnblogs.com/shhnwangjian/p/6897216.html)里边都有，这里我大致重复一下\n\ninfluxdb里边可以将一条数据看为一个虚拟的key和其对应的value\n\n    cpu_usage,host=server01,region=us-west value=0.64 1434055562000000000\n\n其中key包括以下部分\n\n* database 数据库名，在influxdb中可以创建多个数据库，不同数据库的文件可以隔离存放\n\n* retention policy: 存储策略，用于设置数据保留的时间，每个数据库刚开始会自动创建一个默认的存储策略 autogen，数据保留时间为永久，之后用户可以自己设置，例如保留最近2小时的数据。插入和查询数据时如果不指定存储策略，则使用默认存储策略，且默认存储策略可以修改。InfluxDB 会定期清除过期的数据。\n\n* measurement: 测量指标名，例如 cpu_usage 表示 cpu 的使用率。\n\n* tag sets: tags 在 InfluxDB 中会按照字典序排序，不管是 tagk 还是 tagv，只要不一致就分别属于两个 key，例如 host=server01,region=us-west 和 host=server02,region=us-west 就是两个不同的 tag set。\n\n* tag--标签，在InfluxDB中，tag是一个非常重要的部分，表名+tag一起作为数据库的索引，是“key-value”的形式。\n\n* field name: 例如上面数据中的 value 就是 fieldName，InfluxDB 中支持一条数据中插入多个 fieldName，这其实是一个语法上的优化，在实际的底层存储中，是当作多条数据来存储。\n\n* timestamp: 每一条数据都需要指定一个时间戳，在 TSM 存储引擎中会特殊对待，以为了优化后续的查询操作。 \n\ntag + field + field 合起来就是point，可以简单理解为：\n\n1. tags是有索引的属性\n2. time是主索引，存储进去的时间\n3. fields是数据，没有索引的属性\n\n## 如何应对重复值？\n\n一般插入的时候不会写time，但是time+用户自定义的tag 才是完整的tag，而tag又是用来做索引的，这里我们就可以考虑一下：完全一样的tag能不能插入呢？\n\n做以下测试：\n\n先进入influxdb的命令行界面，插入以下三条一样的数据：\n\n    INSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\n    INSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\n    INSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\n                                    \n然后再查询一下：\n\n    name: dupltest\n    time                host    region  value\n    ----                ----    ------  -----\n    1623146232869000000 serverA us_west 0.64\n\n果然不能重复插入。到这里问题就解决了：只要tags完全一样，就不会重复插入。\n\n那考虑其他的情况：如果time是自动生成的话要怎么办呢？这样就不能通过依赖重复tag来剔除掉重复数据了。\n\n可以考虑一下自己插入一个时间数据，然后查询的时候查询最后一个时间，如果时间小于这个最后时间，就不插入。","slug":"Q001-influxdb学习-基础-重复值解决","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzh19001w2h5p4y8u8szu","content":"<p>为什么要写这篇文章呢？</p>\n<p>因为这两天想要走一个查询接口按照时间来查询记录去插入到influxdb里边，但是考虑到程序运行时之类的问题，严格按照运行间隔来取时间查询肯定会存在漏掉记录的可能性，所以最好还是多查一段时间，然后再去掉重复值</p>\n<p>思路呢，就按照这么来：</p>\n<ol>\n<li>先复习一下influxdb的数据格式</li>\n<li>看一下如何解决这个问题</li>\n<li>其他</li>\n</ol>\n<a id=\"more\"></a>\n\n<h2 id=\"influxdb的数据格式\"><a href=\"#influxdb的数据格式\" class=\"headerlink\" title=\"influxdb的数据格式\"></a>influxdb的数据格式</h2><p>这个很多<a href=\"https://www.cnblogs.com/shhnwangjian/p/6897216.html\">blog</a>里边都有，这里我大致重复一下</p>\n<p>influxdb里边可以将一条数据看为一个虚拟的key和其对应的value</p>\n<pre><code>cpu_usage,host=server01,region=us-west value=0.64 1434055562000000000\n</code></pre>\n<p>其中key包括以下部分</p>\n<ul>\n<li><p>database 数据库名，在influxdb中可以创建多个数据库，不同数据库的文件可以隔离存放</p>\n</li>\n<li><p>retention policy: 存储策略，用于设置数据保留的时间，每个数据库刚开始会自动创建一个默认的存储策略 autogen，数据保留时间为永久，之后用户可以自己设置，例如保留最近2小时的数据。插入和查询数据时如果不指定存储策略，则使用默认存储策略，且默认存储策略可以修改。InfluxDB 会定期清除过期的数据。</p>\n</li>\n<li><p>measurement: 测量指标名，例如 cpu_usage 表示 cpu 的使用率。</p>\n</li>\n<li><p>tag sets: tags 在 InfluxDB 中会按照字典序排序，不管是 tagk 还是 tagv，只要不一致就分别属于两个 key，例如 host=server01,region=us-west 和 host=server02,region=us-west 就是两个不同的 tag set。</p>\n</li>\n<li><p>tag–标签，在InfluxDB中，tag是一个非常重要的部分，表名+tag一起作为数据库的索引，是“key-value”的形式。</p>\n</li>\n<li><p>field name: 例如上面数据中的 value 就是 fieldName，InfluxDB 中支持一条数据中插入多个 fieldName，这其实是一个语法上的优化，在实际的底层存储中，是当作多条数据来存储。</p>\n</li>\n<li><p>timestamp: 每一条数据都需要指定一个时间戳，在 TSM 存储引擎中会特殊对待，以为了优化后续的查询操作。 </p>\n</li>\n</ul>\n<p>tag + field + field 合起来就是point，可以简单理解为：</p>\n<ol>\n<li>tags是有索引的属性</li>\n<li>time是主索引，存储进去的时间</li>\n<li>fields是数据，没有索引的属性</li>\n</ol>\n<h2 id=\"如何应对重复值？\"><a href=\"#如何应对重复值？\" class=\"headerlink\" title=\"如何应对重复值？\"></a>如何应对重复值？</h2><p>一般插入的时候不会写time，但是time+用户自定义的tag 才是完整的tag，而tag又是用来做索引的，这里我们就可以考虑一下：完全一样的tag能不能插入呢？</p>\n<p>做以下测试：</p>\n<p>先进入influxdb的命令行界面，插入以下三条一样的数据：</p>\n<pre><code>INSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\nINSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\nINSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\n                                \n</code></pre>\n<p>然后再查询一下：</p>\n<pre><code>name: dupltest\ntime                host    region  value\n----                ----    ------  -----\n1623146232869000000 serverA us_west 0.64\n</code></pre>\n<p>果然不能重复插入。到这里问题就解决了：只要tags完全一样，就不会重复插入。</p>\n<p>那考虑其他的情况：如果time是自动生成的话要怎么办呢？这样就不能通过依赖重复tag来剔除掉重复数据了。</p>\n<p>可以考虑一下自己插入一个时间数据，然后查询的时候查询最后一个时间，如果时间小于这个最后时间，就不插入。</p>\n","site":{"data":{}},"excerpt":"<p>为什么要写这篇文章呢？</p>\n<p>因为这两天想要走一个查询接口按照时间来查询记录去插入到influxdb里边，但是考虑到程序运行时之类的问题，严格按照运行间隔来取时间查询肯定会存在漏掉记录的可能性，所以最好还是多查一段时间，然后再去掉重复值</p>\n<p>思路呢，就按照这么来：</p>\n<ol>\n<li>先复习一下influxdb的数据格式</li>\n<li>看一下如何解决这个问题</li>\n<li>其他</li>\n</ol>","more":"<h2 id=\"influxdb的数据格式\"><a href=\"#influxdb的数据格式\" class=\"headerlink\" title=\"influxdb的数据格式\"></a>influxdb的数据格式</h2><p>这个很多<a href=\"https://www.cnblogs.com/shhnwangjian/p/6897216.html\">blog</a>里边都有，这里我大致重复一下</p>\n<p>influxdb里边可以将一条数据看为一个虚拟的key和其对应的value</p>\n<pre><code>cpu_usage,host=server01,region=us-west value=0.64 1434055562000000000\n</code></pre>\n<p>其中key包括以下部分</p>\n<ul>\n<li><p>database 数据库名，在influxdb中可以创建多个数据库，不同数据库的文件可以隔离存放</p>\n</li>\n<li><p>retention policy: 存储策略，用于设置数据保留的时间，每个数据库刚开始会自动创建一个默认的存储策略 autogen，数据保留时间为永久，之后用户可以自己设置，例如保留最近2小时的数据。插入和查询数据时如果不指定存储策略，则使用默认存储策略，且默认存储策略可以修改。InfluxDB 会定期清除过期的数据。</p>\n</li>\n<li><p>measurement: 测量指标名，例如 cpu_usage 表示 cpu 的使用率。</p>\n</li>\n<li><p>tag sets: tags 在 InfluxDB 中会按照字典序排序，不管是 tagk 还是 tagv，只要不一致就分别属于两个 key，例如 host=server01,region=us-west 和 host=server02,region=us-west 就是两个不同的 tag set。</p>\n</li>\n<li><p>tag–标签，在InfluxDB中，tag是一个非常重要的部分，表名+tag一起作为数据库的索引，是“key-value”的形式。</p>\n</li>\n<li><p>field name: 例如上面数据中的 value 就是 fieldName，InfluxDB 中支持一条数据中插入多个 fieldName，这其实是一个语法上的优化，在实际的底层存储中，是当作多条数据来存储。</p>\n</li>\n<li><p>timestamp: 每一条数据都需要指定一个时间戳，在 TSM 存储引擎中会特殊对待，以为了优化后续的查询操作。 </p>\n</li>\n</ul>\n<p>tag + field + field 合起来就是point，可以简单理解为：</p>\n<ol>\n<li>tags是有索引的属性</li>\n<li>time是主索引，存储进去的时间</li>\n<li>fields是数据，没有索引的属性</li>\n</ol>\n<h2 id=\"如何应对重复值？\"><a href=\"#如何应对重复值？\" class=\"headerlink\" title=\"如何应对重复值？\"></a>如何应对重复值？</h2><p>一般插入的时候不会写time，但是time+用户自定义的tag 才是完整的tag，而tag又是用来做索引的，这里我们就可以考虑一下：完全一样的tag能不能插入呢？</p>\n<p>做以下测试：</p>\n<p>先进入influxdb的命令行界面，插入以下三条一样的数据：</p>\n<pre><code>INSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\nINSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\nINSERT dupltest,host=serverA,region=us_west value=0.64 1623146232869000000\n                                \n</code></pre>\n<p>然后再查询一下：</p>\n<pre><code>name: dupltest\ntime                host    region  value\n----                ----    ------  -----\n1623146232869000000 serverA us_west 0.64\n</code></pre>\n<p>果然不能重复插入。到这里问题就解决了：只要tags完全一样，就不会重复插入。</p>\n<p>那考虑其他的情况：如果time是自动生成的话要怎么办呢？这样就不能通过依赖重复tag来剔除掉重复数据了。</p>\n<p>可以考虑一下自己插入一个时间数据，然后查询的时候查询最后一个时间，如果时间小于这个最后时间，就不插入。</p>"},{"title":"Q003:influxdb中的存储策略&存储相关","date":"2021-06-10T18:49:03.000Z","_content":"\n为什么会发出这个问题呢？因为我在chronograf中查询influxdb数据的时候，发现要查询语句要这么写：\n\n    select * from monitor.rp30.measurement1 order by time DESC limit 10\n    select * from monitor.autogen.measurement1 order by time DESC limit 10\n\n可以看到两个表分别是：*monitor.rp30.measurement1*、*monitor.autogen.measurement1*，可以很明确的知道monitor是database， measurement1是measurement，那么中间的rp30、autogen是什么意思呢？\n\n这里可以快速做一个解答： 是influxdb中的存储策略\n\n<!--more-->\n\n## 存储策略\ninfluxdb的存储策略定义数据在influxdb中的保留时间，可以使用以下命令来查询当前数据库的存储策略\n    \n    > show retention policies on monitor\n    name    duration  shardGroupDuration replicaN default\n    ----    --------  ------------------ -------- -------\n    autogen 0s        168h0m0s           1        false\n    rp30    2160h0m0s 24h0m0s            1        true\n\n可以看到monitor的存储策略有两个：autogen和rp30， 每个字段意义如下：\n\n+ duration 数据保留时间\n+ shardGroupDuration shardGroup的保留时间，这是influxdb的一个基本结构，大于这个时间的数据查询效率比较低\n+ replicaN 副本个数\n+ default 是否是默认策略\n\n新建一个存储策略也可以用以下语句：\n    \n    CREATE RETENTION POLICY \"2_hours\" ON \"telegraf\" DURATION 2h REPLICATION 1 DEFAULT\n\ninfluxdb的存储策略的设置位置在：\n\n\n## influxdb的存储引擎\n\nTSM Tree\n\n这个本来想要自己写，搜了一下发现有位大哥讲的很透彻，放链接吧\n\n[时间序列数据库调研之InfluxDB](http://blog.fatedier.com/2016/07/05/research-of-time-series-database-influxdb/)\n\n[InfluxDB详解之TSM存储引擎解析(一)](http://blog.fatedier.com/2016/08/05/detailed-in-influxdb-tsm-storage-engine-one/)\n\n\n[InfluxDB详解之TSM存储引擎解析(二)](http://blog.fatedier.com/2016/08/15/detailed-in-influxdb-tsm-storage-engine-two/)\n\n大概总结一下，TSM是LSM的升级版","source":"_posts/2021-06-10-Q003-influxdb中的存储策略.md","raw":"---\ntitle: 'Q003:influxdb中的存储策略&存储相关'\ndate: 2021-06-10 18:49:03\ntags:\n- TICK\n- influxdb\ncategories:\n- 日常问题解决\n---\n\n为什么会发出这个问题呢？因为我在chronograf中查询influxdb数据的时候，发现要查询语句要这么写：\n\n    select * from monitor.rp30.measurement1 order by time DESC limit 10\n    select * from monitor.autogen.measurement1 order by time DESC limit 10\n\n可以看到两个表分别是：*monitor.rp30.measurement1*、*monitor.autogen.measurement1*，可以很明确的知道monitor是database， measurement1是measurement，那么中间的rp30、autogen是什么意思呢？\n\n这里可以快速做一个解答： 是influxdb中的存储策略\n\n<!--more-->\n\n## 存储策略\ninfluxdb的存储策略定义数据在influxdb中的保留时间，可以使用以下命令来查询当前数据库的存储策略\n    \n    > show retention policies on monitor\n    name    duration  shardGroupDuration replicaN default\n    ----    --------  ------------------ -------- -------\n    autogen 0s        168h0m0s           1        false\n    rp30    2160h0m0s 24h0m0s            1        true\n\n可以看到monitor的存储策略有两个：autogen和rp30， 每个字段意义如下：\n\n+ duration 数据保留时间\n+ shardGroupDuration shardGroup的保留时间，这是influxdb的一个基本结构，大于这个时间的数据查询效率比较低\n+ replicaN 副本个数\n+ default 是否是默认策略\n\n新建一个存储策略也可以用以下语句：\n    \n    CREATE RETENTION POLICY \"2_hours\" ON \"telegraf\" DURATION 2h REPLICATION 1 DEFAULT\n\ninfluxdb的存储策略的设置位置在：\n\n\n## influxdb的存储引擎\n\nTSM Tree\n\n这个本来想要自己写，搜了一下发现有位大哥讲的很透彻，放链接吧\n\n[时间序列数据库调研之InfluxDB](http://blog.fatedier.com/2016/07/05/research-of-time-series-database-influxdb/)\n\n[InfluxDB详解之TSM存储引擎解析(一)](http://blog.fatedier.com/2016/08/05/detailed-in-influxdb-tsm-storage-engine-one/)\n\n\n[InfluxDB详解之TSM存储引擎解析(二)](http://blog.fatedier.com/2016/08/15/detailed-in-influxdb-tsm-storage-engine-two/)\n\n大概总结一下，TSM是LSM的升级版","slug":"Q003-influxdb中的存储策略","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzh3i00202h5pdq7x7p9w","content":"<p>为什么会发出这个问题呢？因为我在chronograf中查询influxdb数据的时候，发现要查询语句要这么写：</p>\n<pre><code>select * from monitor.rp30.measurement1 order by time DESC limit 10\nselect * from monitor.autogen.measurement1 order by time DESC limit 10\n</code></pre>\n<p>可以看到两个表分别是：<em>monitor.rp30.measurement1</em>、<em>monitor.autogen.measurement1</em>，可以很明确的知道monitor是database， measurement1是measurement，那么中间的rp30、autogen是什么意思呢？</p>\n<p>这里可以快速做一个解答： 是influxdb中的存储策略</p>\n<a id=\"more\"></a>\n\n<h2 id=\"存储策略\"><a href=\"#存储策略\" class=\"headerlink\" title=\"存储策略\"></a>存储策略</h2><p>influxdb的存储策略定义数据在influxdb中的保留时间，可以使用以下命令来查询当前数据库的存储策略</p>\n<pre><code>&gt; show retention policies on monitor\nname    duration  shardGroupDuration replicaN default\n----    --------  ------------------ -------- -------\nautogen 0s        168h0m0s           1        false\nrp30    2160h0m0s 24h0m0s            1        true\n</code></pre>\n<p>可以看到monitor的存储策略有两个：autogen和rp30， 每个字段意义如下：</p>\n<ul>\n<li>duration 数据保留时间</li>\n<li>shardGroupDuration shardGroup的保留时间，这是influxdb的一个基本结构，大于这个时间的数据查询效率比较低</li>\n<li>replicaN 副本个数</li>\n<li>default 是否是默认策略</li>\n</ul>\n<p>新建一个存储策略也可以用以下语句：</p>\n<pre><code>CREATE RETENTION POLICY &quot;2_hours&quot; ON &quot;telegraf&quot; DURATION 2h REPLICATION 1 DEFAULT\n</code></pre>\n<p>influxdb的存储策略的设置位置在：</p>\n<h2 id=\"influxdb的存储引擎\"><a href=\"#influxdb的存储引擎\" class=\"headerlink\" title=\"influxdb的存储引擎\"></a>influxdb的存储引擎</h2><p>TSM Tree</p>\n<p>这个本来想要自己写，搜了一下发现有位大哥讲的很透彻，放链接吧</p>\n<p><a href=\"http://blog.fatedier.com/2016/07/05/research-of-time-series-database-influxdb/\">时间序列数据库调研之InfluxDB</a></p>\n<p><a href=\"http://blog.fatedier.com/2016/08/05/detailed-in-influxdb-tsm-storage-engine-one/\">InfluxDB详解之TSM存储引擎解析(一)</a></p>\n<p><a href=\"http://blog.fatedier.com/2016/08/15/detailed-in-influxdb-tsm-storage-engine-two/\">InfluxDB详解之TSM存储引擎解析(二)</a></p>\n<p>大概总结一下，TSM是LSM的升级版</p>\n","site":{"data":{}},"excerpt":"<p>为什么会发出这个问题呢？因为我在chronograf中查询influxdb数据的时候，发现要查询语句要这么写：</p>\n<pre><code>select * from monitor.rp30.measurement1 order by time DESC limit 10\nselect * from monitor.autogen.measurement1 order by time DESC limit 10\n</code></pre>\n<p>可以看到两个表分别是：<em>monitor.rp30.measurement1</em>、<em>monitor.autogen.measurement1</em>，可以很明确的知道monitor是database， measurement1是measurement，那么中间的rp30、autogen是什么意思呢？</p>\n<p>这里可以快速做一个解答： 是influxdb中的存储策略</p>","more":"<h2 id=\"存储策略\"><a href=\"#存储策略\" class=\"headerlink\" title=\"存储策略\"></a>存储策略</h2><p>influxdb的存储策略定义数据在influxdb中的保留时间，可以使用以下命令来查询当前数据库的存储策略</p>\n<pre><code>&gt; show retention policies on monitor\nname    duration  shardGroupDuration replicaN default\n----    --------  ------------------ -------- -------\nautogen 0s        168h0m0s           1        false\nrp30    2160h0m0s 24h0m0s            1        true\n</code></pre>\n<p>可以看到monitor的存储策略有两个：autogen和rp30， 每个字段意义如下：</p>\n<ul>\n<li>duration 数据保留时间</li>\n<li>shardGroupDuration shardGroup的保留时间，这是influxdb的一个基本结构，大于这个时间的数据查询效率比较低</li>\n<li>replicaN 副本个数</li>\n<li>default 是否是默认策略</li>\n</ul>\n<p>新建一个存储策略也可以用以下语句：</p>\n<pre><code>CREATE RETENTION POLICY &quot;2_hours&quot; ON &quot;telegraf&quot; DURATION 2h REPLICATION 1 DEFAULT\n</code></pre>\n<p>influxdb的存储策略的设置位置在：</p>\n<h2 id=\"influxdb的存储引擎\"><a href=\"#influxdb的存储引擎\" class=\"headerlink\" title=\"influxdb的存储引擎\"></a>influxdb的存储引擎</h2><p>TSM Tree</p>\n<p>这个本来想要自己写，搜了一下发现有位大哥讲的很透彻，放链接吧</p>\n<p><a href=\"http://blog.fatedier.com/2016/07/05/research-of-time-series-database-influxdb/\">时间序列数据库调研之InfluxDB</a></p>\n<p><a href=\"http://blog.fatedier.com/2016/08/05/detailed-in-influxdb-tsm-storage-engine-one/\">InfluxDB详解之TSM存储引擎解析(一)</a></p>\n<p><a href=\"http://blog.fatedier.com/2016/08/15/detailed-in-influxdb-tsm-storage-engine-two/\">InfluxDB详解之TSM存储引擎解析(二)</a></p>\n<p>大概总结一下，TSM是LSM的升级版</p>"},{"title":"sonor常见问题修改","date":"2021-08-11T11:52:20.000Z","_content":"\n好像是很久没有写blog了，今天在用sonor检查了一遍现在写的模块，开始对异味做一下修复，由于很多异味都是重复的，所以这里记录一下异味的类型&修复方法\n\n<!--more-->\n### Provide the parametrized type for this generic\n\n通用类声明时应该指定参数类型，否则可能在运行时捕获异常。 也就是说用 `List<>, R<>, Set<>` 这种的时候最好还是要指定一下里边参数的类型。\n\n### Use the primitive boolean expression here\n\n如果写了这样的代码： \n```\nif (data.isExist()){\n    doSomething\n}\n```\n有可能会抛出一个NullPointerException错误。所以应该使用布尔值来和这个值进行比较: `Boolean.TRUE.equals(data.isExist())`\n\n### Use isEmpty() to check whether the collection is empty or not\n\n测试一个List是否为null的时候使用`isEmpty()`要优于`object.size()==0`，前者的时间复杂度时O(1),后者的时间复杂度时O(n)\n\n### Boolean literals should not be redundant\n\n这是纯粹的写法问题： `Boolean isEqual = 3.equals(2)? true:false;` 比较冗余，不如直接写 `Boolean isEqual = 3.equals(2)`\n\n### Rename this method to prevent any misunderstanding or make it a constructor\n\n一个类里的方法应该只有构造器的方法name可以和类name一样。\n\n","source":"_posts/2021-08-11-sonor常见问题修改.md","raw":"---\ntitle: sonor常见问题修改\ndate: 2021-08-11 11:52:20\ntags:\n- java\n- bug修复\n- 代码异味\ncategories:\n- sonor\n---\n\n好像是很久没有写blog了，今天在用sonor检查了一遍现在写的模块，开始对异味做一下修复，由于很多异味都是重复的，所以这里记录一下异味的类型&修复方法\n\n<!--more-->\n### Provide the parametrized type for this generic\n\n通用类声明时应该指定参数类型，否则可能在运行时捕获异常。 也就是说用 `List<>, R<>, Set<>` 这种的时候最好还是要指定一下里边参数的类型。\n\n### Use the primitive boolean expression here\n\n如果写了这样的代码： \n```\nif (data.isExist()){\n    doSomething\n}\n```\n有可能会抛出一个NullPointerException错误。所以应该使用布尔值来和这个值进行比较: `Boolean.TRUE.equals(data.isExist())`\n\n### Use isEmpty() to check whether the collection is empty or not\n\n测试一个List是否为null的时候使用`isEmpty()`要优于`object.size()==0`，前者的时间复杂度时O(1),后者的时间复杂度时O(n)\n\n### Boolean literals should not be redundant\n\n这是纯粹的写法问题： `Boolean isEqual = 3.equals(2)? true:false;` 比较冗余，不如直接写 `Boolean isEqual = 3.equals(2)`\n\n### Rename this method to prevent any misunderstanding or make it a constructor\n\n一个类里的方法应该只有构造器的方法name可以和类name一样。\n\n","slug":"sonor常见问题修改","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzh4q00232h5paquo3elx","content":"<p>好像是很久没有写blog了，今天在用sonor检查了一遍现在写的模块，开始对异味做一下修复，由于很多异味都是重复的，所以这里记录一下异味的类型&amp;修复方法</p>\n<a id=\"more\"></a>\n<h3 id=\"Provide-the-parametrized-type-for-this-generic\"><a href=\"#Provide-the-parametrized-type-for-this-generic\" class=\"headerlink\" title=\"Provide the parametrized type for this generic\"></a>Provide the parametrized type for this generic</h3><p>通用类声明时应该指定参数类型，否则可能在运行时捕获异常。 也就是说用 <code>List&lt;&gt;, R&lt;&gt;, Set&lt;&gt;</code> 这种的时候最好还是要指定一下里边参数的类型。</p>\n<h3 id=\"Use-the-primitive-boolean-expression-here\"><a href=\"#Use-the-primitive-boolean-expression-here\" class=\"headerlink\" title=\"Use the primitive boolean expression here\"></a>Use the primitive boolean expression here</h3><p>如果写了这样的代码： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (data.isExist())&#123;</span><br><span class=\"line\">    doSomething</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有可能会抛出一个NullPointerException错误。所以应该使用布尔值来和这个值进行比较: <code>Boolean.TRUE.equals(data.isExist())</code></p>\n<h3 id=\"Use-isEmpty-to-check-whether-the-collection-is-empty-or-not\"><a href=\"#Use-isEmpty-to-check-whether-the-collection-is-empty-or-not\" class=\"headerlink\" title=\"Use isEmpty() to check whether the collection is empty or not\"></a>Use isEmpty() to check whether the collection is empty or not</h3><p>测试一个List是否为null的时候使用<code>isEmpty()</code>要优于<code>object.size()==0</code>，前者的时间复杂度时O(1),后者的时间复杂度时O(n)</p>\n<h3 id=\"Boolean-literals-should-not-be-redundant\"><a href=\"#Boolean-literals-should-not-be-redundant\" class=\"headerlink\" title=\"Boolean literals should not be redundant\"></a>Boolean literals should not be redundant</h3><p>这是纯粹的写法问题： <code>Boolean isEqual = 3.equals(2)? true:false;</code> 比较冗余，不如直接写 <code>Boolean isEqual = 3.equals(2)</code></p>\n<h3 id=\"Rename-this-method-to-prevent-any-misunderstanding-or-make-it-a-constructor\"><a href=\"#Rename-this-method-to-prevent-any-misunderstanding-or-make-it-a-constructor\" class=\"headerlink\" title=\"Rename this method to prevent any misunderstanding or make it a constructor\"></a>Rename this method to prevent any misunderstanding or make it a constructor</h3><p>一个类里的方法应该只有构造器的方法name可以和类name一样。</p>\n","site":{"data":{}},"excerpt":"<p>好像是很久没有写blog了，今天在用sonor检查了一遍现在写的模块，开始对异味做一下修复，由于很多异味都是重复的，所以这里记录一下异味的类型&amp;修复方法</p>","more":"<h3 id=\"Provide-the-parametrized-type-for-this-generic\"><a href=\"#Provide-the-parametrized-type-for-this-generic\" class=\"headerlink\" title=\"Provide the parametrized type for this generic\"></a>Provide the parametrized type for this generic</h3><p>通用类声明时应该指定参数类型，否则可能在运行时捕获异常。 也就是说用 <code>List&lt;&gt;, R&lt;&gt;, Set&lt;&gt;</code> 这种的时候最好还是要指定一下里边参数的类型。</p>\n<h3 id=\"Use-the-primitive-boolean-expression-here\"><a href=\"#Use-the-primitive-boolean-expression-here\" class=\"headerlink\" title=\"Use the primitive boolean expression here\"></a>Use the primitive boolean expression here</h3><p>如果写了这样的代码： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (data.isExist())&#123;</span><br><span class=\"line\">    doSomething</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有可能会抛出一个NullPointerException错误。所以应该使用布尔值来和这个值进行比较: <code>Boolean.TRUE.equals(data.isExist())</code></p>\n<h3 id=\"Use-isEmpty-to-check-whether-the-collection-is-empty-or-not\"><a href=\"#Use-isEmpty-to-check-whether-the-collection-is-empty-or-not\" class=\"headerlink\" title=\"Use isEmpty() to check whether the collection is empty or not\"></a>Use isEmpty() to check whether the collection is empty or not</h3><p>测试一个List是否为null的时候使用<code>isEmpty()</code>要优于<code>object.size()==0</code>，前者的时间复杂度时O(1),后者的时间复杂度时O(n)</p>\n<h3 id=\"Boolean-literals-should-not-be-redundant\"><a href=\"#Boolean-literals-should-not-be-redundant\" class=\"headerlink\" title=\"Boolean literals should not be redundant\"></a>Boolean literals should not be redundant</h3><p>这是纯粹的写法问题： <code>Boolean isEqual = 3.equals(2)? true:false;</code> 比较冗余，不如直接写 <code>Boolean isEqual = 3.equals(2)</code></p>\n<h3 id=\"Rename-this-method-to-prevent-any-misunderstanding-or-make-it-a-constructor\"><a href=\"#Rename-this-method-to-prevent-any-misunderstanding-or-make-it-a-constructor\" class=\"headerlink\" title=\"Rename this method to prevent any misunderstanding or make it a constructor\"></a>Rename this method to prevent any misunderstanding or make it a constructor</h3><p>一个类里的方法应该只有构造器的方法name可以和类name一样。</p>"},{"title":"SelFund 开发计划（2）","date":"2021-08-13T17:15:47.000Z","_content":"\n又是很长时间没有搞这个了，我痛定思痛，感觉之前一直没有开搞的原因还是在于没有明确需求：对比阿里云竞赛那个，需求非常明确，很快就搞了出来。\n\n所以这里我决定还是再明确一下需求：\n\n<!--more-->\n\n## 需求明确\n\n本质上，还是想要做一个可以帮助我选基金的工具，但是如果只是选择好像有点无聊，而且对于算法这块的要求比较高，所以我感觉还是从管理这一方面入手比较好：\n\n* basic：\n    * user\n        * 增加基金\n        * 删除基金\n        * 查看基金\n        * 增加user\n        * 删除user\n        * 查看user\n    * 基金\n        * 查看基金\n        * 计算两只基金的相似度\n* advanced\n    * user\n        * 增加持仓统计\n        * 每日盈亏计算\n    * 基金\n        * 定期刷新\n        * 其他高级特性\n\n\n现在一期计划先按照basic的要求来做，其实就是基础的用户管理 + 增删查改，再加上了解go语言，应该没有太大难度。\n\n","source":"_posts/2021-08-13-SelFund-开发计划（2）.md","raw":"---\ntitle: SelFund 开发计划（2）\ndate: 2021-08-13 17:15:47\ntags:\n- selFund\ncategories:\n- 开发计划\n---\n\n又是很长时间没有搞这个了，我痛定思痛，感觉之前一直没有开搞的原因还是在于没有明确需求：对比阿里云竞赛那个，需求非常明确，很快就搞了出来。\n\n所以这里我决定还是再明确一下需求：\n\n<!--more-->\n\n## 需求明确\n\n本质上，还是想要做一个可以帮助我选基金的工具，但是如果只是选择好像有点无聊，而且对于算法这块的要求比较高，所以我感觉还是从管理这一方面入手比较好：\n\n* basic：\n    * user\n        * 增加基金\n        * 删除基金\n        * 查看基金\n        * 增加user\n        * 删除user\n        * 查看user\n    * 基金\n        * 查看基金\n        * 计算两只基金的相似度\n* advanced\n    * user\n        * 增加持仓统计\n        * 每日盈亏计算\n    * 基金\n        * 定期刷新\n        * 其他高级特性\n\n\n现在一期计划先按照basic的要求来做，其实就是基础的用户管理 + 增删查改，再加上了解go语言，应该没有太大难度。\n\n","slug":"SelFund-开发计划（2）","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzh5t00272h5p3jjobuvg","content":"<p>又是很长时间没有搞这个了，我痛定思痛，感觉之前一直没有开搞的原因还是在于没有明确需求：对比阿里云竞赛那个，需求非常明确，很快就搞了出来。</p>\n<p>所以这里我决定还是再明确一下需求：</p>\n<a id=\"more\"></a>\n\n<h2 id=\"需求明确\"><a href=\"#需求明确\" class=\"headerlink\" title=\"需求明确\"></a>需求明确</h2><p>本质上，还是想要做一个可以帮助我选基金的工具，但是如果只是选择好像有点无聊，而且对于算法这块的要求比较高，所以我感觉还是从管理这一方面入手比较好：</p>\n<ul>\n<li>basic：<ul>\n<li>user<ul>\n<li>增加基金</li>\n<li>删除基金</li>\n<li>查看基金</li>\n<li>增加user</li>\n<li>删除user</li>\n<li>查看user</li>\n</ul>\n</li>\n<li>基金<ul>\n<li>查看基金</li>\n<li>计算两只基金的相似度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>advanced<ul>\n<li>user<ul>\n<li>增加持仓统计</li>\n<li>每日盈亏计算</li>\n</ul>\n</li>\n<li>基金<ul>\n<li>定期刷新</li>\n<li>其他高级特性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>现在一期计划先按照basic的要求来做，其实就是基础的用户管理 + 增删查改，再加上了解go语言，应该没有太大难度。</p>\n","site":{"data":{}},"excerpt":"<p>又是很长时间没有搞这个了，我痛定思痛，感觉之前一直没有开搞的原因还是在于没有明确需求：对比阿里云竞赛那个，需求非常明确，很快就搞了出来。</p>\n<p>所以这里我决定还是再明确一下需求：</p>","more":"<h2 id=\"需求明确\"><a href=\"#需求明确\" class=\"headerlink\" title=\"需求明确\"></a>需求明确</h2><p>本质上，还是想要做一个可以帮助我选基金的工具，但是如果只是选择好像有点无聊，而且对于算法这块的要求比较高，所以我感觉还是从管理这一方面入手比较好：</p>\n<ul>\n<li>basic：<ul>\n<li>user<ul>\n<li>增加基金</li>\n<li>删除基金</li>\n<li>查看基金</li>\n<li>增加user</li>\n<li>删除user</li>\n<li>查看user</li>\n</ul>\n</li>\n<li>基金<ul>\n<li>查看基金</li>\n<li>计算两只基金的相似度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>advanced<ul>\n<li>user<ul>\n<li>增加持仓统计</li>\n<li>每日盈亏计算</li>\n</ul>\n</li>\n<li>基金<ul>\n<li>定期刷新</li>\n<li>其他高级特性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>现在一期计划先按照basic的要求来做，其实就是基础的用户管理 + 增删查改，再加上了解go语言，应该没有太大难度。</p>"},{"title":"基于egg.js的聊天室后端服务","date":"2021-08-13T11:28:10.000Z","_content":"\n这大概是我写的第一个开源项目：本来是看到了阿里云的服务端性能大赛，就想要去插一脚去试试，结果没想到把程序写好之后卡在了部署上边，正好也有点忙（bushi），就干脆放弃了。所以就在这里把之前写好的代码开源出来，也算是迈出了个人的一小步吧。\n<!--more-->\n\n## 主要思路\n\n### 系统要求\n\n这个聊天室的要求其实很简单： 也就是做一套有bearerAuth token认证的服务系统，可以完成注册账号、登录、登出、创建聊天室、进出聊天室、发言、信息查看等功能就ok。\n\n### 技术选型\n\n最开始的时候是在java、python、go之间徘徊：\n\n* java是最熟悉的，但是总感觉spring这一套比较重，不太想搞一套，就放弃了java。\n\n* python只了解一些django，看了一下新版本的好像变了不少东西··电脑也没有装python环境，索性也就放弃了。\n\n* go实在是中文资料太少了，想要试一下gin框架感觉指导资料不太多··\n\n正好之前维护了一个组里的nodejs项目，基于阿里的egg.js，维护的时候印象相当好：结构非常明确，有完整的中文文档，调试也非常方便，就干脆用egg.js撸了一套。\n\n数据存储呢用的是mysql，本来想要用mysql + influxdb，感觉influxdb用来存储聊天室的聊天记录非常搭配，一个measurement就是一个聊天室的记录，后来精力有限也就没搞了。\n\n## 系统架构\n\n在官方给的swagger文档里边，把服务主要分了三块： room、user、message，但是实际写的时候，还是感觉给的 服务 - api的对应关系不太合理，就自己做了重新区分：\n\n* room\n    * creat new room\n    * get room information\n    * get roo user\n    * get room list\n\n* user\n    * enter room\n    * leave room\n    * create new user\n    * login\n    * get user by name\n    * send message\n    * get old message\n\n删掉了message这一块，把一些room的服务移动到了user里边，整体来看更加耦合一些。\n\n## 数据库构建\n\n构建数据库的时候主要在纠结几点：\n\n1. 如何将user和他enter的chatRoom对应起来\n2. 聊天信息如何存储\n\n第一个问题就用了一个state表来存储每个user和roomid的对应关系，用userid作为主键，也可以保证每个user只能进入一个room。\n\n第二个问题当前采用的方案是所有的聊天记录都放在一个record表里边，这样确实效率有点低了。我的理想方案是用influxdb来做存储，出于聊天记录持久化的目的，保存策略应该设置为不过期，然后每个roomid都是一个measurement，对应的字段就只有userid和发言内容，时间也可以直接用influxdb自动生成的时间，这样感觉起来就简介了很多。\n\n## 知识上的薄弱点\n\n对于代理、并发提交这块没研究过，有时间是要学习一下\n## 代码地址\n\n接下来上我的github地址：\n\n[nodeChatRoom](https://github.com/jiahui-qin/nodeChatRoom)","source":"_posts/2021-08-13-基于egg-js的聊天室后端服务.md","raw":"---\ntitle: 基于egg.js的聊天室后端服务\ndate: 2021-08-13 11:28:10\ntags:\n- nodejs\n- eggjs\n- 开源\ncategories:\n- 开源项目\n---\n\n这大概是我写的第一个开源项目：本来是看到了阿里云的服务端性能大赛，就想要去插一脚去试试，结果没想到把程序写好之后卡在了部署上边，正好也有点忙（bushi），就干脆放弃了。所以就在这里把之前写好的代码开源出来，也算是迈出了个人的一小步吧。\n<!--more-->\n\n## 主要思路\n\n### 系统要求\n\n这个聊天室的要求其实很简单： 也就是做一套有bearerAuth token认证的服务系统，可以完成注册账号、登录、登出、创建聊天室、进出聊天室、发言、信息查看等功能就ok。\n\n### 技术选型\n\n最开始的时候是在java、python、go之间徘徊：\n\n* java是最熟悉的，但是总感觉spring这一套比较重，不太想搞一套，就放弃了java。\n\n* python只了解一些django，看了一下新版本的好像变了不少东西··电脑也没有装python环境，索性也就放弃了。\n\n* go实在是中文资料太少了，想要试一下gin框架感觉指导资料不太多··\n\n正好之前维护了一个组里的nodejs项目，基于阿里的egg.js，维护的时候印象相当好：结构非常明确，有完整的中文文档，调试也非常方便，就干脆用egg.js撸了一套。\n\n数据存储呢用的是mysql，本来想要用mysql + influxdb，感觉influxdb用来存储聊天室的聊天记录非常搭配，一个measurement就是一个聊天室的记录，后来精力有限也就没搞了。\n\n## 系统架构\n\n在官方给的swagger文档里边，把服务主要分了三块： room、user、message，但是实际写的时候，还是感觉给的 服务 - api的对应关系不太合理，就自己做了重新区分：\n\n* room\n    * creat new room\n    * get room information\n    * get roo user\n    * get room list\n\n* user\n    * enter room\n    * leave room\n    * create new user\n    * login\n    * get user by name\n    * send message\n    * get old message\n\n删掉了message这一块，把一些room的服务移动到了user里边，整体来看更加耦合一些。\n\n## 数据库构建\n\n构建数据库的时候主要在纠结几点：\n\n1. 如何将user和他enter的chatRoom对应起来\n2. 聊天信息如何存储\n\n第一个问题就用了一个state表来存储每个user和roomid的对应关系，用userid作为主键，也可以保证每个user只能进入一个room。\n\n第二个问题当前采用的方案是所有的聊天记录都放在一个record表里边，这样确实效率有点低了。我的理想方案是用influxdb来做存储，出于聊天记录持久化的目的，保存策略应该设置为不过期，然后每个roomid都是一个measurement，对应的字段就只有userid和发言内容，时间也可以直接用influxdb自动生成的时间，这样感觉起来就简介了很多。\n\n## 知识上的薄弱点\n\n对于代理、并发提交这块没研究过，有时间是要学习一下\n## 代码地址\n\n接下来上我的github地址：\n\n[nodeChatRoom](https://github.com/jiahui-qin/nodeChatRoom)","slug":"基于egg-js的聊天室后端服务","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzh79002a2h5pdgfkh76e","content":"<p>这大概是我写的第一个开源项目：本来是看到了阿里云的服务端性能大赛，就想要去插一脚去试试，结果没想到把程序写好之后卡在了部署上边，正好也有点忙（bushi），就干脆放弃了。所以就在这里把之前写好的代码开源出来，也算是迈出了个人的一小步吧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"主要思路\"><a href=\"#主要思路\" class=\"headerlink\" title=\"主要思路\"></a>主要思路</h2><h3 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h3><p>这个聊天室的要求其实很简单： 也就是做一套有bearerAuth token认证的服务系统，可以完成注册账号、登录、登出、创建聊天室、进出聊天室、发言、信息查看等功能就ok。</p>\n<h3 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h3><p>最开始的时候是在java、python、go之间徘徊：</p>\n<ul>\n<li><p>java是最熟悉的，但是总感觉spring这一套比较重，不太想搞一套，就放弃了java。</p>\n</li>\n<li><p>python只了解一些django，看了一下新版本的好像变了不少东西··电脑也没有装python环境，索性也就放弃了。</p>\n</li>\n<li><p>go实在是中文资料太少了，想要试一下gin框架感觉指导资料不太多··</p>\n</li>\n</ul>\n<p>正好之前维护了一个组里的nodejs项目，基于阿里的egg.js，维护的时候印象相当好：结构非常明确，有完整的中文文档，调试也非常方便，就干脆用egg.js撸了一套。</p>\n<p>数据存储呢用的是mysql，本来想要用mysql + influxdb，感觉influxdb用来存储聊天室的聊天记录非常搭配，一个measurement就是一个聊天室的记录，后来精力有限也就没搞了。</p>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>在官方给的swagger文档里边，把服务主要分了三块： room、user、message，但是实际写的时候，还是感觉给的 服务 - api的对应关系不太合理，就自己做了重新区分：</p>\n<ul>\n<li><p>room</p>\n<ul>\n<li>creat new room</li>\n<li>get room information</li>\n<li>get roo user</li>\n<li>get room list</li>\n</ul>\n</li>\n<li><p>user</p>\n<ul>\n<li>enter room</li>\n<li>leave room</li>\n<li>create new user</li>\n<li>login</li>\n<li>get user by name</li>\n<li>send message</li>\n<li>get old message</li>\n</ul>\n</li>\n</ul>\n<p>删掉了message这一块，把一些room的服务移动到了user里边，整体来看更加耦合一些。</p>\n<h2 id=\"数据库构建\"><a href=\"#数据库构建\" class=\"headerlink\" title=\"数据库构建\"></a>数据库构建</h2><p>构建数据库的时候主要在纠结几点：</p>\n<ol>\n<li>如何将user和他enter的chatRoom对应起来</li>\n<li>聊天信息如何存储</li>\n</ol>\n<p>第一个问题就用了一个state表来存储每个user和roomid的对应关系，用userid作为主键，也可以保证每个user只能进入一个room。</p>\n<p>第二个问题当前采用的方案是所有的聊天记录都放在一个record表里边，这样确实效率有点低了。我的理想方案是用influxdb来做存储，出于聊天记录持久化的目的，保存策略应该设置为不过期，然后每个roomid都是一个measurement，对应的字段就只有userid和发言内容，时间也可以直接用influxdb自动生成的时间，这样感觉起来就简介了很多。</p>\n<h2 id=\"知识上的薄弱点\"><a href=\"#知识上的薄弱点\" class=\"headerlink\" title=\"知识上的薄弱点\"></a>知识上的薄弱点</h2><p>对于代理、并发提交这块没研究过，有时间是要学习一下</p>\n<h2 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h2><p>接下来上我的github地址：</p>\n<p><a href=\"https://github.com/jiahui-qin/nodeChatRoom\">nodeChatRoom</a></p>\n","site":{"data":{}},"excerpt":"<p>这大概是我写的第一个开源项目：本来是看到了阿里云的服务端性能大赛，就想要去插一脚去试试，结果没想到把程序写好之后卡在了部署上边，正好也有点忙（bushi），就干脆放弃了。所以就在这里把之前写好的代码开源出来，也算是迈出了个人的一小步吧。</p>","more":"<h2 id=\"主要思路\"><a href=\"#主要思路\" class=\"headerlink\" title=\"主要思路\"></a>主要思路</h2><h3 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h3><p>这个聊天室的要求其实很简单： 也就是做一套有bearerAuth token认证的服务系统，可以完成注册账号、登录、登出、创建聊天室、进出聊天室、发言、信息查看等功能就ok。</p>\n<h3 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h3><p>最开始的时候是在java、python、go之间徘徊：</p>\n<ul>\n<li><p>java是最熟悉的，但是总感觉spring这一套比较重，不太想搞一套，就放弃了java。</p>\n</li>\n<li><p>python只了解一些django，看了一下新版本的好像变了不少东西··电脑也没有装python环境，索性也就放弃了。</p>\n</li>\n<li><p>go实在是中文资料太少了，想要试一下gin框架感觉指导资料不太多··</p>\n</li>\n</ul>\n<p>正好之前维护了一个组里的nodejs项目，基于阿里的egg.js，维护的时候印象相当好：结构非常明确，有完整的中文文档，调试也非常方便，就干脆用egg.js撸了一套。</p>\n<p>数据存储呢用的是mysql，本来想要用mysql + influxdb，感觉influxdb用来存储聊天室的聊天记录非常搭配，一个measurement就是一个聊天室的记录，后来精力有限也就没搞了。</p>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>在官方给的swagger文档里边，把服务主要分了三块： room、user、message，但是实际写的时候，还是感觉给的 服务 - api的对应关系不太合理，就自己做了重新区分：</p>\n<ul>\n<li><p>room</p>\n<ul>\n<li>creat new room</li>\n<li>get room information</li>\n<li>get roo user</li>\n<li>get room list</li>\n</ul>\n</li>\n<li><p>user</p>\n<ul>\n<li>enter room</li>\n<li>leave room</li>\n<li>create new user</li>\n<li>login</li>\n<li>get user by name</li>\n<li>send message</li>\n<li>get old message</li>\n</ul>\n</li>\n</ul>\n<p>删掉了message这一块，把一些room的服务移动到了user里边，整体来看更加耦合一些。</p>\n<h2 id=\"数据库构建\"><a href=\"#数据库构建\" class=\"headerlink\" title=\"数据库构建\"></a>数据库构建</h2><p>构建数据库的时候主要在纠结几点：</p>\n<ol>\n<li>如何将user和他enter的chatRoom对应起来</li>\n<li>聊天信息如何存储</li>\n</ol>\n<p>第一个问题就用了一个state表来存储每个user和roomid的对应关系，用userid作为主键，也可以保证每个user只能进入一个room。</p>\n<p>第二个问题当前采用的方案是所有的聊天记录都放在一个record表里边，这样确实效率有点低了。我的理想方案是用influxdb来做存储，出于聊天记录持久化的目的，保存策略应该设置为不过期，然后每个roomid都是一个measurement，对应的字段就只有userid和发言内容，时间也可以直接用influxdb自动生成的时间，这样感觉起来就简介了很多。</p>\n<h2 id=\"知识上的薄弱点\"><a href=\"#知识上的薄弱点\" class=\"headerlink\" title=\"知识上的薄弱点\"></a>知识上的薄弱点</h2><p>对于代理、并发提交这块没研究过，有时间是要学习一下</p>\n<h2 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h2><p>接下来上我的github地址：</p>\n<p><a href=\"https://github.com/jiahui-qin/nodeChatRoom\">nodeChatRoom</a></p>"},{"title":"go学习&selFund进展","date":"2021-08-16T11:59:32.000Z","_content":"\n这里按照时间记录一下gin框架使用的大致问题&如何使用\n\n<!--more-->\n\n1. 在gin里使用`get & post`  (2021/8/16)\n\n    get示例：\n\n        router.GET(\"/getUserFund/:userid\", func(c *gin.Context) {\n\t\t    userid := c.Param(\"userid\")\n\t\t    c.String(http.StatusOK, \"Hello %s\", userid)\n\t    })\n\n    使用post取json里的数据相对麻烦一些，需要先创建对应json的结构体，然后再post方法里解析这个结构体，获取里边的数据，这个过程中也可以用gin来做一些校验之类的事情:\n\n        type UserInfo struct {\n        \tUser   string `form:\"User\" json:\"User\" xml:\"User\"  binding:\"required\"`\n        \tFund   string `form:\"Fund\" json:\"Fund\" xml:\"Fund\" binding:\"required\"`\n        \tAmount string `form:\"Amount\" json:\"Amount\" xml:\"Amount\" binding:\"-\"`\n        }\n\n\t    router.POST(\"/addUserFund\", func(c *gin.Context) {\n\t    \tvar json UserInfo\n\t    \tif err := c.ShouldBindBodyWith(&json, binding.JSON); err != nil {\n\t    \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t    \t\treturn\n\t    \t}\n\t    \tc.String(http.StatusOK, \" %s + %s\", json.User, json.Fund)\n\t    })\n\n    关于为什么用`ShouldBindBodyWith`是看了[这篇文章的观点](https://blog.csdn.net/yes169yes123/article/details/106204252),主要是`ShouldBindBodyWith`这个方法保存了requests的body到上下文，允许在处理方法中多次调用body；如果只调用一次的话其实可以用`ShouldBindJSON`来提高效率。\n\n    binding里边可以指定校验方法，比如`required`指定必需，`-`指定不是必填字段等····\n\n\n2. 引用其他package： (2021/08/17)\n\n    go中引用其他package有一个前提：要在gopath中可以找到，可以用`go env | grep GOPATH`来看一下gopath是哪个文件夹。被引用的包放在这里就比较稳当··虽然感觉怪怪的，但是我的文件目录现在是这样的：\n\n        - GOPATH\n            - src\n                - main.go\n                - go.mod\n                - service\n                    - user.go\n\n\n3. sql使用: (2021/8/19)\n\n    这两天稍微看了一下如何读写数据进数据库:\n\n    以下是基础版本：\n\n    ```go\n\n    //先建立表，建好之后可以直接拿建表sql生成下列结构，搜一下还是挺多的\n    type Fund struct {\n\t    Id    int    `gorm:\"column:id\" db:\"id\" json:\"id\" form:\"id\"`\n\t    Name  string `gorm:\"column:name\" db:\"name\" json:\"name\" form:\"name\"`\n\t    Code  string `gorm:\"column:code\" db:\"code\" json:\"code\" form:\"code\"`\n\t    Bond  string `gorm:\"column:bond\" db:\"bond\" json:\"bond\" form:\"bond\"`\n\t    Cash  string `gorm:\"column:cash\" db:\"cash\" json:\"cash\" form:\"cash\"`\n\t    Stock string `gorm:\"column:stock\" db:\"stock\" json:\"stock\" form:\"stock\"`\n\t    Title string `gorm:\"column:title\" db:\"title\" json:\"title\" form:\"title\"`\n\t    Total string `gorm:\"column:total\" db:\"total\" json:\"total\" form:\"total\"`\n    }\n\n    //先用sql.Open()填好信息，这个时候还不会连接数据库，然后QueryRow()方法可以获取单条数据\n    //用Scan()方法可以将得到的值映射到fund中，可以感觉到这里非常不美观··\n    //sql.ErrNoRows 这个可以来判断是否有返回结果\n    func GetFundInfo(fundCode string) Fund {\n    \tdb, _ := sql.Open(\"mysql\", \"root:123456@tcp(localhost:3306)/fund\")\n    \tvar fund Fund\n    \terr := db.QueryRow(\"select * from fund where code = ?\", fundCode).Scan(&fund.Id, &fund.Name, &fund.Code, &fund.Bond, &fund.Cash, &fund.Stock, &fund.Title, &fund.Total)\n    \tfmt.Println(fund)\n    \tdefer db.Close()\n    \tif err == sql.ErrNoRows {\n    \t\tfundPosition := getFundPosition(\"https://api.doctorxiong.club/v1/fund/  position?code=\" + fundCode)\n    \t\tsavePosition(fundPosition, fundCode)\n    \t}\n    \treturn fund\n    }\n    \n    //写数据也类似，这里直接给一个示例;\n    res, _ := db.Exec(\"INSERT INTO `fund`.`hold_stock` (`fund_code`, `stock_code`, `name`, `precent`, `hold`, `hold_amount`) VALUES(?,?,?,?,?,?)\", fundCode, v[0], v[1], v[2], v[3], v[4])\n\n    ```\n\n    用了java里边的ORM中自动将entity和数据库里边table的field做了映射，看上边的代码觉得真的很繁琐···\n\n    这里就可以用反射来帮助简化代码··至于怎么反射，我明天再看··\n\n\n    两个参考资料：\n        \n    1. [database/sql, 和資料庫打個招呼](https://ithelp.ithome.com.tw/articles/10220392)\n    2. [Go database/sql Scan & Value, 讓操作sql有一點點ORM的感覺](https://tedmax100.github.io/2020/12/21/Go-Database-Scan/)\n    3. [Go Reflect 提高反射性能](https://geektutu.com/post/hpg-reflect.html)\n\n\n4. 使用gorm(2021/9/2)\n\n    今天反应了过来，为啥要自己傻乎乎的写sql？直接用框架不香吗··类似mybatsis之类，go里边也有gorm、xorm之类的ORM库，使用起来大概会方便很多吧。","source":"_posts/2021-08-16-gin框架使用-selFund进展.md","raw":"---\ntitle: go学习&selFund进展\ndate: 2021-08-16 11:59:32\ntags:\n- gin\n- selFund\ncategories:\n- go\n---\n\n这里按照时间记录一下gin框架使用的大致问题&如何使用\n\n<!--more-->\n\n1. 在gin里使用`get & post`  (2021/8/16)\n\n    get示例：\n\n        router.GET(\"/getUserFund/:userid\", func(c *gin.Context) {\n\t\t    userid := c.Param(\"userid\")\n\t\t    c.String(http.StatusOK, \"Hello %s\", userid)\n\t    })\n\n    使用post取json里的数据相对麻烦一些，需要先创建对应json的结构体，然后再post方法里解析这个结构体，获取里边的数据，这个过程中也可以用gin来做一些校验之类的事情:\n\n        type UserInfo struct {\n        \tUser   string `form:\"User\" json:\"User\" xml:\"User\"  binding:\"required\"`\n        \tFund   string `form:\"Fund\" json:\"Fund\" xml:\"Fund\" binding:\"required\"`\n        \tAmount string `form:\"Amount\" json:\"Amount\" xml:\"Amount\" binding:\"-\"`\n        }\n\n\t    router.POST(\"/addUserFund\", func(c *gin.Context) {\n\t    \tvar json UserInfo\n\t    \tif err := c.ShouldBindBodyWith(&json, binding.JSON); err != nil {\n\t    \t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t    \t\treturn\n\t    \t}\n\t    \tc.String(http.StatusOK, \" %s + %s\", json.User, json.Fund)\n\t    })\n\n    关于为什么用`ShouldBindBodyWith`是看了[这篇文章的观点](https://blog.csdn.net/yes169yes123/article/details/106204252),主要是`ShouldBindBodyWith`这个方法保存了requests的body到上下文，允许在处理方法中多次调用body；如果只调用一次的话其实可以用`ShouldBindJSON`来提高效率。\n\n    binding里边可以指定校验方法，比如`required`指定必需，`-`指定不是必填字段等····\n\n\n2. 引用其他package： (2021/08/17)\n\n    go中引用其他package有一个前提：要在gopath中可以找到，可以用`go env | grep GOPATH`来看一下gopath是哪个文件夹。被引用的包放在这里就比较稳当··虽然感觉怪怪的，但是我的文件目录现在是这样的：\n\n        - GOPATH\n            - src\n                - main.go\n                - go.mod\n                - service\n                    - user.go\n\n\n3. sql使用: (2021/8/19)\n\n    这两天稍微看了一下如何读写数据进数据库:\n\n    以下是基础版本：\n\n    ```go\n\n    //先建立表，建好之后可以直接拿建表sql生成下列结构，搜一下还是挺多的\n    type Fund struct {\n\t    Id    int    `gorm:\"column:id\" db:\"id\" json:\"id\" form:\"id\"`\n\t    Name  string `gorm:\"column:name\" db:\"name\" json:\"name\" form:\"name\"`\n\t    Code  string `gorm:\"column:code\" db:\"code\" json:\"code\" form:\"code\"`\n\t    Bond  string `gorm:\"column:bond\" db:\"bond\" json:\"bond\" form:\"bond\"`\n\t    Cash  string `gorm:\"column:cash\" db:\"cash\" json:\"cash\" form:\"cash\"`\n\t    Stock string `gorm:\"column:stock\" db:\"stock\" json:\"stock\" form:\"stock\"`\n\t    Title string `gorm:\"column:title\" db:\"title\" json:\"title\" form:\"title\"`\n\t    Total string `gorm:\"column:total\" db:\"total\" json:\"total\" form:\"total\"`\n    }\n\n    //先用sql.Open()填好信息，这个时候还不会连接数据库，然后QueryRow()方法可以获取单条数据\n    //用Scan()方法可以将得到的值映射到fund中，可以感觉到这里非常不美观··\n    //sql.ErrNoRows 这个可以来判断是否有返回结果\n    func GetFundInfo(fundCode string) Fund {\n    \tdb, _ := sql.Open(\"mysql\", \"root:123456@tcp(localhost:3306)/fund\")\n    \tvar fund Fund\n    \terr := db.QueryRow(\"select * from fund where code = ?\", fundCode).Scan(&fund.Id, &fund.Name, &fund.Code, &fund.Bond, &fund.Cash, &fund.Stock, &fund.Title, &fund.Total)\n    \tfmt.Println(fund)\n    \tdefer db.Close()\n    \tif err == sql.ErrNoRows {\n    \t\tfundPosition := getFundPosition(\"https://api.doctorxiong.club/v1/fund/  position?code=\" + fundCode)\n    \t\tsavePosition(fundPosition, fundCode)\n    \t}\n    \treturn fund\n    }\n    \n    //写数据也类似，这里直接给一个示例;\n    res, _ := db.Exec(\"INSERT INTO `fund`.`hold_stock` (`fund_code`, `stock_code`, `name`, `precent`, `hold`, `hold_amount`) VALUES(?,?,?,?,?,?)\", fundCode, v[0], v[1], v[2], v[3], v[4])\n\n    ```\n\n    用了java里边的ORM中自动将entity和数据库里边table的field做了映射，看上边的代码觉得真的很繁琐···\n\n    这里就可以用反射来帮助简化代码··至于怎么反射，我明天再看··\n\n\n    两个参考资料：\n        \n    1. [database/sql, 和資料庫打個招呼](https://ithelp.ithome.com.tw/articles/10220392)\n    2. [Go database/sql Scan & Value, 讓操作sql有一點點ORM的感覺](https://tedmax100.github.io/2020/12/21/Go-Database-Scan/)\n    3. [Go Reflect 提高反射性能](https://geektutu.com/post/hpg-reflect.html)\n\n\n4. 使用gorm(2021/9/2)\n\n    今天反应了过来，为啥要自己傻乎乎的写sql？直接用框架不香吗··类似mybatsis之类，go里边也有gorm、xorm之类的ORM库，使用起来大概会方便很多吧。","slug":"gin框架使用-selFund进展","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzh7v002d2h5p56575eym","content":"<p>这里按照时间记录一下gin框架使用的大致问题&amp;如何使用</p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p>在gin里使用<code>get &amp; post</code>  (2021/8/16)</p>\n<p> get示例：</p>\n<pre><code> router.GET(&quot;/getUserFund/:userid&quot;, func(c *gin.Context) &#123;\n     userid := c.Param(&quot;userid&quot;)\n     c.String(http.StatusOK, &quot;Hello %s&quot;, userid)\n &#125;)\n</code></pre>\n<p> 使用post取json里的数据相对麻烦一些，需要先创建对应json的结构体，然后再post方法里解析这个结构体，获取里边的数据，这个过程中也可以用gin来做一些校验之类的事情:</p>\n<pre><code> type UserInfo struct &#123;\n     User   string `form:&quot;User&quot; json:&quot;User&quot; xml:&quot;User&quot;  binding:&quot;required&quot;`\n     Fund   string `form:&quot;Fund&quot; json:&quot;Fund&quot; xml:&quot;Fund&quot; binding:&quot;required&quot;`\n     Amount string `form:&quot;Amount&quot; json:&quot;Amount&quot; xml:&quot;Amount&quot; binding:&quot;-&quot;`\n &#125;\n\n router.POST(&quot;/addUserFund&quot;, func(c *gin.Context) &#123;\n     var json UserInfo\n     if err := c.ShouldBindBodyWith(&amp;json, binding.JSON); err != nil &#123;\n         c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n         return\n     &#125;\n     c.String(http.StatusOK, &quot; %s + %s&quot;, json.User, json.Fund)\n &#125;)\n</code></pre>\n<p> 关于为什么用<code>ShouldBindBodyWith</code>是看了<a href=\"https://blog.csdn.net/yes169yes123/article/details/106204252\">这篇文章的观点</a>,主要是<code>ShouldBindBodyWith</code>这个方法保存了requests的body到上下文，允许在处理方法中多次调用body；如果只调用一次的话其实可以用<code>ShouldBindJSON</code>来提高效率。</p>\n<p> binding里边可以指定校验方法，比如<code>required</code>指定必需，<code>-</code>指定不是必填字段等····</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>引用其他package： (2021/08/17)</p>\n<p> go中引用其他package有一个前提：要在gopath中可以找到，可以用<code>go env | grep GOPATH</code>来看一下gopath是哪个文件夹。被引用的包放在这里就比较稳当··虽然感觉怪怪的，但是我的文件目录现在是这样的：</p>\n<pre><code> - GOPATH\n     - src\n         - main.go\n         - go.mod\n         - service\n             - user.go\n</code></pre>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>sql使用: (2021/8/19)</p>\n<p> 这两天稍微看了一下如何读写数据进数据库:</p>\n<p> 以下是基础版本：</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先建立表，建好之后可以直接拿建表sql生成下列结构，搜一下还是挺多的</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Fund <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> Id    <span class=\"keyword\">int</span>    <span class=\"string\">`gorm:&quot;column:id&quot; db:&quot;id&quot; json:&quot;id&quot; form:&quot;id&quot;`</span></span><br><span class=\"line\"> Name  <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:name&quot; db:&quot;name&quot; json:&quot;name&quot; form:&quot;name&quot;`</span></span><br><span class=\"line\"> Code  <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:code&quot; db:&quot;code&quot; json:&quot;code&quot; form:&quot;code&quot;`</span></span><br><span class=\"line\"> Bond  <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:bond&quot; db:&quot;bond&quot; json:&quot;bond&quot; form:&quot;bond&quot;`</span></span><br><span class=\"line\"> Cash  <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:cash&quot; db:&quot;cash&quot; json:&quot;cash&quot; form:&quot;cash&quot;`</span></span><br><span class=\"line\"> Stock <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:stock&quot; db:&quot;stock&quot; json:&quot;stock&quot; form:&quot;stock&quot;`</span></span><br><span class=\"line\"> Title <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:title&quot; db:&quot;title&quot; json:&quot;title&quot; form:&quot;title&quot;`</span></span><br><span class=\"line\"> Total <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:total&quot; db:&quot;total&quot; json:&quot;total&quot; form:&quot;total&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先用sql.Open()填好信息，这个时候还不会连接数据库，然后QueryRow()方法可以获取单条数据</span></span><br><span class=\"line\"><span class=\"comment\">//用Scan()方法可以将得到的值映射到fund中，可以感觉到这里非常不美观··</span></span><br><span class=\"line\"><span class=\"comment\">//sql.ErrNoRows 这个可以来判断是否有返回结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetFundInfo</span><span class=\"params\">(fundCode <span class=\"keyword\">string</span>)</span> <span class=\"title\">Fund</span></span> &#123;</span><br><span class=\"line\">\tdb, _ := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;root:123456@tcp(localhost:3306)/fund&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fund Fund</span><br><span class=\"line\">\terr := db.QueryRow(<span class=\"string\">&quot;select * from fund where code = ?&quot;</span>, fundCode).Scan(&amp;fund.Id, &amp;fund.Name, &amp;fund.Code, &amp;fund.Bond, &amp;fund.Cash, &amp;fund.Stock, &amp;fund.Title, &amp;fund.Total)</span><br><span class=\"line\">\tfmt.Println(fund)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == sql.ErrNoRows &#123;</span><br><span class=\"line\">\t\tfundPosition := getFundPosition(<span class=\"string\">&quot;https://api.doctorxiong.club/v1/fund/  position?code=&quot;</span> + fundCode)</span><br><span class=\"line\">\t\tsavePosition(fundPosition, fundCode)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fund</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//写数据也类似，这里直接给一个示例;</span></span><br><span class=\"line\">res, _ := db.Exec(<span class=\"string\">&quot;INSERT INTO `fund`.`hold_stock` (`fund_code`, `stock_code`, `name`, `precent`, `hold`, `hold_amount`) VALUES(?,?,?,?,?,?)&quot;</span>, fundCode, v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>], v[<span class=\"number\">2</span>], v[<span class=\"number\">3</span>], v[<span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 用了java里边的ORM中自动将entity和数据库里边table的field做了映射，看上边的代码觉得真的很繁琐···</p>\n<p> 这里就可以用反射来帮助简化代码··至于怎么反射，我明天再看··</p>\n</li>\n</ol>\n<pre><code>两个参考资料：\n    \n1. [database/sql, 和資料庫打個招呼](https://ithelp.ithome.com.tw/articles/10220392)\n2. [Go database/sql Scan &amp; Value, 讓操作sql有一點點ORM的感覺](https://tedmax100.github.io/2020/12/21/Go-Database-Scan/)\n3. [Go Reflect 提高反射性能](https://geektutu.com/post/hpg-reflect.html)\n</code></pre>\n<ol start=\"4\">\n<li><p>使用gorm(2021/9/2)</p>\n<p> 今天反应了过来，为啥要自己傻乎乎的写sql？直接用框架不香吗··类似mybatsis之类，go里边也有gorm、xorm之类的ORM库，使用起来大概会方便很多吧。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>这里按照时间记录一下gin框架使用的大致问题&amp;如何使用</p>","more":"<ol>\n<li><p>在gin里使用<code>get &amp; post</code>  (2021/8/16)</p>\n<p> get示例：</p>\n<pre><code> router.GET(&quot;/getUserFund/:userid&quot;, func(c *gin.Context) &#123;\n     userid := c.Param(&quot;userid&quot;)\n     c.String(http.StatusOK, &quot;Hello %s&quot;, userid)\n &#125;)\n</code></pre>\n<p> 使用post取json里的数据相对麻烦一些，需要先创建对应json的结构体，然后再post方法里解析这个结构体，获取里边的数据，这个过程中也可以用gin来做一些校验之类的事情:</p>\n<pre><code> type UserInfo struct &#123;\n     User   string `form:&quot;User&quot; json:&quot;User&quot; xml:&quot;User&quot;  binding:&quot;required&quot;`\n     Fund   string `form:&quot;Fund&quot; json:&quot;Fund&quot; xml:&quot;Fund&quot; binding:&quot;required&quot;`\n     Amount string `form:&quot;Amount&quot; json:&quot;Amount&quot; xml:&quot;Amount&quot; binding:&quot;-&quot;`\n &#125;\n\n router.POST(&quot;/addUserFund&quot;, func(c *gin.Context) &#123;\n     var json UserInfo\n     if err := c.ShouldBindBodyWith(&amp;json, binding.JSON); err != nil &#123;\n         c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n         return\n     &#125;\n     c.String(http.StatusOK, &quot; %s + %s&quot;, json.User, json.Fund)\n &#125;)\n</code></pre>\n<p> 关于为什么用<code>ShouldBindBodyWith</code>是看了<a href=\"https://blog.csdn.net/yes169yes123/article/details/106204252\">这篇文章的观点</a>,主要是<code>ShouldBindBodyWith</code>这个方法保存了requests的body到上下文，允许在处理方法中多次调用body；如果只调用一次的话其实可以用<code>ShouldBindJSON</code>来提高效率。</p>\n<p> binding里边可以指定校验方法，比如<code>required</code>指定必需，<code>-</code>指定不是必填字段等····</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>引用其他package： (2021/08/17)</p>\n<p> go中引用其他package有一个前提：要在gopath中可以找到，可以用<code>go env | grep GOPATH</code>来看一下gopath是哪个文件夹。被引用的包放在这里就比较稳当··虽然感觉怪怪的，但是我的文件目录现在是这样的：</p>\n<pre><code> - GOPATH\n     - src\n         - main.go\n         - go.mod\n         - service\n             - user.go\n</code></pre>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>sql使用: (2021/8/19)</p>\n<p> 这两天稍微看了一下如何读写数据进数据库:</p>\n<p> 以下是基础版本：</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先建立表，建好之后可以直接拿建表sql生成下列结构，搜一下还是挺多的</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Fund <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> Id    <span class=\"keyword\">int</span>    <span class=\"string\">`gorm:&quot;column:id&quot; db:&quot;id&quot; json:&quot;id&quot; form:&quot;id&quot;`</span></span><br><span class=\"line\"> Name  <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:name&quot; db:&quot;name&quot; json:&quot;name&quot; form:&quot;name&quot;`</span></span><br><span class=\"line\"> Code  <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:code&quot; db:&quot;code&quot; json:&quot;code&quot; form:&quot;code&quot;`</span></span><br><span class=\"line\"> Bond  <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:bond&quot; db:&quot;bond&quot; json:&quot;bond&quot; form:&quot;bond&quot;`</span></span><br><span class=\"line\"> Cash  <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:cash&quot; db:&quot;cash&quot; json:&quot;cash&quot; form:&quot;cash&quot;`</span></span><br><span class=\"line\"> Stock <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:stock&quot; db:&quot;stock&quot; json:&quot;stock&quot; form:&quot;stock&quot;`</span></span><br><span class=\"line\"> Title <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:title&quot; db:&quot;title&quot; json:&quot;title&quot; form:&quot;title&quot;`</span></span><br><span class=\"line\"> Total <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:total&quot; db:&quot;total&quot; json:&quot;total&quot; form:&quot;total&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先用sql.Open()填好信息，这个时候还不会连接数据库，然后QueryRow()方法可以获取单条数据</span></span><br><span class=\"line\"><span class=\"comment\">//用Scan()方法可以将得到的值映射到fund中，可以感觉到这里非常不美观··</span></span><br><span class=\"line\"><span class=\"comment\">//sql.ErrNoRows 这个可以来判断是否有返回结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetFundInfo</span><span class=\"params\">(fundCode <span class=\"keyword\">string</span>)</span> <span class=\"title\">Fund</span></span> &#123;</span><br><span class=\"line\">\tdb, _ := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;root:123456@tcp(localhost:3306)/fund&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fund Fund</span><br><span class=\"line\">\terr := db.QueryRow(<span class=\"string\">&quot;select * from fund where code = ?&quot;</span>, fundCode).Scan(&amp;fund.Id, &amp;fund.Name, &amp;fund.Code, &amp;fund.Bond, &amp;fund.Cash, &amp;fund.Stock, &amp;fund.Title, &amp;fund.Total)</span><br><span class=\"line\">\tfmt.Println(fund)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == sql.ErrNoRows &#123;</span><br><span class=\"line\">\t\tfundPosition := getFundPosition(<span class=\"string\">&quot;https://api.doctorxiong.club/v1/fund/  position?code=&quot;</span> + fundCode)</span><br><span class=\"line\">\t\tsavePosition(fundPosition, fundCode)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fund</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//写数据也类似，这里直接给一个示例;</span></span><br><span class=\"line\">res, _ := db.Exec(<span class=\"string\">&quot;INSERT INTO `fund`.`hold_stock` (`fund_code`, `stock_code`, `name`, `precent`, `hold`, `hold_amount`) VALUES(?,?,?,?,?,?)&quot;</span>, fundCode, v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>], v[<span class=\"number\">2</span>], v[<span class=\"number\">3</span>], v[<span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 用了java里边的ORM中自动将entity和数据库里边table的field做了映射，看上边的代码觉得真的很繁琐···</p>\n<p> 这里就可以用反射来帮助简化代码··至于怎么反射，我明天再看··</p>\n</li>\n</ol>\n<pre><code>两个参考资料：\n    \n1. [database/sql, 和資料庫打個招呼](https://ithelp.ithome.com.tw/articles/10220392)\n2. [Go database/sql Scan &amp; Value, 讓操作sql有一點點ORM的感覺](https://tedmax100.github.io/2020/12/21/Go-Database-Scan/)\n3. [Go Reflect 提高反射性能](https://geektutu.com/post/hpg-reflect.html)\n</code></pre>\n<ol start=\"4\">\n<li><p>使用gorm(2021/9/2)</p>\n<p> 今天反应了过来，为啥要自己傻乎乎的写sql？直接用框架不香吗··类似mybatsis之类，go里边也有gorm、xorm之类的ORM库，使用起来大概会方便很多吧。</p>\n</li>\n</ol>"},{"title":"docker & 部署相关学习(1)","date":"2021-08-31T18:44:01.000Z","_content":"\n最近在搞docker部署相关的东西··不过由于缺少先验知识，导致学习效率极差就是了，这里大致记录一下8：\n\n<!--more-->\n\n1. 彻底删除一个docker的痕迹\n\n    先假设我们有以下docker\n    ```\n    eb92e7cc1982   mysql            \"docker-entrypoint.s…\"   6 weeks ago   Exited (255) 34 hours ago     0.0.0.0:3306->3306/tcp, 33060/tcp   mysql\n    ```\n    命令：\n    ```sh\n    docker stop mysql\n    docker rm mysql\n    docker rmi mysql\n    ```\n\n    其中前两个是停止、删除docker容器，第三个是删除docker镜像，注意这里的参数也是docker镜像的name\n\n\n2. 推送一个docker到docker hub\n\n    一般人们可能考虑推送到`docker.io`，这个也是默认的,但是我们肯定是要推送到私有仓库的，大概命令如下\n\n    ```sh\n    docker login 10.10.10.10 ## 私有仓库地址\n    ## 确定本地有这个docker image的情况下，给本地的image mysql 打上tag\n    docker tag mysql 10.10.10.10/mysql:1.0.0.0\n    docker push 10.10.10.10/mysql:1.0.0.0\n    ```\n    为什么要这么打tag··是因为我发现tag不加私有仓库地址的话好像会默认推送到`docker.io`,前边加上地址的话就会按照地址去推送。后边的1.0.0.0是版本号，不加的话就默认是latest？\n\n3. docker-compose\n\n    docker-compose是编排docker容器/服务的工具，具体的还是看文档吧··我说的再说好像也不是很详细··\n\n4. docker的网络类型\n\n    这里主要是看docker容器如何与宿主机通信、如何与其他的docker容器通信：\n\n    1. bridge， 默认的网络桥接模式，会为每一个docker容器分配、设置ip，并将容器连接到docker0虚拟网桥，通过网桥和iptables nat表和宿主机通信\n    2. container 和一个指定的docker共享ip、端口范围\n    3. none 不指定网络连接方式，可以手工指定\n    4. host 使用宿主机的ip和端口\n\n    还有一个在docker-compose里边可以用`networks`来指定网络，限定一些服务在一个网段里。\n\n    如果有新的服务也想进入这个网段，可以在此服务的docker-compose文档中加入以下network来进入此网段\n    ```yml\n    networks:\n        exist_net:\n            external: true\n    ```\n\n\n5. Dockerfile\n\n    按照我的理解Dockerfile实际上是创建docker的文档，写好dockerfile之后，可以使用\n    `docker build` 来生成对应镜像。\n\n","source":"_posts/2021-08-31-docker-部署相关学习-1.md","raw":"---\ntitle: docker & 部署相关学习(1)\ndate: 2021-08-31 18:44:01\ntags:\n- docker\n- docker-compose\ncategories:\n- 部署&运维\n---\n\n最近在搞docker部署相关的东西··不过由于缺少先验知识，导致学习效率极差就是了，这里大致记录一下8：\n\n<!--more-->\n\n1. 彻底删除一个docker的痕迹\n\n    先假设我们有以下docker\n    ```\n    eb92e7cc1982   mysql            \"docker-entrypoint.s…\"   6 weeks ago   Exited (255) 34 hours ago     0.0.0.0:3306->3306/tcp, 33060/tcp   mysql\n    ```\n    命令：\n    ```sh\n    docker stop mysql\n    docker rm mysql\n    docker rmi mysql\n    ```\n\n    其中前两个是停止、删除docker容器，第三个是删除docker镜像，注意这里的参数也是docker镜像的name\n\n\n2. 推送一个docker到docker hub\n\n    一般人们可能考虑推送到`docker.io`，这个也是默认的,但是我们肯定是要推送到私有仓库的，大概命令如下\n\n    ```sh\n    docker login 10.10.10.10 ## 私有仓库地址\n    ## 确定本地有这个docker image的情况下，给本地的image mysql 打上tag\n    docker tag mysql 10.10.10.10/mysql:1.0.0.0\n    docker push 10.10.10.10/mysql:1.0.0.0\n    ```\n    为什么要这么打tag··是因为我发现tag不加私有仓库地址的话好像会默认推送到`docker.io`,前边加上地址的话就会按照地址去推送。后边的1.0.0.0是版本号，不加的话就默认是latest？\n\n3. docker-compose\n\n    docker-compose是编排docker容器/服务的工具，具体的还是看文档吧··我说的再说好像也不是很详细··\n\n4. docker的网络类型\n\n    这里主要是看docker容器如何与宿主机通信、如何与其他的docker容器通信：\n\n    1. bridge， 默认的网络桥接模式，会为每一个docker容器分配、设置ip，并将容器连接到docker0虚拟网桥，通过网桥和iptables nat表和宿主机通信\n    2. container 和一个指定的docker共享ip、端口范围\n    3. none 不指定网络连接方式，可以手工指定\n    4. host 使用宿主机的ip和端口\n\n    还有一个在docker-compose里边可以用`networks`来指定网络，限定一些服务在一个网段里。\n\n    如果有新的服务也想进入这个网段，可以在此服务的docker-compose文档中加入以下network来进入此网段\n    ```yml\n    networks:\n        exist_net:\n            external: true\n    ```\n\n\n5. Dockerfile\n\n    按照我的理解Dockerfile实际上是创建docker的文档，写好dockerfile之后，可以使用\n    `docker build` 来生成对应镜像。\n\n","slug":"docker-部署相关学习-1","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzh9t002h2h5p6wkqcnrv","content":"<p>最近在搞docker部署相关的东西··不过由于缺少先验知识，导致学习效率极差就是了，这里大致记录一下8：</p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p>彻底删除一个docker的痕迹</p>\n<p> 先假设我们有以下docker</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eb92e7cc1982   mysql            &quot;docker-entrypoint.s…&quot;   6 weeks ago   Exited (255) 34 hours ago     0.0.0.0:3306-&gt;3306&#x2F;tcp, 33060&#x2F;tcp   mysql</span><br></pre></td></tr></table></figure>\n<p> 命令：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop mysql</span><br><span class=\"line\">docker rm mysql</span><br><span class=\"line\">docker rmi mysql</span><br></pre></td></tr></table></figure>\n<p> 其中前两个是停止、删除docker容器，第三个是删除docker镜像，注意这里的参数也是docker镜像的name</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>推送一个docker到docker hub</p>\n<p> 一般人们可能考虑推送到<code>docker.io</code>，这个也是默认的,但是我们肯定是要推送到私有仓库的，大概命令如下</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login 10.10.10.10 <span class=\"comment\">## 私有仓库地址</span></span><br><span class=\"line\"><span class=\"comment\">## 确定本地有这个docker image的情况下，给本地的image mysql 打上tag</span></span><br><span class=\"line\">docker tag mysql 10.10.10.10/mysql:1.0.0.0</span><br><span class=\"line\">docker push 10.10.10.10/mysql:1.0.0.0</span><br></pre></td></tr></table></figure>\n<p> 为什么要这么打tag··是因为我发现tag不加私有仓库地址的话好像会默认推送到<code>docker.io</code>,前边加上地址的话就会按照地址去推送。后边的1.0.0.0是版本号，不加的话就默认是latest？</p>\n</li>\n<li><p>docker-compose</p>\n<p> docker-compose是编排docker容器/服务的工具，具体的还是看文档吧··我说的再说好像也不是很详细··</p>\n</li>\n<li><p>docker的网络类型</p>\n<p> 这里主要是看docker容器如何与宿主机通信、如何与其他的docker容器通信：</p>\n<ol>\n<li><p>bridge， 默认的网络桥接模式，会为每一个docker容器分配、设置ip，并将容器连接到docker0虚拟网桥，通过网桥和iptables nat表和宿主机通信</p>\n</li>\n<li><p>container 和一个指定的docker共享ip、端口范围</p>\n</li>\n<li><p>none 不指定网络连接方式，可以手工指定</p>\n</li>\n<li><p>host 使用宿主机的ip和端口</p>\n<p>还有一个在docker-compose里边可以用<code>networks</code>来指定网络，限定一些服务在一个网段里。</p>\n<p>如果有新的服务也想进入这个网段，可以在此服务的docker-compose文档中加入以下network来进入此网段</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">    <span class=\"attr\">exist_net:</span></span><br><span class=\"line\">        <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>Dockerfile</p>\n<p> 按照我的理解Dockerfile实际上是创建docker的文档，写好dockerfile之后，可以使用<br> <code>docker build</code> 来生成对应镜像。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>最近在搞docker部署相关的东西··不过由于缺少先验知识，导致学习效率极差就是了，这里大致记录一下8：</p>","more":"<ol>\n<li><p>彻底删除一个docker的痕迹</p>\n<p> 先假设我们有以下docker</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eb92e7cc1982   mysql            &quot;docker-entrypoint.s…&quot;   6 weeks ago   Exited (255) 34 hours ago     0.0.0.0:3306-&gt;3306&#x2F;tcp, 33060&#x2F;tcp   mysql</span><br></pre></td></tr></table></figure>\n<p> 命令：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop mysql</span><br><span class=\"line\">docker rm mysql</span><br><span class=\"line\">docker rmi mysql</span><br></pre></td></tr></table></figure>\n<p> 其中前两个是停止、删除docker容器，第三个是删除docker镜像，注意这里的参数也是docker镜像的name</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>推送一个docker到docker hub</p>\n<p> 一般人们可能考虑推送到<code>docker.io</code>，这个也是默认的,但是我们肯定是要推送到私有仓库的，大概命令如下</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login 10.10.10.10 <span class=\"comment\">## 私有仓库地址</span></span><br><span class=\"line\"><span class=\"comment\">## 确定本地有这个docker image的情况下，给本地的image mysql 打上tag</span></span><br><span class=\"line\">docker tag mysql 10.10.10.10/mysql:1.0.0.0</span><br><span class=\"line\">docker push 10.10.10.10/mysql:1.0.0.0</span><br></pre></td></tr></table></figure>\n<p> 为什么要这么打tag··是因为我发现tag不加私有仓库地址的话好像会默认推送到<code>docker.io</code>,前边加上地址的话就会按照地址去推送。后边的1.0.0.0是版本号，不加的话就默认是latest？</p>\n</li>\n<li><p>docker-compose</p>\n<p> docker-compose是编排docker容器/服务的工具，具体的还是看文档吧··我说的再说好像也不是很详细··</p>\n</li>\n<li><p>docker的网络类型</p>\n<p> 这里主要是看docker容器如何与宿主机通信、如何与其他的docker容器通信：</p>\n<ol>\n<li><p>bridge， 默认的网络桥接模式，会为每一个docker容器分配、设置ip，并将容器连接到docker0虚拟网桥，通过网桥和iptables nat表和宿主机通信</p>\n</li>\n<li><p>container 和一个指定的docker共享ip、端口范围</p>\n</li>\n<li><p>none 不指定网络连接方式，可以手工指定</p>\n</li>\n<li><p>host 使用宿主机的ip和端口</p>\n<p>还有一个在docker-compose里边可以用<code>networks</code>来指定网络，限定一些服务在一个网段里。</p>\n<p>如果有新的服务也想进入这个网段，可以在此服务的docker-compose文档中加入以下network来进入此网段</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">    <span class=\"attr\">exist_net:</span></span><br><span class=\"line\">        <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>Dockerfile</p>\n<p> 按照我的理解Dockerfile实际上是创建docker的文档，写好dockerfile之后，可以使用<br> <code>docker build</code> 来生成对应镜像。</p>\n</li>\n</ol>"},{"title":"对高可用的第一印象","date":"2021-09-02T23:04:33.000Z","_content":"\n研三准备面试的时候就关注过这些概念，无奈自己太菜，也没有怎么实践过，粗糙的看了几篇文章也就全都忘掉了。\n\n今天在地铁上的时候，又看了几篇高可用相关的文章，感觉有一点点微小的意思，大致写一下自己的理解吧\n\n## 什么是高可用？\n\n一个系统在99.99...%的时间里都是可用的，那就是高可用，总而言之，就是要尽可能的减少系统停机的时间\n\n## 那么会有哪些因素会影响系统的高可用？\n\n1. 程序设计：程序写的太烂导致内存溢出、程序挂掉还有啥高可用可言··这个在商业软件上大概考虑的不是很多\n\n2. 承载的容器挂掉：这个就不是我们自己能够控制的了，比如掉电、寿命、温度··各种因素都有可能导致一个物理机挂掉，那么这种情况怎么办？\n\n## 如何提高系统的可用性？\n\n思路很简单：如果放在一个机器上容易挂掉，那么就放在n台机器上：n越大，可用性就越高：总不可能这么多台机器一起挂掉吧。\n\n那么放在n台机器上就有问题了：\n\n各台机器之间的地位是平等的，还是master-slave的结构呢？现在来看大多使用的是主从架构。\n\n接下来就大致看一下不同类型的应用程序如何实现高可用：\n\n### RabbitMQ:镜像集群模式\n\n所有的queue都可以存在于多个实例，一个实例挂了还可以请求其它的实例··\n\n### Kafka：HA机制\n\n每部分数据都会同步存储到多台设备上，然后读写都和一个leader打交道，只有所有的数据在所有的follower上都写入成功，才返回写成功，这样也才可以读到这个数据。一个follower的数据失效之后还可以在其他的follower上读。\n\n### Redis：哨兵\n\n哨兵是一个独立的进程，通过向redis服务器发送命令并等待响应从而实现监控。\n\n当master发生故障的时候，多个哨兵进行投票，确认此master下线之后，就会进行故障切换：把每个哨兵所监控的slave服务器的master切换到新选举出来的master","source":"_posts/2021-09-02-对高可用的第一印象.md","raw":"---\ntitle: 对高可用的第一印象\ndate: 2021-09-02 23:04:33\ntags:\ncategories:\n- 方法论\n---\n\n研三准备面试的时候就关注过这些概念，无奈自己太菜，也没有怎么实践过，粗糙的看了几篇文章也就全都忘掉了。\n\n今天在地铁上的时候，又看了几篇高可用相关的文章，感觉有一点点微小的意思，大致写一下自己的理解吧\n\n## 什么是高可用？\n\n一个系统在99.99...%的时间里都是可用的，那就是高可用，总而言之，就是要尽可能的减少系统停机的时间\n\n## 那么会有哪些因素会影响系统的高可用？\n\n1. 程序设计：程序写的太烂导致内存溢出、程序挂掉还有啥高可用可言··这个在商业软件上大概考虑的不是很多\n\n2. 承载的容器挂掉：这个就不是我们自己能够控制的了，比如掉电、寿命、温度··各种因素都有可能导致一个物理机挂掉，那么这种情况怎么办？\n\n## 如何提高系统的可用性？\n\n思路很简单：如果放在一个机器上容易挂掉，那么就放在n台机器上：n越大，可用性就越高：总不可能这么多台机器一起挂掉吧。\n\n那么放在n台机器上就有问题了：\n\n各台机器之间的地位是平等的，还是master-slave的结构呢？现在来看大多使用的是主从架构。\n\n接下来就大致看一下不同类型的应用程序如何实现高可用：\n\n### RabbitMQ:镜像集群模式\n\n所有的queue都可以存在于多个实例，一个实例挂了还可以请求其它的实例··\n\n### Kafka：HA机制\n\n每部分数据都会同步存储到多台设备上，然后读写都和一个leader打交道，只有所有的数据在所有的follower上都写入成功，才返回写成功，这样也才可以读到这个数据。一个follower的数据失效之后还可以在其他的follower上读。\n\n### Redis：哨兵\n\n哨兵是一个独立的进程，通过向redis服务器发送命令并等待响应从而实现监控。\n\n当master发生故障的时候，多个哨兵进行投票，确认此master下线之后，就会进行故障切换：把每个哨兵所监控的slave服务器的master切换到新选举出来的master","slug":"对高可用的第一印象","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhab002i2h5p6jzjg071","content":"<p>研三准备面试的时候就关注过这些概念，无奈自己太菜，也没有怎么实践过，粗糙的看了几篇文章也就全都忘掉了。</p>\n<p>今天在地铁上的时候，又看了几篇高可用相关的文章，感觉有一点点微小的意思，大致写一下自己的理解吧</p>\n<h2 id=\"什么是高可用？\"><a href=\"#什么是高可用？\" class=\"headerlink\" title=\"什么是高可用？\"></a>什么是高可用？</h2><p>一个系统在99.99…%的时间里都是可用的，那就是高可用，总而言之，就是要尽可能的减少系统停机的时间</p>\n<h2 id=\"那么会有哪些因素会影响系统的高可用？\"><a href=\"#那么会有哪些因素会影响系统的高可用？\" class=\"headerlink\" title=\"那么会有哪些因素会影响系统的高可用？\"></a>那么会有哪些因素会影响系统的高可用？</h2><ol>\n<li><p>程序设计：程序写的太烂导致内存溢出、程序挂掉还有啥高可用可言··这个在商业软件上大概考虑的不是很多</p>\n</li>\n<li><p>承载的容器挂掉：这个就不是我们自己能够控制的了，比如掉电、寿命、温度··各种因素都有可能导致一个物理机挂掉，那么这种情况怎么办？</p>\n</li>\n</ol>\n<h2 id=\"如何提高系统的可用性？\"><a href=\"#如何提高系统的可用性？\" class=\"headerlink\" title=\"如何提高系统的可用性？\"></a>如何提高系统的可用性？</h2><p>思路很简单：如果放在一个机器上容易挂掉，那么就放在n台机器上：n越大，可用性就越高：总不可能这么多台机器一起挂掉吧。</p>\n<p>那么放在n台机器上就有问题了：</p>\n<p>各台机器之间的地位是平等的，还是master-slave的结构呢？现在来看大多使用的是主从架构。</p>\n<p>接下来就大致看一下不同类型的应用程序如何实现高可用：</p>\n<h3 id=\"RabbitMQ-镜像集群模式\"><a href=\"#RabbitMQ-镜像集群模式\" class=\"headerlink\" title=\"RabbitMQ:镜像集群模式\"></a>RabbitMQ:镜像集群模式</h3><p>所有的queue都可以存在于多个实例，一个实例挂了还可以请求其它的实例··</p>\n<h3 id=\"Kafka：HA机制\"><a href=\"#Kafka：HA机制\" class=\"headerlink\" title=\"Kafka：HA机制\"></a>Kafka：HA机制</h3><p>每部分数据都会同步存储到多台设备上，然后读写都和一个leader打交道，只有所有的数据在所有的follower上都写入成功，才返回写成功，这样也才可以读到这个数据。一个follower的数据失效之后还可以在其他的follower上读。</p>\n<h3 id=\"Redis：哨兵\"><a href=\"#Redis：哨兵\" class=\"headerlink\" title=\"Redis：哨兵\"></a>Redis：哨兵</h3><p>哨兵是一个独立的进程，通过向redis服务器发送命令并等待响应从而实现监控。</p>\n<p>当master发生故障的时候，多个哨兵进行投票，确认此master下线之后，就会进行故障切换：把每个哨兵所监控的slave服务器的master切换到新选举出来的master</p>\n","site":{"data":{}},"excerpt":"","more":"<p>研三准备面试的时候就关注过这些概念，无奈自己太菜，也没有怎么实践过，粗糙的看了几篇文章也就全都忘掉了。</p>\n<p>今天在地铁上的时候，又看了几篇高可用相关的文章，感觉有一点点微小的意思，大致写一下自己的理解吧</p>\n<h2 id=\"什么是高可用？\"><a href=\"#什么是高可用？\" class=\"headerlink\" title=\"什么是高可用？\"></a>什么是高可用？</h2><p>一个系统在99.99…%的时间里都是可用的，那就是高可用，总而言之，就是要尽可能的减少系统停机的时间</p>\n<h2 id=\"那么会有哪些因素会影响系统的高可用？\"><a href=\"#那么会有哪些因素会影响系统的高可用？\" class=\"headerlink\" title=\"那么会有哪些因素会影响系统的高可用？\"></a>那么会有哪些因素会影响系统的高可用？</h2><ol>\n<li><p>程序设计：程序写的太烂导致内存溢出、程序挂掉还有啥高可用可言··这个在商业软件上大概考虑的不是很多</p>\n</li>\n<li><p>承载的容器挂掉：这个就不是我们自己能够控制的了，比如掉电、寿命、温度··各种因素都有可能导致一个物理机挂掉，那么这种情况怎么办？</p>\n</li>\n</ol>\n<h2 id=\"如何提高系统的可用性？\"><a href=\"#如何提高系统的可用性？\" class=\"headerlink\" title=\"如何提高系统的可用性？\"></a>如何提高系统的可用性？</h2><p>思路很简单：如果放在一个机器上容易挂掉，那么就放在n台机器上：n越大，可用性就越高：总不可能这么多台机器一起挂掉吧。</p>\n<p>那么放在n台机器上就有问题了：</p>\n<p>各台机器之间的地位是平等的，还是master-slave的结构呢？现在来看大多使用的是主从架构。</p>\n<p>接下来就大致看一下不同类型的应用程序如何实现高可用：</p>\n<h3 id=\"RabbitMQ-镜像集群模式\"><a href=\"#RabbitMQ-镜像集群模式\" class=\"headerlink\" title=\"RabbitMQ:镜像集群模式\"></a>RabbitMQ:镜像集群模式</h3><p>所有的queue都可以存在于多个实例，一个实例挂了还可以请求其它的实例··</p>\n<h3 id=\"Kafka：HA机制\"><a href=\"#Kafka：HA机制\" class=\"headerlink\" title=\"Kafka：HA机制\"></a>Kafka：HA机制</h3><p>每部分数据都会同步存储到多台设备上，然后读写都和一个leader打交道，只有所有的数据在所有的follower上都写入成功，才返回写成功，这样也才可以读到这个数据。一个follower的数据失效之后还可以在其他的follower上读。</p>\n<h3 id=\"Redis：哨兵\"><a href=\"#Redis：哨兵\" class=\"headerlink\" title=\"Redis：哨兵\"></a>Redis：哨兵</h3><p>哨兵是一个独立的进程，通过向redis服务器发送命令并等待响应从而实现监控。</p>\n<p>当master发生故障的时候，多个哨兵进行投票，确认此master下线之后，就会进行故障切换：把每个哨兵所监控的slave服务器的master切换到新选举出来的master</p>\n"},{"title":"gorm使用踩坑","date":"2021-09-07T18:53:20.000Z","_content":"\n从上周觉得在go里边手写`db.exec(select * from xxx)` 非常痛苦之后，开始使用gorm这个框架，感觉确实很不错，但是可能是由于自己的见识还是不够广阔，导致踩了一些小坑，还留了一些问题··这里先记录一下：\n\n## 什么是gorm\n\ngorm可以类比到java的mybatsis，非常方便的orm操作框架，可以方便的操作数据库。\n\n<!--more-->\n\n## 怎么使用\n\n[官方教程](https://learnku.com/docs/gorm/v2)里边讲的已经非常详细了，我大致大致写一下流程\n\n\n### 先建立数据库对应的struct，这个可以对应到spring里边的model\n\n```go\ntype User struct {\n\tgorm.Model\n\tName   string `gorm:\"column:name; unique\" db:\"name\" json:\"name\" form:\"name\"` \n\tDesc   string `gorm:\"column:desc\" db:\"desc\" json:\"desc\" form:\"desc\"`         \n}\n```\n\n这就是个非常普通的model，接下来我们挨个看：\n\n* 这个struct的名字是user， 可以用`db.AutoMigrate(&User{})`来检查表和struct是否匹配，如果这个表不存在，就会以struct的名字的复数形式来自动建表，比如这个结构自动建表的表名就是**users**，当然如果不想用这个表名的话，也可以手动指定其他的表名。\n\n* gorm.Model是内嵌了一个结构体，这个结构体里边包括id、创建时间、修改时间、删除时间。我们亦可以内嵌其他的结构体进来。\n\n* 每个属性后边的描述体`gorm:\"column:name; unique\" db:\"name\" json:\"name\" form:\"name\"`在gorm这个里边可以指定列名、列是否是主键、是否是索引等····这里没有指定主键是因为grom.Model里边的id为默认主键。\n\n### 线程池\n\n```go\nfunc getConn() (*gorm.DB, error) {\n\tdsn := \"root:123456@tcp(localhost:3306)/fund?charset=utf8mb4&parseTime=True&loc=Local\"\n\tdb, error := gorm.Open(mysql.Open(dsn), &gorm.Config{})\n\tsqlDB, _ := db.DB()\n\t// SetMaxIdleConns 设置空闲连接池中连接的最大数量\n\tsqlDB.SetMaxIdleConns(10)\n\t// SetMaxOpenConns 设置打开数据库连接的最大数量。\n\tsqlDB.SetMaxOpenConns(100)\n\t// SetConnMaxLifetime 设置了连接可复用的最大时间。\n\tsqlDB.SetConnMaxLifetime(time.Hour)\n\treturn db, error\n}\n```\n\n其他的函数直接调用`getConn()`获取db就可以了。\n\n### CRUD Methods\n\n```go\n// 新增\nuser := &User{Name: name, Desc: desc}\ndb.Debug().Create(user)\n\n//查询\nvar user_in User\ndb.Debug().Where(user).First(&user_in)\n```\n为啥明明是最重要的却只写了这么点？因为这块网上资料最多似乎没必要看我的···\n\n但是这块我有个问题··先记录一下\n\n```go\n// 以id作为冲突键，如果有冲突的话什么都不做\ndb.Clauses(clause.OnConflict{DoNothing: true}).Create(&user)\n\n// 以其他字段作为主键，如果冲突的话do nothing\ndb.Clauses(clause.OnConflict{\n\tColumns:   []clause.Column{{Name: \"name\"}},DoNothing: true}).Create(&user)\n\n```\n我想要做Upsert，用name来检查冲突，如果有冲突的话do nothing，在上边代码的第二段里边指定了name，可以看生成的sql还是用的是id···不知道有没有大佬知道要怎么搞\n\n----\n\n其他好像没啥了，想起来、遇到了再补充","source":"_posts/2021-09-07-gorm使用踩坑.md","raw":"---\ntitle: gorm使用踩坑\ndate: 2021-09-07 18:53:20\ntags:\n- gorm\n- go\n- selfund\ncategories:\n- go\n---\n\n从上周觉得在go里边手写`db.exec(select * from xxx)` 非常痛苦之后，开始使用gorm这个框架，感觉确实很不错，但是可能是由于自己的见识还是不够广阔，导致踩了一些小坑，还留了一些问题··这里先记录一下：\n\n## 什么是gorm\n\ngorm可以类比到java的mybatsis，非常方便的orm操作框架，可以方便的操作数据库。\n\n<!--more-->\n\n## 怎么使用\n\n[官方教程](https://learnku.com/docs/gorm/v2)里边讲的已经非常详细了，我大致大致写一下流程\n\n\n### 先建立数据库对应的struct，这个可以对应到spring里边的model\n\n```go\ntype User struct {\n\tgorm.Model\n\tName   string `gorm:\"column:name; unique\" db:\"name\" json:\"name\" form:\"name\"` \n\tDesc   string `gorm:\"column:desc\" db:\"desc\" json:\"desc\" form:\"desc\"`         \n}\n```\n\n这就是个非常普通的model，接下来我们挨个看：\n\n* 这个struct的名字是user， 可以用`db.AutoMigrate(&User{})`来检查表和struct是否匹配，如果这个表不存在，就会以struct的名字的复数形式来自动建表，比如这个结构自动建表的表名就是**users**，当然如果不想用这个表名的话，也可以手动指定其他的表名。\n\n* gorm.Model是内嵌了一个结构体，这个结构体里边包括id、创建时间、修改时间、删除时间。我们亦可以内嵌其他的结构体进来。\n\n* 每个属性后边的描述体`gorm:\"column:name; unique\" db:\"name\" json:\"name\" form:\"name\"`在gorm这个里边可以指定列名、列是否是主键、是否是索引等····这里没有指定主键是因为grom.Model里边的id为默认主键。\n\n### 线程池\n\n```go\nfunc getConn() (*gorm.DB, error) {\n\tdsn := \"root:123456@tcp(localhost:3306)/fund?charset=utf8mb4&parseTime=True&loc=Local\"\n\tdb, error := gorm.Open(mysql.Open(dsn), &gorm.Config{})\n\tsqlDB, _ := db.DB()\n\t// SetMaxIdleConns 设置空闲连接池中连接的最大数量\n\tsqlDB.SetMaxIdleConns(10)\n\t// SetMaxOpenConns 设置打开数据库连接的最大数量。\n\tsqlDB.SetMaxOpenConns(100)\n\t// SetConnMaxLifetime 设置了连接可复用的最大时间。\n\tsqlDB.SetConnMaxLifetime(time.Hour)\n\treturn db, error\n}\n```\n\n其他的函数直接调用`getConn()`获取db就可以了。\n\n### CRUD Methods\n\n```go\n// 新增\nuser := &User{Name: name, Desc: desc}\ndb.Debug().Create(user)\n\n//查询\nvar user_in User\ndb.Debug().Where(user).First(&user_in)\n```\n为啥明明是最重要的却只写了这么点？因为这块网上资料最多似乎没必要看我的···\n\n但是这块我有个问题··先记录一下\n\n```go\n// 以id作为冲突键，如果有冲突的话什么都不做\ndb.Clauses(clause.OnConflict{DoNothing: true}).Create(&user)\n\n// 以其他字段作为主键，如果冲突的话do nothing\ndb.Clauses(clause.OnConflict{\n\tColumns:   []clause.Column{{Name: \"name\"}},DoNothing: true}).Create(&user)\n\n```\n我想要做Upsert，用name来检查冲突，如果有冲突的话do nothing，在上边代码的第二段里边指定了name，可以看生成的sql还是用的是id···不知道有没有大佬知道要怎么搞\n\n----\n\n其他好像没啥了，想起来、遇到了再补充","slug":"gorm使用踩坑","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhbg002m2h5p9eg9etv6","content":"<p>从上周觉得在go里边手写<code>db.exec(select * from xxx)</code> 非常痛苦之后，开始使用gorm这个框架，感觉确实很不错，但是可能是由于自己的见识还是不够广阔，导致踩了一些小坑，还留了一些问题··这里先记录一下：</p>\n<h2 id=\"什么是gorm\"><a href=\"#什么是gorm\" class=\"headerlink\" title=\"什么是gorm\"></a>什么是gorm</h2><p>gorm可以类比到java的mybatsis，非常方便的orm操作框架，可以方便的操作数据库。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"怎么使用\"><a href=\"#怎么使用\" class=\"headerlink\" title=\"怎么使用\"></a>怎么使用</h2><p><a href=\"https://learnku.com/docs/gorm/v2\">官方教程</a>里边讲的已经非常详细了，我大致大致写一下流程</p>\n<h3 id=\"先建立数据库对应的struct，这个可以对应到spring里边的model\"><a href=\"#先建立数据库对应的struct，这个可以对应到spring里边的model\" class=\"headerlink\" title=\"先建立数据库对应的struct，这个可以对应到spring里边的model\"></a>先建立数据库对应的struct，这个可以对应到spring里边的model</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:name; unique&quot; db:&quot;name&quot; json:&quot;name&quot; form:&quot;name&quot;`</span> </span><br><span class=\"line\">\tDesc   <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:desc&quot; db:&quot;desc&quot; json:&quot;desc&quot; form:&quot;desc&quot;`</span>         </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是个非常普通的model，接下来我们挨个看：</p>\n<ul>\n<li><p>这个struct的名字是user， 可以用<code>db.AutoMigrate(&amp;User&#123;&#125;)</code>来检查表和struct是否匹配，如果这个表不存在，就会以struct的名字的复数形式来自动建表，比如这个结构自动建表的表名就是<strong>users</strong>，当然如果不想用这个表名的话，也可以手动指定其他的表名。</p>\n</li>\n<li><p>gorm.Model是内嵌了一个结构体，这个结构体里边包括id、创建时间、修改时间、删除时间。我们亦可以内嵌其他的结构体进来。</p>\n</li>\n<li><p>每个属性后边的描述体<code>gorm:&quot;column:name; unique&quot; db:&quot;name&quot; json:&quot;name&quot; form:&quot;name&quot;</code>在gorm这个里边可以指定列名、列是否是主键、是否是索引等····这里没有指定主键是因为grom.Model里边的id为默认主键。</p>\n</li>\n</ul>\n<h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getConn</span><span class=\"params\">()</span> <span class=\"params\">(*gorm.DB, error)</span></span> &#123;</span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(localhost:3306)/fund?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class=\"line\">\tdb, error := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class=\"line\">\tsqlDB, _ := db.DB()</span><br><span class=\"line\">\t<span class=\"comment\">// SetMaxIdleConns 设置空闲连接池中连接的最大数量</span></span><br><span class=\"line\">\tsqlDB.SetMaxIdleConns(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// SetMaxOpenConns 设置打开数据库连接的最大数量。</span></span><br><span class=\"line\">\tsqlDB.SetMaxOpenConns(<span class=\"number\">100</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// SetConnMaxLifetime 设置了连接可复用的最大时间。</span></span><br><span class=\"line\">\tsqlDB.SetConnMaxLifetime(time.Hour)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> db, error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他的函数直接调用<code>getConn()</code>获取db就可以了。</p>\n<h3 id=\"CRUD-Methods\"><a href=\"#CRUD-Methods\" class=\"headerlink\" title=\"CRUD Methods\"></a>CRUD Methods</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新增</span></span><br><span class=\"line\">user := &amp;User&#123;Name: name, Desc: desc&#125;</span><br><span class=\"line\">db.Debug().Create(user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user_in User</span><br><span class=\"line\">db.Debug().Where(user).First(&amp;user_in)</span><br></pre></td></tr></table></figure>\n<p>为啥明明是最重要的却只写了这么点？因为这块网上资料最多似乎没必要看我的···</p>\n<p>但是这块我有个问题··先记录一下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以id作为冲突键，如果有冲突的话什么都不做</span></span><br><span class=\"line\">db.Clauses(clause.OnConflict&#123;DoNothing: <span class=\"literal\">true</span>&#125;).Create(&amp;user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以其他字段作为主键，如果冲突的话do nothing</span></span><br><span class=\"line\">db.Clauses(clause.OnConflict&#123;</span><br><span class=\"line\">\tColumns:   []clause.Column&#123;&#123;Name: <span class=\"string\">&quot;name&quot;</span>&#125;&#125;,DoNothing: <span class=\"literal\">true</span>&#125;).Create(&amp;user)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我想要做Upsert，用name来检查冲突，如果有冲突的话do nothing，在上边代码的第二段里边指定了name，可以看生成的sql还是用的是id···不知道有没有大佬知道要怎么搞</p>\n<hr>\n<p>其他好像没啥了，想起来、遇到了再补充</p>\n","site":{"data":{}},"excerpt":"<p>从上周觉得在go里边手写<code>db.exec(select * from xxx)</code> 非常痛苦之后，开始使用gorm这个框架，感觉确实很不错，但是可能是由于自己的见识还是不够广阔，导致踩了一些小坑，还留了一些问题··这里先记录一下：</p>\n<h2 id=\"什么是gorm\"><a href=\"#什么是gorm\" class=\"headerlink\" title=\"什么是gorm\"></a>什么是gorm</h2><p>gorm可以类比到java的mybatsis，非常方便的orm操作框架，可以方便的操作数据库。</p>","more":"<h2 id=\"怎么使用\"><a href=\"#怎么使用\" class=\"headerlink\" title=\"怎么使用\"></a>怎么使用</h2><p><a href=\"https://learnku.com/docs/gorm/v2\">官方教程</a>里边讲的已经非常详细了，我大致大致写一下流程</p>\n<h3 id=\"先建立数据库对应的struct，这个可以对应到spring里边的model\"><a href=\"#先建立数据库对应的struct，这个可以对应到spring里边的model\" class=\"headerlink\" title=\"先建立数据库对应的struct，这个可以对应到spring里边的model\"></a>先建立数据库对应的struct，这个可以对应到spring里边的model</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:name; unique&quot; db:&quot;name&quot; json:&quot;name&quot; form:&quot;name&quot;`</span> </span><br><span class=\"line\">\tDesc   <span class=\"keyword\">string</span> <span class=\"string\">`gorm:&quot;column:desc&quot; db:&quot;desc&quot; json:&quot;desc&quot; form:&quot;desc&quot;`</span>         </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是个非常普通的model，接下来我们挨个看：</p>\n<ul>\n<li><p>这个struct的名字是user， 可以用<code>db.AutoMigrate(&amp;User&#123;&#125;)</code>来检查表和struct是否匹配，如果这个表不存在，就会以struct的名字的复数形式来自动建表，比如这个结构自动建表的表名就是<strong>users</strong>，当然如果不想用这个表名的话，也可以手动指定其他的表名。</p>\n</li>\n<li><p>gorm.Model是内嵌了一个结构体，这个结构体里边包括id、创建时间、修改时间、删除时间。我们亦可以内嵌其他的结构体进来。</p>\n</li>\n<li><p>每个属性后边的描述体<code>gorm:&quot;column:name; unique&quot; db:&quot;name&quot; json:&quot;name&quot; form:&quot;name&quot;</code>在gorm这个里边可以指定列名、列是否是主键、是否是索引等····这里没有指定主键是因为grom.Model里边的id为默认主键。</p>\n</li>\n</ul>\n<h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getConn</span><span class=\"params\">()</span> <span class=\"params\">(*gorm.DB, error)</span></span> &#123;</span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(localhost:3306)/fund?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class=\"line\">\tdb, error := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class=\"line\">\tsqlDB, _ := db.DB()</span><br><span class=\"line\">\t<span class=\"comment\">// SetMaxIdleConns 设置空闲连接池中连接的最大数量</span></span><br><span class=\"line\">\tsqlDB.SetMaxIdleConns(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// SetMaxOpenConns 设置打开数据库连接的最大数量。</span></span><br><span class=\"line\">\tsqlDB.SetMaxOpenConns(<span class=\"number\">100</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// SetConnMaxLifetime 设置了连接可复用的最大时间。</span></span><br><span class=\"line\">\tsqlDB.SetConnMaxLifetime(time.Hour)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> db, error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他的函数直接调用<code>getConn()</code>获取db就可以了。</p>\n<h3 id=\"CRUD-Methods\"><a href=\"#CRUD-Methods\" class=\"headerlink\" title=\"CRUD Methods\"></a>CRUD Methods</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新增</span></span><br><span class=\"line\">user := &amp;User&#123;Name: name, Desc: desc&#125;</span><br><span class=\"line\">db.Debug().Create(user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user_in User</span><br><span class=\"line\">db.Debug().Where(user).First(&amp;user_in)</span><br></pre></td></tr></table></figure>\n<p>为啥明明是最重要的却只写了这么点？因为这块网上资料最多似乎没必要看我的···</p>\n<p>但是这块我有个问题··先记录一下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以id作为冲突键，如果有冲突的话什么都不做</span></span><br><span class=\"line\">db.Clauses(clause.OnConflict&#123;DoNothing: <span class=\"literal\">true</span>&#125;).Create(&amp;user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以其他字段作为主键，如果冲突的话do nothing</span></span><br><span class=\"line\">db.Clauses(clause.OnConflict&#123;</span><br><span class=\"line\">\tColumns:   []clause.Column&#123;&#123;Name: <span class=\"string\">&quot;name&quot;</span>&#125;&#125;,DoNothing: <span class=\"literal\">true</span>&#125;).Create(&amp;user)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我想要做Upsert，用name来检查冲突，如果有冲突的话do nothing，在上边代码的第二段里边指定了name，可以看生成的sql还是用的是id···不知道有没有大佬知道要怎么搞</p>\n<hr>\n<p>其他好像没啥了，想起来、遇到了再补充</p>"},{"title":"gin中的错误处理","date":"2021-09-08T23:13:56.000Z","_content":"\n这两天在写selfund这个项目，但是却发现有个问题好像没有一个通用过的解决方案，那就是go里边的错误处理，这个在java里边大概以及比较成熟了吧，也有一套通用的逻辑来做(无论合理还是不合理)但是在go里边却只有一个error interface提供给我们来做错误处理，未免显得有点过于单薄了吧··\n\n所以这两天就好好看了一下别人在go里边是怎么做错误处理的，在这里记录一下\n\n<!--more-->\n\n> 拖更了好几天，今天有点时间给补上吧\n\n主要是参考了[go-gin-example]()这个github项目，我大致讲一下···\n\n我想做的错误处理主要还是针对http响应的：最原始的gin响应是这样的：`g.C.JSON(http.someCode, interface{})`,然而我想要的是正常的http响应,是这样形式的：\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"\",\n    \"data\":\"\"\n}\n```\n所以我们要做的，就是在c.Json的外边再包一层··（其实就是自己把c.json()的第二个参数interface包装为我们想要的这个形式。）\n\n```go\ntype Response struct {\n\tCode int         `json:\"code\"`\n\tMsg  string      `json:\"msg\"`\n\tData interface{} `json:\"data\"`\n}\n```\n然后再包装一下原先的响应，直接用新的方法来做响应：\n\n```go\nfunc (g *Gin) ResponseError(errorMsg string, data interface{}) {\n\tg.C.JSON(http.StatusInternalServerError, Response{\n\t\tCode: 500,\n\t\tMsg:  GetMsg(errorMsg),\n\t\tData: data,\n\t})\n}\n\nfunc (g *Gin) ResponseSuccess(data interface{}) {\n\tg.C.JSON(http.StatusOK, Response{\n\t\tCode: 200,\n\t\tData: data,\n\t})\n}\n```\n\n写完之后发现好像也没啥，其实更主要的还是对于go程序运行中错误的处理。\n\n现在大致是按照以下思路走的：\n\n1. 所有的error都要进行处理，本层处理不了的就会抛到上层，最后作为response中的data抛出来\n\n2. 抛出来的error要带类型、带抛出位置···（这点还没有完成，要做这个的话需要把error类也做一个包装。）","source":"_posts/2021-09-08-go中的错误处理.md","raw":"---\ntitle: gin中的错误处理\ndate: 2021-09-08 23:13:56\ntags:\n- selfund\n- gin\ncategories:\n- go\n---\n\n这两天在写selfund这个项目，但是却发现有个问题好像没有一个通用过的解决方案，那就是go里边的错误处理，这个在java里边大概以及比较成熟了吧，也有一套通用的逻辑来做(无论合理还是不合理)但是在go里边却只有一个error interface提供给我们来做错误处理，未免显得有点过于单薄了吧··\n\n所以这两天就好好看了一下别人在go里边是怎么做错误处理的，在这里记录一下\n\n<!--more-->\n\n> 拖更了好几天，今天有点时间给补上吧\n\n主要是参考了[go-gin-example]()这个github项目，我大致讲一下···\n\n我想做的错误处理主要还是针对http响应的：最原始的gin响应是这样的：`g.C.JSON(http.someCode, interface{})`,然而我想要的是正常的http响应,是这样形式的：\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"\",\n    \"data\":\"\"\n}\n```\n所以我们要做的，就是在c.Json的外边再包一层··（其实就是自己把c.json()的第二个参数interface包装为我们想要的这个形式。）\n\n```go\ntype Response struct {\n\tCode int         `json:\"code\"`\n\tMsg  string      `json:\"msg\"`\n\tData interface{} `json:\"data\"`\n}\n```\n然后再包装一下原先的响应，直接用新的方法来做响应：\n\n```go\nfunc (g *Gin) ResponseError(errorMsg string, data interface{}) {\n\tg.C.JSON(http.StatusInternalServerError, Response{\n\t\tCode: 500,\n\t\tMsg:  GetMsg(errorMsg),\n\t\tData: data,\n\t})\n}\n\nfunc (g *Gin) ResponseSuccess(data interface{}) {\n\tg.C.JSON(http.StatusOK, Response{\n\t\tCode: 200,\n\t\tData: data,\n\t})\n}\n```\n\n写完之后发现好像也没啥，其实更主要的还是对于go程序运行中错误的处理。\n\n现在大致是按照以下思路走的：\n\n1. 所有的error都要进行处理，本层处理不了的就会抛到上层，最后作为response中的data抛出来\n\n2. 抛出来的error要带类型、带抛出位置···（这点还没有完成，要做这个的话需要把error类也做一个包装。）","slug":"go中的错误处理","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhbs002o2h5pcwiq6b9m","content":"<p>这两天在写selfund这个项目，但是却发现有个问题好像没有一个通用过的解决方案，那就是go里边的错误处理，这个在java里边大概以及比较成熟了吧，也有一套通用的逻辑来做(无论合理还是不合理)但是在go里边却只有一个error interface提供给我们来做错误处理，未免显得有点过于单薄了吧··</p>\n<p>所以这两天就好好看了一下别人在go里边是怎么做错误处理的，在这里记录一下</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>拖更了好几天，今天有点时间给补上吧</p>\n</blockquote>\n<p>主要是参考了<a href=\"\">go-gin-example</a>这个github项目，我大致讲一下···</p>\n<p>我想做的错误处理主要还是针对http响应的：最原始的gin响应是这样的：<code>g.C.JSON(http.someCode, interface&#123;&#125;)</code>,然而我想要的是正常的http响应,是这样形式的：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;code&quot;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;data&quot;</span>:<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以我们要做的，就是在c.Json的外边再包一层··（其实就是自己把c.json()的第二个参数interface包装为我们想要的这个形式。）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Response <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tCode <span class=\"keyword\">int</span>         <span class=\"string\">`json:&quot;code&quot;`</span></span><br><span class=\"line\">\tMsg  <span class=\"keyword\">string</span>      <span class=\"string\">`json:&quot;msg&quot;`</span></span><br><span class=\"line\">\tData <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:&quot;data&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后再包装一下原先的响应，直接用新的方法来做响应：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Gin)</span> <span class=\"title\">ResponseError</span><span class=\"params\">(errorMsg <span class=\"keyword\">string</span>, data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tg.C.JSON(http.StatusInternalServerError, Response&#123;</span><br><span class=\"line\">\t\tCode: <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\tMsg:  GetMsg(errorMsg),</span><br><span class=\"line\">\t\tData: data,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Gin)</span> <span class=\"title\">ResponseSuccess</span><span class=\"params\">(data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tg.C.JSON(http.StatusOK, Response&#123;</span><br><span class=\"line\">\t\tCode: <span class=\"number\">200</span>,</span><br><span class=\"line\">\t\tData: data,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写完之后发现好像也没啥，其实更主要的还是对于go程序运行中错误的处理。</p>\n<p>现在大致是按照以下思路走的：</p>\n<ol>\n<li><p>所有的error都要进行处理，本层处理不了的就会抛到上层，最后作为response中的data抛出来</p>\n</li>\n<li><p>抛出来的error要带类型、带抛出位置···（这点还没有完成，要做这个的话需要把error类也做一个包装。）</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>这两天在写selfund这个项目，但是却发现有个问题好像没有一个通用过的解决方案，那就是go里边的错误处理，这个在java里边大概以及比较成熟了吧，也有一套通用的逻辑来做(无论合理还是不合理)但是在go里边却只有一个error interface提供给我们来做错误处理，未免显得有点过于单薄了吧··</p>\n<p>所以这两天就好好看了一下别人在go里边是怎么做错误处理的，在这里记录一下</p>","more":"<blockquote>\n<p>拖更了好几天，今天有点时间给补上吧</p>\n</blockquote>\n<p>主要是参考了<a href=\"\">go-gin-example</a>这个github项目，我大致讲一下···</p>\n<p>我想做的错误处理主要还是针对http响应的：最原始的gin响应是这样的：<code>g.C.JSON(http.someCode, interface&#123;&#125;)</code>,然而我想要的是正常的http响应,是这样形式的：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;code&quot;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;data&quot;</span>:<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以我们要做的，就是在c.Json的外边再包一层··（其实就是自己把c.json()的第二个参数interface包装为我们想要的这个形式。）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Response <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tCode <span class=\"keyword\">int</span>         <span class=\"string\">`json:&quot;code&quot;`</span></span><br><span class=\"line\">\tMsg  <span class=\"keyword\">string</span>      <span class=\"string\">`json:&quot;msg&quot;`</span></span><br><span class=\"line\">\tData <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:&quot;data&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后再包装一下原先的响应，直接用新的方法来做响应：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Gin)</span> <span class=\"title\">ResponseError</span><span class=\"params\">(errorMsg <span class=\"keyword\">string</span>, data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tg.C.JSON(http.StatusInternalServerError, Response&#123;</span><br><span class=\"line\">\t\tCode: <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\tMsg:  GetMsg(errorMsg),</span><br><span class=\"line\">\t\tData: data,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Gin)</span> <span class=\"title\">ResponseSuccess</span><span class=\"params\">(data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tg.C.JSON(http.StatusOK, Response&#123;</span><br><span class=\"line\">\t\tCode: <span class=\"number\">200</span>,</span><br><span class=\"line\">\t\tData: data,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写完之后发现好像也没啥，其实更主要的还是对于go程序运行中错误的处理。</p>\n<p>现在大致是按照以下思路走的：</p>\n<ol>\n<li><p>所有的error都要进行处理，本层处理不了的就会抛到上层，最后作为response中的data抛出来</p>\n</li>\n<li><p>抛出来的error要带类型、带抛出位置···（这点还没有完成，要做这个的话需要把error类也做一个包装。）</p>\n</li>\n</ol>"},{"title":"给hexo的post文件名加上日期","date":"2021-09-09T17:01:25.000Z","_content":"\n前段时间翻hexo的介绍的时候，里边提到有一个`new_post_name`的配置，可以让每次新建文章的文件名都改成日期-文件名的形式，这样子也是推荐做法。\n\n```yml\n# Writing\nnew_post_name: :year-:month-:day-:title.md # File name of new posts\ndefault_layout: post\n```\n然而默认的方式是没有加日期的···我改了这个配置之后就变成了一半是有日期的，另外一半是没有日期的，视觉上看起来非常的尴尬。于是我忍耐了一小段时间之后，就写了下边这么一个python小脚本来把没有改时间的post的文件名都加上了时间。\n\n<!--more-->\n\n因为ubuntu自带一个py2.7，所以这个就是2.7的，能不能在3.x上运行我也没有试过··\n\n把下边的代码保存成py文件保存在`source/_posts`文件下边，然后py 执行这个文件就好了，可以说是非常方便。\n\n当然改好之后一定要记得在`_config.yml`里边修改new_post_name的配置呀！\n\n最后感叹一下，python用来写点脚本实在是方便的不行。\n\n\n\n```python\nimport os\nimport re\n\nentries = os.listdir(os.getcwd())\nfor entry in entries:\n    if entry.endswith(\"md\"):\n        if re.match('^\\d{4}-\\d{1,2}-\\d{1,2}', entry, flags=0) == None:\n            with open(entry, 'r') as f:\n                data = f.read()\n                matchobj = re.search('\\d{4}-\\d{1,2}-\\d{1,2}', data)\n            newFileName = matchobj.group() + '-' +entry\n            print \"now rename file: \" + entry + \" to: \" + newFileName\n            os.rename(entry, newFileName)\n```","source":"_posts/2021-09-09-给hexo的post文件名加上日期.md","raw":"---\ntitle: 给hexo的post文件名加上日期\ndate: 2021-09-09 17:01:25\ntags:\n- python\ncategories:\n- python小工具\n---\n\n前段时间翻hexo的介绍的时候，里边提到有一个`new_post_name`的配置，可以让每次新建文章的文件名都改成日期-文件名的形式，这样子也是推荐做法。\n\n```yml\n# Writing\nnew_post_name: :year-:month-:day-:title.md # File name of new posts\ndefault_layout: post\n```\n然而默认的方式是没有加日期的···我改了这个配置之后就变成了一半是有日期的，另外一半是没有日期的，视觉上看起来非常的尴尬。于是我忍耐了一小段时间之后，就写了下边这么一个python小脚本来把没有改时间的post的文件名都加上了时间。\n\n<!--more-->\n\n因为ubuntu自带一个py2.7，所以这个就是2.7的，能不能在3.x上运行我也没有试过··\n\n把下边的代码保存成py文件保存在`source/_posts`文件下边，然后py 执行这个文件就好了，可以说是非常方便。\n\n当然改好之后一定要记得在`_config.yml`里边修改new_post_name的配置呀！\n\n最后感叹一下，python用来写点脚本实在是方便的不行。\n\n\n\n```python\nimport os\nimport re\n\nentries = os.listdir(os.getcwd())\nfor entry in entries:\n    if entry.endswith(\"md\"):\n        if re.match('^\\d{4}-\\d{1,2}-\\d{1,2}', entry, flags=0) == None:\n            with open(entry, 'r') as f:\n                data = f.read()\n                matchobj = re.search('\\d{4}-\\d{1,2}-\\d{1,2}', data)\n            newFileName = matchobj.group() + '-' +entry\n            print \"now rename file: \" + entry + \" to: \" + newFileName\n            os.rename(entry, newFileName)\n```","slug":"给hexo的post文件名加上日期","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhd8002t2h5p1fsl7ly8","content":"<p>前段时间翻hexo的介绍的时候，里边提到有一个<code>new_post_name</code>的配置，可以让每次新建文章的文件名都改成日期-文件名的形式，这样子也是推荐做法。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Writing</span></span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:year-:month-:day-:title.md</span> <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\"><span class=\"attr\">default_layout:</span> <span class=\"string\">post</span></span><br></pre></td></tr></table></figure>\n<p>然而默认的方式是没有加日期的···我改了这个配置之后就变成了一半是有日期的，另外一半是没有日期的，视觉上看起来非常的尴尬。于是我忍耐了一小段时间之后，就写了下边这么一个python小脚本来把没有改时间的post的文件名都加上了时间。</p>\n<a id=\"more\"></a>\n\n<p>因为ubuntu自带一个py2.7，所以这个就是2.7的，能不能在3.x上运行我也没有试过··</p>\n<p>把下边的代码保存成py文件保存在<code>source/_posts</code>文件下边，然后py 执行这个文件就好了，可以说是非常方便。</p>\n<p>当然改好之后一定要记得在<code>_config.yml</code>里边修改new_post_name的配置呀！</p>\n<p>最后感叹一下，python用来写点脚本实在是方便的不行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">entries = os.listdir(os.getcwd())</span><br><span class=\"line\"><span class=\"keyword\">for</span> entry <span class=\"keyword\">in</span> entries:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> entry.endswith(<span class=\"string\">&quot;md&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> re.match(<span class=\"string\">&#x27;^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;&#x27;</span>, entry, flags=<span class=\"number\">0</span>) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(entry, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                data = f.read()</span><br><span class=\"line\">                matchobj = re.search(<span class=\"string\">&#x27;\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;&#x27;</span>, data)</span><br><span class=\"line\">            newFileName = matchobj.group() + <span class=\"string\">&#x27;-&#x27;</span> +entry</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&quot;now rename file: &quot;</span> + entry + <span class=\"string\">&quot; to: &quot;</span> + newFileName</span><br><span class=\"line\">            os.rename(entry, newFileName)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>前段时间翻hexo的介绍的时候，里边提到有一个<code>new_post_name</code>的配置，可以让每次新建文章的文件名都改成日期-文件名的形式，这样子也是推荐做法。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Writing</span></span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:year-:month-:day-:title.md</span> <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\"><span class=\"attr\">default_layout:</span> <span class=\"string\">post</span></span><br></pre></td></tr></table></figure>\n<p>然而默认的方式是没有加日期的···我改了这个配置之后就变成了一半是有日期的，另外一半是没有日期的，视觉上看起来非常的尴尬。于是我忍耐了一小段时间之后，就写了下边这么一个python小脚本来把没有改时间的post的文件名都加上了时间。</p>","more":"<p>因为ubuntu自带一个py2.7，所以这个就是2.7的，能不能在3.x上运行我也没有试过··</p>\n<p>把下边的代码保存成py文件保存在<code>source/_posts</code>文件下边，然后py 执行这个文件就好了，可以说是非常方便。</p>\n<p>当然改好之后一定要记得在<code>_config.yml</code>里边修改new_post_name的配置呀！</p>\n<p>最后感叹一下，python用来写点脚本实在是方便的不行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">entries = os.listdir(os.getcwd())</span><br><span class=\"line\"><span class=\"keyword\">for</span> entry <span class=\"keyword\">in</span> entries:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> entry.endswith(<span class=\"string\">&quot;md&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> re.match(<span class=\"string\">&#x27;^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;&#x27;</span>, entry, flags=<span class=\"number\">0</span>) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(entry, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                data = f.read()</span><br><span class=\"line\">                matchobj = re.search(<span class=\"string\">&#x27;\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;&#x27;</span>, data)</span><br><span class=\"line\">            newFileName = matchobj.group() + <span class=\"string\">&#x27;-&#x27;</span> +entry</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&quot;now rename file: &quot;</span> + entry + <span class=\"string\">&quot; to: &quot;</span> + newFileName</span><br><span class=\"line\">            os.rename(entry, newFileName)</span><br></pre></td></tr></table></figure>"},{"title":"用python来订阅查看redis消息","date":"2021-09-10T18:59:34.000Z","_content":"\n这其实是个以前写的小工具，不过写都写了，就想着完善一下再放出来。以前写的只是简陋的在命令行里边呈现，现在计划搞上html页面，可以方便查看！应该也不用数据库把，只看打开这一次的消息不就行了。先把以前搞的代码贴上来吧，后续有时间再做完善：\n\n这个的py版本是3.x\n\nmain.py\n```python\n#!/usr/bin/env python\n# -*- coding:utf8 -*-\n\nfrom RedisHelper import RedisHelper\n\nobj = RedisHelper()\nredis_sub = obj.subscribe()\n\nwhile True:\n    msg = eval(str(redis_sub.parse_response()))\n    print(msg[1])\n    print(msg[2])\n    print()   #[b'message', b'fm104.5', b'who are you?']\n    # print(msg[2].decode('utf8'))\n```\n\nredisHelper.py\n```python\n#!/usr/bin/env python\n# -*- coding:utf8 -*-\n\nimport redis\n\nclass RedisHelper(object):\n\n    def __init__(self):\n        self.__conn = redis.Redis(host='127.0.0.1',port = '3379')   #连接本机，ip不用写\n\n    def subscribe(self):\n        pub = self.__conn.pubsub()\n        pub.subscribe(\"UP\")\n        pub.subscribe(\"DOWN\")\n        pub.subscribe(\"START\")\n        pub.subscribe(\"CLOSE\")\n        pub.parse_response()  #准备好监听(再调用一次就是开始监听)\n        return pub\n```\n","source":"_posts/2021-09-10-用python来订阅redis消息.md","raw":"---\ntitle: 用python来订阅查看redis消息\ndate: 2021-09-10 18:59:34\ntags:\n- python\ncategories:\n- python小工具\n---\n\n这其实是个以前写的小工具，不过写都写了，就想着完善一下再放出来。以前写的只是简陋的在命令行里边呈现，现在计划搞上html页面，可以方便查看！应该也不用数据库把，只看打开这一次的消息不就行了。先把以前搞的代码贴上来吧，后续有时间再做完善：\n\n这个的py版本是3.x\n\nmain.py\n```python\n#!/usr/bin/env python\n# -*- coding:utf8 -*-\n\nfrom RedisHelper import RedisHelper\n\nobj = RedisHelper()\nredis_sub = obj.subscribe()\n\nwhile True:\n    msg = eval(str(redis_sub.parse_response()))\n    print(msg[1])\n    print(msg[2])\n    print()   #[b'message', b'fm104.5', b'who are you?']\n    # print(msg[2].decode('utf8'))\n```\n\nredisHelper.py\n```python\n#!/usr/bin/env python\n# -*- coding:utf8 -*-\n\nimport redis\n\nclass RedisHelper(object):\n\n    def __init__(self):\n        self.__conn = redis.Redis(host='127.0.0.1',port = '3379')   #连接本机，ip不用写\n\n    def subscribe(self):\n        pub = self.__conn.pubsub()\n        pub.subscribe(\"UP\")\n        pub.subscribe(\"DOWN\")\n        pub.subscribe(\"START\")\n        pub.subscribe(\"CLOSE\")\n        pub.parse_response()  #准备好监听(再调用一次就是开始监听)\n        return pub\n```\n","slug":"用python来订阅redis消息","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhen002v2h5p5cg935d0","content":"<p>这其实是个以前写的小工具，不过写都写了，就想着完善一下再放出来。以前写的只是简陋的在命令行里边呈现，现在计划搞上html页面，可以方便查看！应该也不用数据库把，只看打开这一次的消息不就行了。先把以前搞的代码贴上来吧，后续有时间再做完善：</p>\n<p>这个的py版本是3.x</p>\n<p>main.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> RedisHelper <span class=\"keyword\">import</span> RedisHelper</span><br><span class=\"line\"></span><br><span class=\"line\">obj = RedisHelper()</span><br><span class=\"line\">redis_sub = obj.subscribe()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    msg = <span class=\"built_in\">eval</span>(<span class=\"built_in\">str</span>(redis_sub.parse_response()))</span><br><span class=\"line\">    print(msg[<span class=\"number\">1</span>])</span><br><span class=\"line\">    print(msg[<span class=\"number\">2</span>])</span><br><span class=\"line\">    print()   <span class=\"comment\">#[b&#x27;message&#x27;, b&#x27;fm104.5&#x27;, b&#x27;who are you?&#x27;]</span></span><br><span class=\"line\">    <span class=\"comment\"># print(msg[2].decode(&#x27;utf8&#x27;))</span></span><br></pre></td></tr></table></figure>\n<p>redisHelper.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisHelper</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__conn = redis.Redis(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,port = <span class=\"string\">&#x27;3379&#x27;</span>)   <span class=\"comment\">#连接本机，ip不用写</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subscribe</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        pub = self.__conn.pubsub()</span><br><span class=\"line\">        pub.subscribe(<span class=\"string\">&quot;UP&quot;</span>)</span><br><span class=\"line\">        pub.subscribe(<span class=\"string\">&quot;DOWN&quot;</span>)</span><br><span class=\"line\">        pub.subscribe(<span class=\"string\">&quot;START&quot;</span>)</span><br><span class=\"line\">        pub.subscribe(<span class=\"string\">&quot;CLOSE&quot;</span>)</span><br><span class=\"line\">        pub.parse_response()  <span class=\"comment\">#准备好监听(再调用一次就是开始监听)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pub</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>这其实是个以前写的小工具，不过写都写了，就想着完善一下再放出来。以前写的只是简陋的在命令行里边呈现，现在计划搞上html页面，可以方便查看！应该也不用数据库把，只看打开这一次的消息不就行了。先把以前搞的代码贴上来吧，后续有时间再做完善：</p>\n<p>这个的py版本是3.x</p>\n<p>main.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> RedisHelper <span class=\"keyword\">import</span> RedisHelper</span><br><span class=\"line\"></span><br><span class=\"line\">obj = RedisHelper()</span><br><span class=\"line\">redis_sub = obj.subscribe()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    msg = <span class=\"built_in\">eval</span>(<span class=\"built_in\">str</span>(redis_sub.parse_response()))</span><br><span class=\"line\">    print(msg[<span class=\"number\">1</span>])</span><br><span class=\"line\">    print(msg[<span class=\"number\">2</span>])</span><br><span class=\"line\">    print()   <span class=\"comment\">#[b&#x27;message&#x27;, b&#x27;fm104.5&#x27;, b&#x27;who are you?&#x27;]</span></span><br><span class=\"line\">    <span class=\"comment\"># print(msg[2].decode(&#x27;utf8&#x27;))</span></span><br></pre></td></tr></table></figure>\n<p>redisHelper.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisHelper</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__conn = redis.Redis(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,port = <span class=\"string\">&#x27;3379&#x27;</span>)   <span class=\"comment\">#连接本机，ip不用写</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subscribe</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        pub = self.__conn.pubsub()</span><br><span class=\"line\">        pub.subscribe(<span class=\"string\">&quot;UP&quot;</span>)</span><br><span class=\"line\">        pub.subscribe(<span class=\"string\">&quot;DOWN&quot;</span>)</span><br><span class=\"line\">        pub.subscribe(<span class=\"string\">&quot;START&quot;</span>)</span><br><span class=\"line\">        pub.subscribe(<span class=\"string\">&quot;CLOSE&quot;</span>)</span><br><span class=\"line\">        pub.parse_response()  <span class=\"comment\">#准备好监听(再调用一次就是开始监听)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pub</span><br></pre></td></tr></table></figure>"},{"title":"harbor使用过程中遇到的小坑","date":"2021-09-13T18:58:03.000Z","_content":"\n> 感觉自己越来越像运维人员了\n\n上周周末再给客户研究部署的问题，客户需要从我们内网的harbor上把docker image pull到本地，然而双方都有严密的防火墙措施，整个事情就显得比较难办。\n\n其实我最开始的计划是scp直接传给客户，无奈又是要走隧道又是什么的··最后决定还是想办法从harbor上pull下去。\n\n于是在同事的帮助下，把内部的harbor（假设是10.20.20.2）映射到了另外一个地址，假设是10.10.10.1，可以通过2222端口来访问内部harbor的80端口。\n\n客户测试了之后网页可以访问，但是下载却不断的出现问题···\n\n<!--more-->\n\n### Q1:登录harbor失败\n\n报错： `dial tcp: lookup *url*:no shuch host`\n\n这是解析不了我们内部的域名，其实比较好解决，在宿主机里边加上host就好了：\n\n```sh\nvi /etc/hosts\n\n10.10.10.1 url\n```\n\n### Q2:下载image失败\n\n添加了host之后，登录报错：`Error response from daemon: Get *url*: error parsing HTTP 404 response body: invalid character '<' looking for beginning of value: \"<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body>\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx/1.16.1</center>\\r\\n</body>\\r\\n</html>\\r\\n\"`\n\n这就是登录失败了，这是harbor的问题，harbor默认不允许从外部网址访问。\n\n打开harbor的配置文件，加入以下配置然后再重启harbor就ok了：\n\n```sh\nexternal_url: http://10.10.10.1:2222/\n```\n\n### Q3：各种下载失败\n\n保证各个镜像下载地址一致···","source":"_posts/2021-09-13-harbor使用过程中遇到的小坑.md","raw":"---\ntitle: harbor使用过程中遇到的小坑\ndate: 2021-09-13 18:58:03\ntags:\n- harbor\ncategories:\n- 部署&运维\n---\n\n> 感觉自己越来越像运维人员了\n\n上周周末再给客户研究部署的问题，客户需要从我们内网的harbor上把docker image pull到本地，然而双方都有严密的防火墙措施，整个事情就显得比较难办。\n\n其实我最开始的计划是scp直接传给客户，无奈又是要走隧道又是什么的··最后决定还是想办法从harbor上pull下去。\n\n于是在同事的帮助下，把内部的harbor（假设是10.20.20.2）映射到了另外一个地址，假设是10.10.10.1，可以通过2222端口来访问内部harbor的80端口。\n\n客户测试了之后网页可以访问，但是下载却不断的出现问题···\n\n<!--more-->\n\n### Q1:登录harbor失败\n\n报错： `dial tcp: lookup *url*:no shuch host`\n\n这是解析不了我们内部的域名，其实比较好解决，在宿主机里边加上host就好了：\n\n```sh\nvi /etc/hosts\n\n10.10.10.1 url\n```\n\n### Q2:下载image失败\n\n添加了host之后，登录报错：`Error response from daemon: Get *url*: error parsing HTTP 404 response body: invalid character '<' looking for beginning of value: \"<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body>\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx/1.16.1</center>\\r\\n</body>\\r\\n</html>\\r\\n\"`\n\n这就是登录失败了，这是harbor的问题，harbor默认不允许从外部网址访问。\n\n打开harbor的配置文件，加入以下配置然后再重启harbor就ok了：\n\n```sh\nexternal_url: http://10.10.10.1:2222/\n```\n\n### Q3：各种下载失败\n\n保证各个镜像下载地址一致···","slug":"harbor使用过程中遇到的小坑","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhfe002y2h5p5pic5wvx","content":"<blockquote>\n<p>感觉自己越来越像运维人员了</p>\n</blockquote>\n<p>上周周末再给客户研究部署的问题，客户需要从我们内网的harbor上把docker image pull到本地，然而双方都有严密的防火墙措施，整个事情就显得比较难办。</p>\n<p>其实我最开始的计划是scp直接传给客户，无奈又是要走隧道又是什么的··最后决定还是想办法从harbor上pull下去。</p>\n<p>于是在同事的帮助下，把内部的harbor（假设是10.20.20.2）映射到了另外一个地址，假设是10.10.10.1，可以通过2222端口来访问内部harbor的80端口。</p>\n<p>客户测试了之后网页可以访问，但是下载却不断的出现问题···</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Q1-登录harbor失败\"><a href=\"#Q1-登录harbor失败\" class=\"headerlink\" title=\"Q1:登录harbor失败\"></a>Q1:登录harbor失败</h3><p>报错： <code>dial tcp: lookup *url*:no shuch host</code></p>\n<p>这是解析不了我们内部的域名，其实比较好解决，在宿主机里边加上host就好了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">10.10.10.1 url</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q2-下载image失败\"><a href=\"#Q2-下载image失败\" class=\"headerlink\" title=\"Q2:下载image失败\"></a>Q2:下载image失败</h3><p>添加了host之后，登录报错：<code>Error response from daemon: Get *url*: error parsing HTTP 404 response body: invalid character &#39;&lt;&#39; looking for beginning of value: &quot;&lt;html&gt;\\r\\n&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;\\r\\n&lt;body&gt;\\r\\n&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;\\r\\n&lt;hr&gt;&lt;center&gt;nginx/1.16.1&lt;/center&gt;\\r\\n&lt;/body&gt;\\r\\n&lt;/html&gt;\\r\\n&quot;</code></p>\n<p>这就是登录失败了，这是harbor的问题，harbor默认不允许从外部网址访问。</p>\n<p>打开harbor的配置文件，加入以下配置然后再重启harbor就ok了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url: http://10.10.10.1:2222/</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q3：各种下载失败\"><a href=\"#Q3：各种下载失败\" class=\"headerlink\" title=\"Q3：各种下载失败\"></a>Q3：各种下载失败</h3><p>保证各个镜像下载地址一致···</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>感觉自己越来越像运维人员了</p>\n</blockquote>\n<p>上周周末再给客户研究部署的问题，客户需要从我们内网的harbor上把docker image pull到本地，然而双方都有严密的防火墙措施，整个事情就显得比较难办。</p>\n<p>其实我最开始的计划是scp直接传给客户，无奈又是要走隧道又是什么的··最后决定还是想办法从harbor上pull下去。</p>\n<p>于是在同事的帮助下，把内部的harbor（假设是10.20.20.2）映射到了另外一个地址，假设是10.10.10.1，可以通过2222端口来访问内部harbor的80端口。</p>\n<p>客户测试了之后网页可以访问，但是下载却不断的出现问题···</p>","more":"<h3 id=\"Q1-登录harbor失败\"><a href=\"#Q1-登录harbor失败\" class=\"headerlink\" title=\"Q1:登录harbor失败\"></a>Q1:登录harbor失败</h3><p>报错： <code>dial tcp: lookup *url*:no shuch host</code></p>\n<p>这是解析不了我们内部的域名，其实比较好解决，在宿主机里边加上host就好了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">10.10.10.1 url</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q2-下载image失败\"><a href=\"#Q2-下载image失败\" class=\"headerlink\" title=\"Q2:下载image失败\"></a>Q2:下载image失败</h3><p>添加了host之后，登录报错：<code>Error response from daemon: Get *url*: error parsing HTTP 404 response body: invalid character &#39;&lt;&#39; looking for beginning of value: &quot;&lt;html&gt;\\r\\n&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;\\r\\n&lt;body&gt;\\r\\n&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;\\r\\n&lt;hr&gt;&lt;center&gt;nginx/1.16.1&lt;/center&gt;\\r\\n&lt;/body&gt;\\r\\n&lt;/html&gt;\\r\\n&quot;</code></p>\n<p>这就是登录失败了，这是harbor的问题，harbor默认不允许从外部网址访问。</p>\n<p>打开harbor的配置文件，加入以下配置然后再重启harbor就ok了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url: http://10.10.10.1:2222/</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q3：各种下载失败\"><a href=\"#Q3：各种下载失败\" class=\"headerlink\" title=\"Q3：各种下载失败\"></a>Q3：各种下载失败</h3><p>保证各个镜像下载地址一致···</p>"},{"title":"约定大于配置？","date":"2021-09-20T16:35:55.000Z","_content":"\n刚开始看spring的时候，总会提到一个：在spring里边遵循约定大于配置的思想，刚开始的时候写程序就是瞎写一通，后来写的多了也逐渐明白了约定大于配置是什么意思：\n\n> 约定大于配置本质上还是为了方便代码编写，并没有提供什么新的功能。\n\n举个例子，正常要写一个程序，要对数据库的某个表进行CRUD，那么在程序里边肯定要完成以下动作：\n\n1. 指定数据库名称\n2. 载入数据库驱动\n3. 给定数据库地址、p/w\n4. 连接至数据库\n5. 输入CRUD语句\n6. 解析执行结果:绑定字段至目的结构上\n7. 关闭数据库连接\n\n可见还是相当麻烦的。那么约定大于配置是如何简化这个流程呢?\n\n在gorm里边简化的相当明显：\n\n1. 默认model的复数形式为表名\n2. 默认id为主键\n3. 列名是字段名的小写形式\n4. ·····\n\n只要我们遵循以上约定，就不用指定表名、手动绑定字段···等很多比较重复的工作。\n\n很多语言、工具都引入了这样的思想，可以明显节约我们的开发时间\n\n当然，约定大于配置肯定是有缺点的：换一个团队、换一个工具，又要花一定的精力来熟悉新的约定，就好像很多人对Lombok的吐槽一样：“只是写个getter/setter都懒得写？搞得所有人都要去配置Lombok”","source":"_posts/2021-09-20-约定大于配置？.md","raw":"---\ntitle: 约定大于配置？\ndate: 2021-09-20 16:35:55\ntags:\n- 编程思想\ncategories:\n- 编程\n---\n\n刚开始看spring的时候，总会提到一个：在spring里边遵循约定大于配置的思想，刚开始的时候写程序就是瞎写一通，后来写的多了也逐渐明白了约定大于配置是什么意思：\n\n> 约定大于配置本质上还是为了方便代码编写，并没有提供什么新的功能。\n\n举个例子，正常要写一个程序，要对数据库的某个表进行CRUD，那么在程序里边肯定要完成以下动作：\n\n1. 指定数据库名称\n2. 载入数据库驱动\n3. 给定数据库地址、p/w\n4. 连接至数据库\n5. 输入CRUD语句\n6. 解析执行结果:绑定字段至目的结构上\n7. 关闭数据库连接\n\n可见还是相当麻烦的。那么约定大于配置是如何简化这个流程呢?\n\n在gorm里边简化的相当明显：\n\n1. 默认model的复数形式为表名\n2. 默认id为主键\n3. 列名是字段名的小写形式\n4. ·····\n\n只要我们遵循以上约定，就不用指定表名、手动绑定字段···等很多比较重复的工作。\n\n很多语言、工具都引入了这样的思想，可以明显节约我们的开发时间\n\n当然，约定大于配置肯定是有缺点的：换一个团队、换一个工具，又要花一定的精力来熟悉新的约定，就好像很多人对Lombok的吐槽一样：“只是写个getter/setter都懒得写？搞得所有人都要去配置Lombok”","slug":"约定大于配置？","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhfx00302h5p2vvd1ee7","content":"<p>刚开始看spring的时候，总会提到一个：在spring里边遵循约定大于配置的思想，刚开始的时候写程序就是瞎写一通，后来写的多了也逐渐明白了约定大于配置是什么意思：</p>\n<blockquote>\n<p>约定大于配置本质上还是为了方便代码编写，并没有提供什么新的功能。</p>\n</blockquote>\n<p>举个例子，正常要写一个程序，要对数据库的某个表进行CRUD，那么在程序里边肯定要完成以下动作：</p>\n<ol>\n<li>指定数据库名称</li>\n<li>载入数据库驱动</li>\n<li>给定数据库地址、p/w</li>\n<li>连接至数据库</li>\n<li>输入CRUD语句</li>\n<li>解析执行结果:绑定字段至目的结构上</li>\n<li>关闭数据库连接</li>\n</ol>\n<p>可见还是相当麻烦的。那么约定大于配置是如何简化这个流程呢?</p>\n<p>在gorm里边简化的相当明显：</p>\n<ol>\n<li>默认model的复数形式为表名</li>\n<li>默认id为主键</li>\n<li>列名是字段名的小写形式</li>\n<li>·····</li>\n</ol>\n<p>只要我们遵循以上约定，就不用指定表名、手动绑定字段···等很多比较重复的工作。</p>\n<p>很多语言、工具都引入了这样的思想，可以明显节约我们的开发时间</p>\n<p>当然，约定大于配置肯定是有缺点的：换一个团队、换一个工具，又要花一定的精力来熟悉新的约定，就好像很多人对Lombok的吐槽一样：“只是写个getter/setter都懒得写？搞得所有人都要去配置Lombok”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚开始看spring的时候，总会提到一个：在spring里边遵循约定大于配置的思想，刚开始的时候写程序就是瞎写一通，后来写的多了也逐渐明白了约定大于配置是什么意思：</p>\n<blockquote>\n<p>约定大于配置本质上还是为了方便代码编写，并没有提供什么新的功能。</p>\n</blockquote>\n<p>举个例子，正常要写一个程序，要对数据库的某个表进行CRUD，那么在程序里边肯定要完成以下动作：</p>\n<ol>\n<li>指定数据库名称</li>\n<li>载入数据库驱动</li>\n<li>给定数据库地址、p/w</li>\n<li>连接至数据库</li>\n<li>输入CRUD语句</li>\n<li>解析执行结果:绑定字段至目的结构上</li>\n<li>关闭数据库连接</li>\n</ol>\n<p>可见还是相当麻烦的。那么约定大于配置是如何简化这个流程呢?</p>\n<p>在gorm里边简化的相当明显：</p>\n<ol>\n<li>默认model的复数形式为表名</li>\n<li>默认id为主键</li>\n<li>列名是字段名的小写形式</li>\n<li>·····</li>\n</ol>\n<p>只要我们遵循以上约定，就不用指定表名、手动绑定字段···等很多比较重复的工作。</p>\n<p>很多语言、工具都引入了这样的思想，可以明显节约我们的开发时间</p>\n<p>当然，约定大于配置肯定是有缺点的：换一个团队、换一个工具，又要花一定的精力来熟悉新的约定，就好像很多人对Lombok的吐槽一样：“只是写个getter/setter都懒得写？搞得所有人都要去配置Lombok”</p>\n"},{"title":"selFund开发进展","date":"2021-09-23T18:47:38.000Z","_content":"\n经过长期时间的放鸽子，原计划开发的selFund大致完成了以下功能，对比以下最开始的计划：\n\n* basic：\n    * user\n        * 增加基金   ok\n        * 删除基金   ok\n        * 查看基金   ok\n        * 增加user   ok\n        * 删除user   no need\n        * 查看user   ok\n    * 基金\n        * 查看基金   ok \n        * 计算两只基金的相似度  只能计算两只基金相同的股票数\n* advanced\n    * user\n        * 增加持仓统计 \n        * 每日盈亏计算\n    * 基金\n        * 定期刷新\n        * 其他高级特性\n\n\n大概就完成了以上弱鸡功能··\n\n接下来计划做什么呢？\n\n1. 前端要不要搞啊？感觉很麻烦的样子··\n2. 代码优化\n3. 功能上有什么要增加的呢？\n\n不过我又有了一个新项目：netconf的notification持续连接&呈现！先搞个java版的问题不大吧？","source":"_posts/2021-09-23-selFund开发进展.md","raw":"---\ntitle: selFund开发进展\ndate: 2021-09-23 18:47:38\ntags:\n- selFund\ncategories:\n- 开发计划\n---\n\n经过长期时间的放鸽子，原计划开发的selFund大致完成了以下功能，对比以下最开始的计划：\n\n* basic：\n    * user\n        * 增加基金   ok\n        * 删除基金   ok\n        * 查看基金   ok\n        * 增加user   ok\n        * 删除user   no need\n        * 查看user   ok\n    * 基金\n        * 查看基金   ok \n        * 计算两只基金的相似度  只能计算两只基金相同的股票数\n* advanced\n    * user\n        * 增加持仓统计 \n        * 每日盈亏计算\n    * 基金\n        * 定期刷新\n        * 其他高级特性\n\n\n大概就完成了以上弱鸡功能··\n\n接下来计划做什么呢？\n\n1. 前端要不要搞啊？感觉很麻烦的样子··\n2. 代码优化\n3. 功能上有什么要增加的呢？\n\n不过我又有了一个新项目：netconf的notification持续连接&呈现！先搞个java版的问题不大吧？","slug":"selFund开发进展","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhh500332h5p2fokce7a","content":"<p>经过长期时间的放鸽子，原计划开发的selFund大致完成了以下功能，对比以下最开始的计划：</p>\n<ul>\n<li>basic：<ul>\n<li>user<ul>\n<li>增加基金   ok</li>\n<li>删除基金   ok</li>\n<li>查看基金   ok</li>\n<li>增加user   ok</li>\n<li>删除user   no need</li>\n<li>查看user   ok</li>\n</ul>\n</li>\n<li>基金<ul>\n<li>查看基金   ok </li>\n<li>计算两只基金的相似度  只能计算两只基金相同的股票数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>advanced<ul>\n<li>user<ul>\n<li>增加持仓统计 </li>\n<li>每日盈亏计算</li>\n</ul>\n</li>\n<li>基金<ul>\n<li>定期刷新</li>\n<li>其他高级特性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>大概就完成了以上弱鸡功能··</p>\n<p>接下来计划做什么呢？</p>\n<ol>\n<li>前端要不要搞啊？感觉很麻烦的样子··</li>\n<li>代码优化</li>\n<li>功能上有什么要增加的呢？</li>\n</ol>\n<p>不过我又有了一个新项目：netconf的notification持续连接&amp;呈现！先搞个java版的问题不大吧？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>经过长期时间的放鸽子，原计划开发的selFund大致完成了以下功能，对比以下最开始的计划：</p>\n<ul>\n<li>basic：<ul>\n<li>user<ul>\n<li>增加基金   ok</li>\n<li>删除基金   ok</li>\n<li>查看基金   ok</li>\n<li>增加user   ok</li>\n<li>删除user   no need</li>\n<li>查看user   ok</li>\n</ul>\n</li>\n<li>基金<ul>\n<li>查看基金   ok </li>\n<li>计算两只基金的相似度  只能计算两只基金相同的股票数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>advanced<ul>\n<li>user<ul>\n<li>增加持仓统计 </li>\n<li>每日盈亏计算</li>\n</ul>\n</li>\n<li>基金<ul>\n<li>定期刷新</li>\n<li>其他高级特性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>大概就完成了以上弱鸡功能··</p>\n<p>接下来计划做什么呢？</p>\n<ol>\n<li>前端要不要搞啊？感觉很麻烦的样子··</li>\n<li>代码优化</li>\n<li>功能上有什么要增加的呢？</li>\n</ol>\n<p>不过我又有了一个新项目：netconf的notification持续连接&amp;呈现！先搞个java版的问题不大吧？</p>\n"},{"title":"换工作也有一年了，好像也没什么进展嘛","date":"2021-10-21T18:59:27.000Z","_content":"\n今天吃完饭坐在工位上就熟练的掏出了手机开始搓爆裂魔女，看了看今天的日期，惊觉今天是10/21,去年10/19入职，从hw出来也有一年了啊，在这里感觉完全是划水了一年··\n\n想了想自己大概都做了什么呢？\n\n还不知道有没有商用价值的项目，不断的修修改改，却没有对项目全局的思考\n\njava的crud已经非常熟练了，然而感觉还是小打小闹··\n\ngo看了一点点，写个本科大二水平的作业应该不是问题了\n\n服务器维护算是了解了一些吧，docker、linux感觉也都懂一点···\n\n不断地摸鱼感觉热情逐步消耗殆尽··这样的生活真的没问题吗？\n\n不断地立下誓言却又一次次的返回，这样真的是我想要的自我吗？\n\n不断地羡慕别人自己却没有提高，这样真的好吗？\n\n看看猎聘上薪资25K-50K工作的招聘要求，以后还是这样来对标自己比较好吧：\n\n> java开发工程师的要求：\n>\n>> 1.全日制一类本科以上学历，计算机相关专业；\n>>\n>> 2.JAVA基础扎实，精通IO、多线程、集合等基础框架，精通分布式、缓存、消息等机制；\n>>\n>> 3.精通SpringBoot、MyBatis应用框架；\n>>\n>> 4.精通分布式缓存、消息队列等中间件技术；\n>>\n>> 5.熟悉k8s、docker等容器技术的使用，熟悉linux常用命令，可部署系统与分析性能；\n>>\n>> 7.熟练掌握至少一种数据库Oracle、MySQL,有数据库优化经历者优先；\n>>\n>> 8.具有很强的编码功底，有过业务设计经验，能解决疑难技术问题；\n\n> go开发工程师的要求：\n>> 有扎实的 go 或JAVA 语言基础，理解面向对象设计基本原则，至少熟悉 python/ruby/shell的任意一种脚本语言\n>> 熟悉分布式计算相关技术，熟悉网络编程和多线程编程技术\n>>\n>> 熟悉 Linux 或 Unix 操作系统，熟悉 Docker 容器\n>>\n>> 有良好的逻辑思维能力、技术沟通能力、项目协调推进能力、具备问题和通用技术的抽象能力、问题解决及业务落地能力\n>>\n>> 有大型集群及数据运维经验者优先、有基础架构开发经验者优先\n\n大概需要的东西就比较明确了：\n\n1. 语言基础\n2. OO设计原则、IO、网络、多线程都是需要熟悉的东西\n3. 容器技术如k8s、docker，以及相关的部署能力\n4. 框架--可能不是太重要\n5. 数据库，熟练掌握mysql就好了\n6. 中间件，挑选常用的多学习一下。\n\n以后真的要好好学习了。","source":"_posts/2021-10-21-换工作也有一年了，好像也没什么进展嘛.md","raw":"---\ntitle: 换工作也有一年了，好像也没什么进展嘛\ndate: 2021-10-21 18:59:27\ntags:\n- 随笔\ncategories:\n- other\n---\n\n今天吃完饭坐在工位上就熟练的掏出了手机开始搓爆裂魔女，看了看今天的日期，惊觉今天是10/21,去年10/19入职，从hw出来也有一年了啊，在这里感觉完全是划水了一年··\n\n想了想自己大概都做了什么呢？\n\n还不知道有没有商用价值的项目，不断的修修改改，却没有对项目全局的思考\n\njava的crud已经非常熟练了，然而感觉还是小打小闹··\n\ngo看了一点点，写个本科大二水平的作业应该不是问题了\n\n服务器维护算是了解了一些吧，docker、linux感觉也都懂一点···\n\n不断地摸鱼感觉热情逐步消耗殆尽··这样的生活真的没问题吗？\n\n不断地立下誓言却又一次次的返回，这样真的是我想要的自我吗？\n\n不断地羡慕别人自己却没有提高，这样真的好吗？\n\n看看猎聘上薪资25K-50K工作的招聘要求，以后还是这样来对标自己比较好吧：\n\n> java开发工程师的要求：\n>\n>> 1.全日制一类本科以上学历，计算机相关专业；\n>>\n>> 2.JAVA基础扎实，精通IO、多线程、集合等基础框架，精通分布式、缓存、消息等机制；\n>>\n>> 3.精通SpringBoot、MyBatis应用框架；\n>>\n>> 4.精通分布式缓存、消息队列等中间件技术；\n>>\n>> 5.熟悉k8s、docker等容器技术的使用，熟悉linux常用命令，可部署系统与分析性能；\n>>\n>> 7.熟练掌握至少一种数据库Oracle、MySQL,有数据库优化经历者优先；\n>>\n>> 8.具有很强的编码功底，有过业务设计经验，能解决疑难技术问题；\n\n> go开发工程师的要求：\n>> 有扎实的 go 或JAVA 语言基础，理解面向对象设计基本原则，至少熟悉 python/ruby/shell的任意一种脚本语言\n>> 熟悉分布式计算相关技术，熟悉网络编程和多线程编程技术\n>>\n>> 熟悉 Linux 或 Unix 操作系统，熟悉 Docker 容器\n>>\n>> 有良好的逻辑思维能力、技术沟通能力、项目协调推进能力、具备问题和通用技术的抽象能力、问题解决及业务落地能力\n>>\n>> 有大型集群及数据运维经验者优先、有基础架构开发经验者优先\n\n大概需要的东西就比较明确了：\n\n1. 语言基础\n2. OO设计原则、IO、网络、多线程都是需要熟悉的东西\n3. 容器技术如k8s、docker，以及相关的部署能力\n4. 框架--可能不是太重要\n5. 数据库，熟练掌握mysql就好了\n6. 中间件，挑选常用的多学习一下。\n\n以后真的要好好学习了。","slug":"换工作也有一年了，好像也没什么进展嘛","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhin00352h5p1rbue9b2","content":"<p>今天吃完饭坐在工位上就熟练的掏出了手机开始搓爆裂魔女，看了看今天的日期，惊觉今天是10/21,去年10/19入职，从hw出来也有一年了啊，在这里感觉完全是划水了一年··</p>\n<p>想了想自己大概都做了什么呢？</p>\n<p>还不知道有没有商用价值的项目，不断的修修改改，却没有对项目全局的思考</p>\n<p>java的crud已经非常熟练了，然而感觉还是小打小闹··</p>\n<p>go看了一点点，写个本科大二水平的作业应该不是问题了</p>\n<p>服务器维护算是了解了一些吧，docker、linux感觉也都懂一点···</p>\n<p>不断地摸鱼感觉热情逐步消耗殆尽··这样的生活真的没问题吗？</p>\n<p>不断地立下誓言却又一次次的返回，这样真的是我想要的自我吗？</p>\n<p>不断地羡慕别人自己却没有提高，这样真的好吗？</p>\n<p>看看猎聘上薪资25K-50K工作的招聘要求，以后还是这样来对标自己比较好吧：</p>\n<blockquote>\n<p>java开发工程师的要求：</p>\n<blockquote>\n<p>1.全日制一类本科以上学历，计算机相关专业；</p>\n<p>2.JAVA基础扎实，精通IO、多线程、集合等基础框架，精通分布式、缓存、消息等机制；</p>\n<p>3.精通SpringBoot、MyBatis应用框架；</p>\n<p>4.精通分布式缓存、消息队列等中间件技术；</p>\n<p>5.熟悉k8s、docker等容器技术的使用，熟悉linux常用命令，可部署系统与分析性能；</p>\n<p>7.熟练掌握至少一种数据库Oracle、MySQL,有数据库优化经历者优先；</p>\n<p>8.具有很强的编码功底，有过业务设计经验，能解决疑难技术问题；</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>go开发工程师的要求：</p>\n<blockquote>\n<p>有扎实的 go 或JAVA 语言基础，理解面向对象设计基本原则，至少熟悉 python/ruby/shell的任意一种脚本语言<br>熟悉分布式计算相关技术，熟悉网络编程和多线程编程技术</p>\n<p>熟悉 Linux 或 Unix 操作系统，熟悉 Docker 容器</p>\n<p>有良好的逻辑思维能力、技术沟通能力、项目协调推进能力、具备问题和通用技术的抽象能力、问题解决及业务落地能力</p>\n<p>有大型集群及数据运维经验者优先、有基础架构开发经验者优先</p>\n</blockquote>\n</blockquote>\n<p>大概需要的东西就比较明确了：</p>\n<ol>\n<li>语言基础</li>\n<li>OO设计原则、IO、网络、多线程都是需要熟悉的东西</li>\n<li>容器技术如k8s、docker，以及相关的部署能力</li>\n<li>框架–可能不是太重要</li>\n<li>数据库，熟练掌握mysql就好了</li>\n<li>中间件，挑选常用的多学习一下。</li>\n</ol>\n<p>以后真的要好好学习了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天吃完饭坐在工位上就熟练的掏出了手机开始搓爆裂魔女，看了看今天的日期，惊觉今天是10/21,去年10/19入职，从hw出来也有一年了啊，在这里感觉完全是划水了一年··</p>\n<p>想了想自己大概都做了什么呢？</p>\n<p>还不知道有没有商用价值的项目，不断的修修改改，却没有对项目全局的思考</p>\n<p>java的crud已经非常熟练了，然而感觉还是小打小闹··</p>\n<p>go看了一点点，写个本科大二水平的作业应该不是问题了</p>\n<p>服务器维护算是了解了一些吧，docker、linux感觉也都懂一点···</p>\n<p>不断地摸鱼感觉热情逐步消耗殆尽··这样的生活真的没问题吗？</p>\n<p>不断地立下誓言却又一次次的返回，这样真的是我想要的自我吗？</p>\n<p>不断地羡慕别人自己却没有提高，这样真的好吗？</p>\n<p>看看猎聘上薪资25K-50K工作的招聘要求，以后还是这样来对标自己比较好吧：</p>\n<blockquote>\n<p>java开发工程师的要求：</p>\n<blockquote>\n<p>1.全日制一类本科以上学历，计算机相关专业；</p>\n<p>2.JAVA基础扎实，精通IO、多线程、集合等基础框架，精通分布式、缓存、消息等机制；</p>\n<p>3.精通SpringBoot、MyBatis应用框架；</p>\n<p>4.精通分布式缓存、消息队列等中间件技术；</p>\n<p>5.熟悉k8s、docker等容器技术的使用，熟悉linux常用命令，可部署系统与分析性能；</p>\n<p>7.熟练掌握至少一种数据库Oracle、MySQL,有数据库优化经历者优先；</p>\n<p>8.具有很强的编码功底，有过业务设计经验，能解决疑难技术问题；</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>go开发工程师的要求：</p>\n<blockquote>\n<p>有扎实的 go 或JAVA 语言基础，理解面向对象设计基本原则，至少熟悉 python/ruby/shell的任意一种脚本语言<br>熟悉分布式计算相关技术，熟悉网络编程和多线程编程技术</p>\n<p>熟悉 Linux 或 Unix 操作系统，熟悉 Docker 容器</p>\n<p>有良好的逻辑思维能力、技术沟通能力、项目协调推进能力、具备问题和通用技术的抽象能力、问题解决及业务落地能力</p>\n<p>有大型集群及数据运维经验者优先、有基础架构开发经验者优先</p>\n</blockquote>\n</blockquote>\n<p>大概需要的东西就比较明确了：</p>\n<ol>\n<li>语言基础</li>\n<li>OO设计原则、IO、网络、多线程都是需要熟悉的东西</li>\n<li>容器技术如k8s、docker，以及相关的部署能力</li>\n<li>框架–可能不是太重要</li>\n<li>数据库，熟练掌握mysql就好了</li>\n<li>中间件，挑选常用的多学习一下。</li>\n</ol>\n<p>以后真的要好好学习了。</p>\n"},{"title":"mongodb 部署&简单操作","date":"2021-10-29T16:11:16.000Z","_content":"\n最近要学习部署mongodb，于是大概看了看mongodb的操作。\n\n\n## mongodb 的部署\n\nmongodb的部署方式分为三种： 主从复制(master-slave)、副本集(replica set)、分片(sharding)三种方式\n\n* Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。\n* Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。\n* Sharding 模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。\n\n<!--more-->\n\n这次我要部署的也是replica-set的mongodb，要部署三个节点。由于我并没有三个机器，所以就打算简化一下，用三个docker来部署三个mongodb，来做副本集\n\n部署的文档参考了这个[韩国人的blog](https://trainto.me/docker-mongodb-replicaset/)\n\n按照这个流程做下来大致没有啥问题，只需要自己确认好三个docker的host地址就ok\n\n## mongodb能做啥？\n\n> 碎碎念： 看这个部署方式大概知道要搞一个高可用、看数据存储的方式也是key-value的方式\n\nmongodb实际上是一个Nosql， 是一个文档型数据库\n\n![avator](http://c.biancheng.net/uploads/allimg/191118/6-19111Q22443D5.gif)\n\n\nmongodb的存储结构可以分为四个层次： 键值对、文档、集合、数据库\n\n键值对的value也可以是字符串、数值、数组、文档等\n\n文档和文档之间可以用嵌套和应用两种方式关联起来\n\n一个集合存放所有相关联的文档\n\n一个db存放一个应用所有的数据\n\n## mongodb的基本操作\n\n这里好像也没啥好讲的，比较操作就常见的几种，增删查改、权限操作···,讲个权限操作把\n\n### 权限操作\n\n创建了用户之后，用户不一定能访问你想要的数据库，那就要赋予权限，所以创建的时候就可以指定这个用户可以访问哪些数据库\n\n```json\n    db.createUser({\n      user:\"root\",\n      pwd:\"root\",\n      roles:[{role:\"readWrite\",db:\"flexiwan\"},\n      {role:\"readWrite\",db:\"flexiwanAnalytics\"},\n      {role:\"readWrite\",db:\"flexibilling\"}]\n    })\n```\n\n### replica-set部署\n\n想要做replica-set部署有一个前提：三个数据库要可以互相访问···还有啥大概要之后补充把\n```\n    config = {\n      \"_id\": \"rs0\",\n      \"members\": [{\n        \"_id\": 0,\n        \"host\": \"172.26.218.169:27017\"\n      }, {\n        \"_id\": 1,\n        \"host\": \"172.26.218.169:27018\"\n      }, {\n        \"_id\": 2,\n        \"host\": \"172.26.218.169:27019\",\n        arbiterOnly: true\n      }]\n    }\n\n    // then init this config\n    rs.initiate(config)\n```","source":"_posts/2021-10-29-mongodb-部署-简单操作.md","raw":"---\ntitle: mongodb 部署&简单操作\ndate: 2021-10-29 16:11:16\ntags:\n- mongo\ncategories:\n- mongodb\n---\n\n最近要学习部署mongodb，于是大概看了看mongodb的操作。\n\n\n## mongodb 的部署\n\nmongodb的部署方式分为三种： 主从复制(master-slave)、副本集(replica set)、分片(sharding)三种方式\n\n* Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。\n* Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。\n* Sharding 模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。\n\n<!--more-->\n\n这次我要部署的也是replica-set的mongodb，要部署三个节点。由于我并没有三个机器，所以就打算简化一下，用三个docker来部署三个mongodb，来做副本集\n\n部署的文档参考了这个[韩国人的blog](https://trainto.me/docker-mongodb-replicaset/)\n\n按照这个流程做下来大致没有啥问题，只需要自己确认好三个docker的host地址就ok\n\n## mongodb能做啥？\n\n> 碎碎念： 看这个部署方式大概知道要搞一个高可用、看数据存储的方式也是key-value的方式\n\nmongodb实际上是一个Nosql， 是一个文档型数据库\n\n![avator](http://c.biancheng.net/uploads/allimg/191118/6-19111Q22443D5.gif)\n\n\nmongodb的存储结构可以分为四个层次： 键值对、文档、集合、数据库\n\n键值对的value也可以是字符串、数值、数组、文档等\n\n文档和文档之间可以用嵌套和应用两种方式关联起来\n\n一个集合存放所有相关联的文档\n\n一个db存放一个应用所有的数据\n\n## mongodb的基本操作\n\n这里好像也没啥好讲的，比较操作就常见的几种，增删查改、权限操作···,讲个权限操作把\n\n### 权限操作\n\n创建了用户之后，用户不一定能访问你想要的数据库，那就要赋予权限，所以创建的时候就可以指定这个用户可以访问哪些数据库\n\n```json\n    db.createUser({\n      user:\"root\",\n      pwd:\"root\",\n      roles:[{role:\"readWrite\",db:\"flexiwan\"},\n      {role:\"readWrite\",db:\"flexiwanAnalytics\"},\n      {role:\"readWrite\",db:\"flexibilling\"}]\n    })\n```\n\n### replica-set部署\n\n想要做replica-set部署有一个前提：三个数据库要可以互相访问···还有啥大概要之后补充把\n```\n    config = {\n      \"_id\": \"rs0\",\n      \"members\": [{\n        \"_id\": 0,\n        \"host\": \"172.26.218.169:27017\"\n      }, {\n        \"_id\": 1,\n        \"host\": \"172.26.218.169:27018\"\n      }, {\n        \"_id\": 2,\n        \"host\": \"172.26.218.169:27019\",\n        arbiterOnly: true\n      }]\n    }\n\n    // then init this config\n    rs.initiate(config)\n```","slug":"mongodb-部署-简单操作","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhj900392h5p1mutgjsj","content":"<p>最近要学习部署mongodb，于是大概看了看mongodb的操作。</p>\n<h2 id=\"mongodb-的部署\"><a href=\"#mongodb-的部署\" class=\"headerlink\" title=\"mongodb 的部署\"></a>mongodb 的部署</h2><p>mongodb的部署方式分为三种： 主从复制(master-slave)、副本集(replica set)、分片(sharding)三种方式</p>\n<ul>\n<li>Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。</li>\n<li>Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。</li>\n<li>Sharding 模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>这次我要部署的也是replica-set的mongodb，要部署三个节点。由于我并没有三个机器，所以就打算简化一下，用三个docker来部署三个mongodb，来做副本集</p>\n<p>部署的文档参考了这个<a href=\"https://trainto.me/docker-mongodb-replicaset/\">韩国人的blog</a></p>\n<p>按照这个流程做下来大致没有啥问题，只需要自己确认好三个docker的host地址就ok</p>\n<h2 id=\"mongodb能做啥？\"><a href=\"#mongodb能做啥？\" class=\"headerlink\" title=\"mongodb能做啥？\"></a>mongodb能做啥？</h2><blockquote>\n<p>碎碎念： 看这个部署方式大概知道要搞一个高可用、看数据存储的方式也是key-value的方式</p>\n</blockquote>\n<p>mongodb实际上是一个Nosql， 是一个文档型数据库</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/191118/6-19111Q22443D5.gif\" alt=\"avator\"></p>\n<p>mongodb的存储结构可以分为四个层次： 键值对、文档、集合、数据库</p>\n<p>键值对的value也可以是字符串、数值、数组、文档等</p>\n<p>文档和文档之间可以用嵌套和应用两种方式关联起来</p>\n<p>一个集合存放所有相关联的文档</p>\n<p>一个db存放一个应用所有的数据</p>\n<h2 id=\"mongodb的基本操作\"><a href=\"#mongodb的基本操作\" class=\"headerlink\" title=\"mongodb的基本操作\"></a>mongodb的基本操作</h2><p>这里好像也没啥好讲的，比较操作就常见的几种，增删查改、权限操作···,讲个权限操作把</p>\n<h3 id=\"权限操作\"><a href=\"#权限操作\" class=\"headerlink\" title=\"权限操作\"></a>权限操作</h3><p>创建了用户之后，用户不一定能访问你想要的数据库，那就要赋予权限，所以创建的时候就可以指定这个用户可以访问哪些数据库</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;</span><br><span class=\"line\">  user:&quot;root&quot;,</span><br><span class=\"line\">  pwd:&quot;root&quot;,</span><br><span class=\"line\">  roles:[&#123;role:&quot;readWrite&quot;,db:&quot;flexiwan&quot;&#125;,</span><br><span class=\"line\">  &#123;role:&quot;readWrite&quot;,db:&quot;flexiwanAnalytics&quot;&#125;,</span><br><span class=\"line\">  &#123;role:&quot;readWrite&quot;,db:&quot;flexibilling&quot;&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"replica-set部署\"><a href=\"#replica-set部署\" class=\"headerlink\" title=\"replica-set部署\"></a>replica-set部署</h3><p>想要做replica-set部署有一个前提：三个数据库要可以互相访问···还有啥大概要之后补充把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config &#x3D; &#123;</span><br><span class=\"line\">  &quot;_id&quot;: &quot;rs0&quot;,</span><br><span class=\"line\">  &quot;members&quot;: [&#123;</span><br><span class=\"line\">    &quot;_id&quot;: 0,</span><br><span class=\"line\">    &quot;host&quot;: &quot;172.26.218.169:27017&quot;</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    &quot;_id&quot;: 1,</span><br><span class=\"line\">    &quot;host&quot;: &quot;172.26.218.169:27018&quot;</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    &quot;_id&quot;: 2,</span><br><span class=\"line\">    &quot;host&quot;: &quot;172.26.218.169:27019&quot;,</span><br><span class=\"line\">    arbiterOnly: true</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; then init this config</span><br><span class=\"line\">rs.initiate(config)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近要学习部署mongodb，于是大概看了看mongodb的操作。</p>\n<h2 id=\"mongodb-的部署\"><a href=\"#mongodb-的部署\" class=\"headerlink\" title=\"mongodb 的部署\"></a>mongodb 的部署</h2><p>mongodb的部署方式分为三种： 主从复制(master-slave)、副本集(replica set)、分片(sharding)三种方式</p>\n<ul>\n<li>Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。</li>\n<li>Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。</li>\n<li>Sharding 模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。</li>\n</ul>","more":"<p>这次我要部署的也是replica-set的mongodb，要部署三个节点。由于我并没有三个机器，所以就打算简化一下，用三个docker来部署三个mongodb，来做副本集</p>\n<p>部署的文档参考了这个<a href=\"https://trainto.me/docker-mongodb-replicaset/\">韩国人的blog</a></p>\n<p>按照这个流程做下来大致没有啥问题，只需要自己确认好三个docker的host地址就ok</p>\n<h2 id=\"mongodb能做啥？\"><a href=\"#mongodb能做啥？\" class=\"headerlink\" title=\"mongodb能做啥？\"></a>mongodb能做啥？</h2><blockquote>\n<p>碎碎念： 看这个部署方式大概知道要搞一个高可用、看数据存储的方式也是key-value的方式</p>\n</blockquote>\n<p>mongodb实际上是一个Nosql， 是一个文档型数据库</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/191118/6-19111Q22443D5.gif\" alt=\"avator\"></p>\n<p>mongodb的存储结构可以分为四个层次： 键值对、文档、集合、数据库</p>\n<p>键值对的value也可以是字符串、数值、数组、文档等</p>\n<p>文档和文档之间可以用嵌套和应用两种方式关联起来</p>\n<p>一个集合存放所有相关联的文档</p>\n<p>一个db存放一个应用所有的数据</p>\n<h2 id=\"mongodb的基本操作\"><a href=\"#mongodb的基本操作\" class=\"headerlink\" title=\"mongodb的基本操作\"></a>mongodb的基本操作</h2><p>这里好像也没啥好讲的，比较操作就常见的几种，增删查改、权限操作···,讲个权限操作把</p>\n<h3 id=\"权限操作\"><a href=\"#权限操作\" class=\"headerlink\" title=\"权限操作\"></a>权限操作</h3><p>创建了用户之后，用户不一定能访问你想要的数据库，那就要赋予权限，所以创建的时候就可以指定这个用户可以访问哪些数据库</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;</span><br><span class=\"line\">  user:&quot;root&quot;,</span><br><span class=\"line\">  pwd:&quot;root&quot;,</span><br><span class=\"line\">  roles:[&#123;role:&quot;readWrite&quot;,db:&quot;flexiwan&quot;&#125;,</span><br><span class=\"line\">  &#123;role:&quot;readWrite&quot;,db:&quot;flexiwanAnalytics&quot;&#125;,</span><br><span class=\"line\">  &#123;role:&quot;readWrite&quot;,db:&quot;flexibilling&quot;&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"replica-set部署\"><a href=\"#replica-set部署\" class=\"headerlink\" title=\"replica-set部署\"></a>replica-set部署</h3><p>想要做replica-set部署有一个前提：三个数据库要可以互相访问···还有啥大概要之后补充把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config &#x3D; &#123;</span><br><span class=\"line\">  &quot;_id&quot;: &quot;rs0&quot;,</span><br><span class=\"line\">  &quot;members&quot;: [&#123;</span><br><span class=\"line\">    &quot;_id&quot;: 0,</span><br><span class=\"line\">    &quot;host&quot;: &quot;172.26.218.169:27017&quot;</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    &quot;_id&quot;: 1,</span><br><span class=\"line\">    &quot;host&quot;: &quot;172.26.218.169:27018&quot;</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    &quot;_id&quot;: 2,</span><br><span class=\"line\">    &quot;host&quot;: &quot;172.26.218.169:27019&quot;,</span><br><span class=\"line\">    arbiterOnly: true</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; then init this config</span><br><span class=\"line\">rs.initiate(config)</span><br></pre></td></tr></table></figure>"},{"title":"spring 如何设置多数据源","date":"2021-11-04T19:02:54.000Z","_content":"\n今天处理了一个问题：一个多模块的java项目，大部分数据源用的是mysql里边的一个database。然后我的领导给了我一个半成品子项目，这个子项目的数据源用的和其它模块不是同一个db。\n\n在本地运行的时候没啥问题：因为本地读取的是本地的配置文件，在yml文件中直接写好对应的db地址就ok了。但是在线上运行的时候就有问题了。\n\n<!--more-->\n\n线上都读取的是nacos的配置，而nacos里边的配置项如下：\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://1.1.1.1:3306/db1?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: root\n```\n那这个子项目默认读取这个数据源就发生了错误，所以就要在配置里边加上第二个数据源，来提供给我的子模块读取：\n\n先看yml文件里边增加的配置：\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://1.1.1.1:3306/db1?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: root\n  secondary-datasource:\n    jdbc-url: jdbc:mysql://1.1.1.1:3306/db2?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n```\n\n对比之前的配置，可以增加了`secondary-datasource`这个配置项，这个配置项中`url`改成了`jdbc-url`， 增加了`driver-class-name`这个子配置项。\n\n为什么会这么整呢==是因为默认采用了Hikari连接池，而这个连接池没有`url`属性，而且也必须指定驱动名。如果还是使用`url`这个属性，就会报错`java.lang.IllegalArgumentException: jdbcUrl is required with driverClassName.`\n\n配置完数据项，下来就要考虑如何让spring默认读取`secondary-datasource`作为数据源。那么就再加一个config文件：\n\n```java\n// DataSourceConfig.java\n@Configuration\npublic class DataSourceConfig {\n    @Bean\n    @Primary\n    @ConfigurationProperties(prefix=\"spring.secondary-datasource\")\n    public DataSource dataSource(){\n        return DataSourceBuilder.create().build();\n    }\n}\n```\n1. @Configuration: 配置类\n2. @Bean: 注册为bean\n3. @Primary: 读取数据源的时候默认使用这个配置项\n4. @ConfigurationProperties: 指定读取yml文件的配置项路径\n\n这样一番操作之后就可以让我的子模块在第二数据源里边取数据了！\n\n","source":"_posts/2021-11-04-spring-如何设置多数据源.md","raw":"---\ntitle: spring 如何设置多数据源\ndate: 2021-11-04 19:02:54\ntags:\n- spring\n- database\n- java\ncategories:\n- backend\n---\n\n今天处理了一个问题：一个多模块的java项目，大部分数据源用的是mysql里边的一个database。然后我的领导给了我一个半成品子项目，这个子项目的数据源用的和其它模块不是同一个db。\n\n在本地运行的时候没啥问题：因为本地读取的是本地的配置文件，在yml文件中直接写好对应的db地址就ok了。但是在线上运行的时候就有问题了。\n\n<!--more-->\n\n线上都读取的是nacos的配置，而nacos里边的配置项如下：\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://1.1.1.1:3306/db1?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: root\n```\n那这个子项目默认读取这个数据源就发生了错误，所以就要在配置里边加上第二个数据源，来提供给我的子模块读取：\n\n先看yml文件里边增加的配置：\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://1.1.1.1:3306/db1?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: root\n  secondary-datasource:\n    jdbc-url: jdbc:mysql://1.1.1.1:3306/db2?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n```\n\n对比之前的配置，可以增加了`secondary-datasource`这个配置项，这个配置项中`url`改成了`jdbc-url`， 增加了`driver-class-name`这个子配置项。\n\n为什么会这么整呢==是因为默认采用了Hikari连接池，而这个连接池没有`url`属性，而且也必须指定驱动名。如果还是使用`url`这个属性，就会报错`java.lang.IllegalArgumentException: jdbcUrl is required with driverClassName.`\n\n配置完数据项，下来就要考虑如何让spring默认读取`secondary-datasource`作为数据源。那么就再加一个config文件：\n\n```java\n// DataSourceConfig.java\n@Configuration\npublic class DataSourceConfig {\n    @Bean\n    @Primary\n    @ConfigurationProperties(prefix=\"spring.secondary-datasource\")\n    public DataSource dataSource(){\n        return DataSourceBuilder.create().build();\n    }\n}\n```\n1. @Configuration: 配置类\n2. @Bean: 注册为bean\n3. @Primary: 读取数据源的时候默认使用这个配置项\n4. @ConfigurationProperties: 指定读取yml文件的配置项路径\n\n这样一番操作之后就可以让我的子模块在第二数据源里边取数据了！\n\n","slug":"spring-如何设置多数据源","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhk3003c2h5pdyvn9dw1","content":"<p>今天处理了一个问题：一个多模块的java项目，大部分数据源用的是mysql里边的一个database。然后我的领导给了我一个半成品子项目，这个子项目的数据源用的和其它模块不是同一个db。</p>\n<p>在本地运行的时候没啥问题：因为本地读取的是本地的配置文件，在yml文件中直接写好对应的db地址就ok了。但是在线上运行的时候就有问题了。</p>\n<a id=\"more\"></a>\n\n<p>线上都读取的是nacos的配置，而nacos里边的配置项如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://1.1.1.1:3306/db1?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;transformedBitIsBoolean=true&amp;tinyInt1isBit=false&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n<p>那这个子项目默认读取这个数据源就发生了错误，所以就要在配置里边加上第二个数据源，来提供给我的子模块读取：</p>\n<p>先看yml文件里边增加的配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://1.1.1.1:3306/db1?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;transformedBitIsBoolean=true&amp;tinyInt1isBit=false&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">secondary-datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">jdbc-url:</span> <span class=\"string\">jdbc:mysql://1.1.1.1:3306/db2?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;transformedBitIsBoolean=true&amp;tinyInt1isBit=false&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n<p>对比之前的配置，可以增加了<code>secondary-datasource</code>这个配置项，这个配置项中<code>url</code>改成了<code>jdbc-url</code>， 增加了<code>driver-class-name</code>这个子配置项。</p>\n<p>为什么会这么整呢==是因为默认采用了Hikari连接池，而这个连接池没有<code>url</code>属性，而且也必须指定驱动名。如果还是使用<code>url</code>这个属性，就会报错<code>java.lang.IllegalArgumentException: jdbcUrl is required with driverClassName.</code></p>\n<p>配置完数据项，下来就要考虑如何让spring默认读取<code>secondary-datasource</code>作为数据源。那么就再加一个config文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DataSourceConfig.java</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix=&quot;spring.secondary-datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DataSourceBuilder.create().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>@Configuration: 配置类</li>\n<li>@Bean: 注册为bean</li>\n<li>@Primary: 读取数据源的时候默认使用这个配置项</li>\n<li>@ConfigurationProperties: 指定读取yml文件的配置项路径</li>\n</ol>\n<p>这样一番操作之后就可以让我的子模块在第二数据源里边取数据了！</p>\n","site":{"data":{}},"excerpt":"<p>今天处理了一个问题：一个多模块的java项目，大部分数据源用的是mysql里边的一个database。然后我的领导给了我一个半成品子项目，这个子项目的数据源用的和其它模块不是同一个db。</p>\n<p>在本地运行的时候没啥问题：因为本地读取的是本地的配置文件，在yml文件中直接写好对应的db地址就ok了。但是在线上运行的时候就有问题了。</p>","more":"<p>线上都读取的是nacos的配置，而nacos里边的配置项如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://1.1.1.1:3306/db1?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;transformedBitIsBoolean=true&amp;tinyInt1isBit=false&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n<p>那这个子项目默认读取这个数据源就发生了错误，所以就要在配置里边加上第二个数据源，来提供给我的子模块读取：</p>\n<p>先看yml文件里边增加的配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://1.1.1.1:3306/db1?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;transformedBitIsBoolean=true&amp;tinyInt1isBit=false&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">secondary-datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">jdbc-url:</span> <span class=\"string\">jdbc:mysql://1.1.1.1:3306/db2?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;transformedBitIsBoolean=true&amp;tinyInt1isBit=false&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n<p>对比之前的配置，可以增加了<code>secondary-datasource</code>这个配置项，这个配置项中<code>url</code>改成了<code>jdbc-url</code>， 增加了<code>driver-class-name</code>这个子配置项。</p>\n<p>为什么会这么整呢==是因为默认采用了Hikari连接池，而这个连接池没有<code>url</code>属性，而且也必须指定驱动名。如果还是使用<code>url</code>这个属性，就会报错<code>java.lang.IllegalArgumentException: jdbcUrl is required with driverClassName.</code></p>\n<p>配置完数据项，下来就要考虑如何让spring默认读取<code>secondary-datasource</code>作为数据源。那么就再加一个config文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DataSourceConfig.java</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix=&quot;spring.secondary-datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DataSourceBuilder.create().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>@Configuration: 配置类</li>\n<li>@Bean: 注册为bean</li>\n<li>@Primary: 读取数据源的时候默认使用这个配置项</li>\n<li>@ConfigurationProperties: 指定读取yml文件的配置项路径</li>\n</ol>\n<p>这样一番操作之后就可以让我的子模块在第二数据源里边取数据了！</p>"},{"title":"代码托管平台的选择","date":"2021-11-04T19:02:13.000Z","_content":"\n最近感觉困扰我写blog的一大问题就是写好了pull上去好像非常困难，于是我就计划开始研究一下常用的代码托管平台都好不好用\n\n废文警告\n<!--more-->\n\n1. github\n\n最大没毛病，当然我的代码也都托管在github上边，而且现在也可以建立private项目，基本上可以说是非常完美，但是我就是感觉国内的网络好像有问题的样子··每次pull不上去都非常头痛··\n\n2. gitlab\n\n我原以为gitlab是拯救我的天使，没有想到这是另外一个大坑：网络联通性比github还要差··虽然也有CI/CD的功能，但是用起来感觉离github还差了一大截。\n\n我计划搞完这个项目就从gitlab脱坑，还是回到github吧\n\n3. gitee\n\n国内的平台嘛，网络联通总是没问题的，然而最困惑的就是没有ci/cd的功能，想要部署hexo的blog上去都要手动deploy··这也太low了吧，我不能接受··\n\n\n","source":"_posts/2021-11-04-代码托管平台的选择.md","raw":"---\ntitle: 代码托管平台的选择\ndate: 2021-11-04 19:02:13\ntags:\n- 平台\ncategories:\n- chat\n---\n\n最近感觉困扰我写blog的一大问题就是写好了pull上去好像非常困难，于是我就计划开始研究一下常用的代码托管平台都好不好用\n\n废文警告\n<!--more-->\n\n1. github\n\n最大没毛病，当然我的代码也都托管在github上边，而且现在也可以建立private项目，基本上可以说是非常完美，但是我就是感觉国内的网络好像有问题的样子··每次pull不上去都非常头痛··\n\n2. gitlab\n\n我原以为gitlab是拯救我的天使，没有想到这是另外一个大坑：网络联通性比github还要差··虽然也有CI/CD的功能，但是用起来感觉离github还差了一大截。\n\n我计划搞完这个项目就从gitlab脱坑，还是回到github吧\n\n3. gitee\n\n国内的平台嘛，网络联通总是没问题的，然而最困惑的就是没有ci/cd的功能，想要部署hexo的blog上去都要手动deploy··这也太low了吧，我不能接受··\n\n\n","slug":"代码托管平台的选择","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhkp003g2h5p850s23r1","content":"<p>最近感觉困扰我写blog的一大问题就是写好了pull上去好像非常困难，于是我就计划开始研究一下常用的代码托管平台都好不好用</p>\n<p>废文警告</p>\n<a id=\"more\"></a>\n\n<ol>\n<li>github</li>\n</ol>\n<p>最大没毛病，当然我的代码也都托管在github上边，而且现在也可以建立private项目，基本上可以说是非常完美，但是我就是感觉国内的网络好像有问题的样子··每次pull不上去都非常头痛··</p>\n<ol start=\"2\">\n<li>gitlab</li>\n</ol>\n<p>我原以为gitlab是拯救我的天使，没有想到这是另外一个大坑：网络联通性比github还要差··虽然也有CI/CD的功能，但是用起来感觉离github还差了一大截。</p>\n<p>我计划搞完这个项目就从gitlab脱坑，还是回到github吧</p>\n<ol start=\"3\">\n<li>gitee</li>\n</ol>\n<p>国内的平台嘛，网络联通总是没问题的，然而最困惑的就是没有ci/cd的功能，想要部署hexo的blog上去都要手动deploy··这也太low了吧，我不能接受··</p>\n","site":{"data":{}},"excerpt":"<p>最近感觉困扰我写blog的一大问题就是写好了pull上去好像非常困难，于是我就计划开始研究一下常用的代码托管平台都好不好用</p>\n<p>废文警告</p>","more":"<ol>\n<li>github</li>\n</ol>\n<p>最大没毛病，当然我的代码也都托管在github上边，而且现在也可以建立private项目，基本上可以说是非常完美，但是我就是感觉国内的网络好像有问题的样子··每次pull不上去都非常头痛··</p>\n<ol start=\"2\">\n<li>gitlab</li>\n</ol>\n<p>我原以为gitlab是拯救我的天使，没有想到这是另外一个大坑：网络联通性比github还要差··虽然也有CI/CD的功能，但是用起来感觉离github还差了一大截。</p>\n<p>我计划搞完这个项目就从gitlab脱坑，还是回到github吧</p>\n<ol start=\"3\">\n<li>gitee</li>\n</ol>\n<p>国内的平台嘛，网络联通总是没问题的，然而最困惑的就是没有ci/cd的功能，想要部署hexo的blog上去都要手动deploy··这也太low了吧，我不能接受··</p>"},{"title":"如何展示quartz所有可执行job","date":"2021-11-09T17:29:25.000Z","_content":"\n最近在写一个定时任务系统，其实是相当简单，也就是用了quartz，但是写的时候遇到了一个小问题，前端创建scheduler的时候，总不能传待执行task的类名吧，这也太尬了。于是就又有了一个小小的需求：要展示所有可执行task的名称\n\n在我的代码里，我的所有可执行task都提供了一个接口，在一个quartz模块里有一个package里边写了很多个类就专门来调task接口，比如：\n\n<!--more-->\n\n\n```java\n\n/job/job001.java\n\npublic class job001 implements Job {\n\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n        log.info(\"do job001\");\n    }\n}\n\n```\n\n于是就在job这个package下所有的类就全部都是可供执行的job。那么这个任务就等价于：如何展示这个package下所有class的类名和名称\n\n其实最简单的方法：就是搞上一个数据库，把数据都存进去，可是这样未免过于不优雅，每次新增任务的时候还要更新数据库里边的数据。于是我就想：能不能直接操作文件？\n\n于是搜了一番果然找到有大佬早早就做过类似的工作：[获取java接口的所有实现类](https://www.cnblogs.com/wangzhen-fly/p/11002814.html),大佬做的工作也非常详细，直接提供类方法可以查看jar包和file里的所有类名，一番删除修改之后就直接可以获取到这个package下所有的类名了，可以说是非常方便\n\n那么还有一个问题：如何给这个类名对应一个便于前端理解的名字呢？我就给每个task类都加了一个`getName()`的方法，使用反射来调用这个方法，就可以获取到类所对应的名称了。一般而言，这里的方法都是有其固定意义的，想要写重复还是挺难的把！再说就算写重复也还是可以校验的。于是我就写了一个接口：\n\n```java\npublic interface SchJob extends Job, Serializable {\n    String getName();\n}\n```\n\n所有的job类都要继承这个SchJob，那么写一个Job类的话就变成了这样子：\n\n```java\npublic class Test1 implements SchJob {\n\n    @Override\n    public String getName() {\n        return \"测试方法1\";\n    }\n\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n        doSomeThing();\n    }\n}\n\n```\n然后要写一个配置类来方便的建立所有job class name和name的对应关系：\n\n```java\n@Component\npublic class InitTaskName {\n\n    public static Map<String, String> NameMapClass = new HashMap<>();\n    public static Map<String, String> ClassMapName = new HashMap<>();\n    public static List<String> NameList = new ArrayList<>();\n\n    @PostConstruct\n    public void init() {\n        NameMapClass.clear();\n        ClassMapName.clear();\n        NameList.clear();\n        List<String> res = ClazzUtil.getClassName(\"com.test.proj1\");\n        res.forEach(r -> {\n            try {\n                Class classzz = Class.forName(r);\n                Constructor constructor = classzz.getConstructor();\n                Object o = constructor.newInstance();\n                Method method = classzz.getMethod(\"getName\");\n                NameMapClass.put((String) method.invoke(o), r);\n                ClassMapName.put(r, (String) method.invoke(o));\n                NameList.add((String) method.invoke(o));\n            } catch (ClassNotFoundException | InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        });\n        if (NameList.size() != ClassMapName.size() && NameList.size() != NameMapClass.size()) {\n            throw new ServiceException(\"duplication job class name!\");\n        }\n    }\n}\n```\n这样的话在其他类里边就可以很方便的获取所有可执行job的class name和name的对应关系了！\n\n最后贴一下大神写的如何获取java接口的所有实现类，我删除了一些用不到的类：\n\n```java\n\n/**\n * 获取接口的所有实现类 理论上也可以用来获取类的所有子类\n * 查询路径有限制，只局限于接口所在模块下，比如pandora-gateway,而非整个pandora（会递归搜索该文件夹下所以的实现类）\n * 路径中不可含中文，否则会异常。若要支持中文路径，需对该模块代码中url.getPath() 返回值进行urldecode.\n * Created by wangzhen3 on 2017/6/23.\n */\npublic class ClazzUtil {\n    private static final Logger LOG = LoggerFactory.getLogger(ClazzUtil.class);\n\n    /**\n     * 获取某包下所有类\n     *\n     * @param packageName 包名\n     * @return 类的完整名称\n     */\n    public static List<String> getClassName(String packageName) {\n\n        List<String> fileNames = null;\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        String packagePath = packageName.replace(\".\", \"/\");\n        URL url = loader.getResource(packagePath);\n        System.out.println(\"now url is \" + url);\n        if (url != null) {\n            String type = url.getProtocol();\n            LOG.debug(\"file type : \" + type);\n            if (type.equals(\"file\")) {\n                String fileSearchPath = url.getPath();\n                LOG.debug(\"fileSearchPath: \" + fileSearchPath);\n                fileSearchPath = fileSearchPath.substring(0, fileSearchPath.indexOf(\"/classes\"));\n                LOG.debug(\"fileSearchPath: \" + fileSearchPath);\n                fileNames = getClassNameByFile(fileSearchPath);\n            }  else if (type.equals(\"jar\")) {\n                try{\n                    JarURLConnection jarURLConnection = (JarURLConnection)url.openConnection();\n                    JarFile jarFile = jarURLConnection.getJarFile();\n                    fileNames = getClassNameByJar(jarFile,packagePath);\n                }catch (java.io.IOException e){\n                    throw new RuntimeException(\"open Package URL failed：\"+e.getMessage());\n                }\n\n            }else {\n                throw new RuntimeException(\"file system not support! cannot load MsgProcessor！\");\n            }\n        }\n        return fileNames;\n    }\n\n    /**\n     * 从项目文件获取某包下所有类\n     *\n     * @param filePath 文件路径\n     * @return 类的完整名称\n     */\n    private static List<String> getClassNameByFile(String filePath) {\n        List<String> myClassName = new ArrayList<String>();\n        File file = new File(filePath);\n        File[] childFiles = file.listFiles();\n        for (File childFile : childFiles) {\n            if (childFile.isDirectory()) {\n                myClassName.addAll(getClassNameByFile(childFile.getPath()));\n            } else {\n                String childFilePath = childFile.getPath();\n                if (childFilePath.endsWith(\".class\")) {\n                    childFilePath = childFilePath.substring(childFilePath.indexOf(\"\\\\classes\") + 9, childFilePath.lastIndexOf(\".\"));\n                    childFilePath = childFilePath.replace(\"\\\\\", \".\");\n                    myClassName.add(childFilePath);\n                }\n            }\n        }\n\n        return myClassName;\n    }\n\n\n    private static List<String> getClassNameByJar(JarFile jarFile ,String packagePath) {\n        List<String> myClassName = new ArrayList<String>();\n        try {\n            Enumeration<JarEntry> entrys = jarFile.entries();\n            while (entrys.hasMoreElements()) {\n                JarEntry jarEntry = entrys.nextElement();\n                String entryName = jarEntry.getName();\n                //LOG.info(\"entrys jarfile:\"+entryName);\n                if (entryName.endsWith(\".class\")) {\n                    entryName = entryName.replace(\"/\", \".\").substring(0, entryName.lastIndexOf(\".\"));\n                    myClassName.add(entryName);\n                    //LOG.debug(\"Find Class :\"+entryName);\n                }\n            }\n        } catch (Exception e) {\n            LOG.error(\"发生异常:\"+e.getMessage());\n            throw new RuntimeException(\"发生异常:\"+e.getMessage());\n        }\n        return myClassName;\n    }\n}\n```","source":"_posts/2021-11-09-如何展示quartz所有可执行job.md","raw":"---\ntitle: 如何展示quartz所有可执行job\ndate: 2021-11-09 17:29:25\ntags:\n- quartz\n- java\ncategories:\n- backend\n---\n\n最近在写一个定时任务系统，其实是相当简单，也就是用了quartz，但是写的时候遇到了一个小问题，前端创建scheduler的时候，总不能传待执行task的类名吧，这也太尬了。于是就又有了一个小小的需求：要展示所有可执行task的名称\n\n在我的代码里，我的所有可执行task都提供了一个接口，在一个quartz模块里有一个package里边写了很多个类就专门来调task接口，比如：\n\n<!--more-->\n\n\n```java\n\n/job/job001.java\n\npublic class job001 implements Job {\n\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n        log.info(\"do job001\");\n    }\n}\n\n```\n\n于是就在job这个package下所有的类就全部都是可供执行的job。那么这个任务就等价于：如何展示这个package下所有class的类名和名称\n\n其实最简单的方法：就是搞上一个数据库，把数据都存进去，可是这样未免过于不优雅，每次新增任务的时候还要更新数据库里边的数据。于是我就想：能不能直接操作文件？\n\n于是搜了一番果然找到有大佬早早就做过类似的工作：[获取java接口的所有实现类](https://www.cnblogs.com/wangzhen-fly/p/11002814.html),大佬做的工作也非常详细，直接提供类方法可以查看jar包和file里的所有类名，一番删除修改之后就直接可以获取到这个package下所有的类名了，可以说是非常方便\n\n那么还有一个问题：如何给这个类名对应一个便于前端理解的名字呢？我就给每个task类都加了一个`getName()`的方法，使用反射来调用这个方法，就可以获取到类所对应的名称了。一般而言，这里的方法都是有其固定意义的，想要写重复还是挺难的把！再说就算写重复也还是可以校验的。于是我就写了一个接口：\n\n```java\npublic interface SchJob extends Job, Serializable {\n    String getName();\n}\n```\n\n所有的job类都要继承这个SchJob，那么写一个Job类的话就变成了这样子：\n\n```java\npublic class Test1 implements SchJob {\n\n    @Override\n    public String getName() {\n        return \"测试方法1\";\n    }\n\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n        doSomeThing();\n    }\n}\n\n```\n然后要写一个配置类来方便的建立所有job class name和name的对应关系：\n\n```java\n@Component\npublic class InitTaskName {\n\n    public static Map<String, String> NameMapClass = new HashMap<>();\n    public static Map<String, String> ClassMapName = new HashMap<>();\n    public static List<String> NameList = new ArrayList<>();\n\n    @PostConstruct\n    public void init() {\n        NameMapClass.clear();\n        ClassMapName.clear();\n        NameList.clear();\n        List<String> res = ClazzUtil.getClassName(\"com.test.proj1\");\n        res.forEach(r -> {\n            try {\n                Class classzz = Class.forName(r);\n                Constructor constructor = classzz.getConstructor();\n                Object o = constructor.newInstance();\n                Method method = classzz.getMethod(\"getName\");\n                NameMapClass.put((String) method.invoke(o), r);\n                ClassMapName.put(r, (String) method.invoke(o));\n                NameList.add((String) method.invoke(o));\n            } catch (ClassNotFoundException | InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        });\n        if (NameList.size() != ClassMapName.size() && NameList.size() != NameMapClass.size()) {\n            throw new ServiceException(\"duplication job class name!\");\n        }\n    }\n}\n```\n这样的话在其他类里边就可以很方便的获取所有可执行job的class name和name的对应关系了！\n\n最后贴一下大神写的如何获取java接口的所有实现类，我删除了一些用不到的类：\n\n```java\n\n/**\n * 获取接口的所有实现类 理论上也可以用来获取类的所有子类\n * 查询路径有限制，只局限于接口所在模块下，比如pandora-gateway,而非整个pandora（会递归搜索该文件夹下所以的实现类）\n * 路径中不可含中文，否则会异常。若要支持中文路径，需对该模块代码中url.getPath() 返回值进行urldecode.\n * Created by wangzhen3 on 2017/6/23.\n */\npublic class ClazzUtil {\n    private static final Logger LOG = LoggerFactory.getLogger(ClazzUtil.class);\n\n    /**\n     * 获取某包下所有类\n     *\n     * @param packageName 包名\n     * @return 类的完整名称\n     */\n    public static List<String> getClassName(String packageName) {\n\n        List<String> fileNames = null;\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        String packagePath = packageName.replace(\".\", \"/\");\n        URL url = loader.getResource(packagePath);\n        System.out.println(\"now url is \" + url);\n        if (url != null) {\n            String type = url.getProtocol();\n            LOG.debug(\"file type : \" + type);\n            if (type.equals(\"file\")) {\n                String fileSearchPath = url.getPath();\n                LOG.debug(\"fileSearchPath: \" + fileSearchPath);\n                fileSearchPath = fileSearchPath.substring(0, fileSearchPath.indexOf(\"/classes\"));\n                LOG.debug(\"fileSearchPath: \" + fileSearchPath);\n                fileNames = getClassNameByFile(fileSearchPath);\n            }  else if (type.equals(\"jar\")) {\n                try{\n                    JarURLConnection jarURLConnection = (JarURLConnection)url.openConnection();\n                    JarFile jarFile = jarURLConnection.getJarFile();\n                    fileNames = getClassNameByJar(jarFile,packagePath);\n                }catch (java.io.IOException e){\n                    throw new RuntimeException(\"open Package URL failed：\"+e.getMessage());\n                }\n\n            }else {\n                throw new RuntimeException(\"file system not support! cannot load MsgProcessor！\");\n            }\n        }\n        return fileNames;\n    }\n\n    /**\n     * 从项目文件获取某包下所有类\n     *\n     * @param filePath 文件路径\n     * @return 类的完整名称\n     */\n    private static List<String> getClassNameByFile(String filePath) {\n        List<String> myClassName = new ArrayList<String>();\n        File file = new File(filePath);\n        File[] childFiles = file.listFiles();\n        for (File childFile : childFiles) {\n            if (childFile.isDirectory()) {\n                myClassName.addAll(getClassNameByFile(childFile.getPath()));\n            } else {\n                String childFilePath = childFile.getPath();\n                if (childFilePath.endsWith(\".class\")) {\n                    childFilePath = childFilePath.substring(childFilePath.indexOf(\"\\\\classes\") + 9, childFilePath.lastIndexOf(\".\"));\n                    childFilePath = childFilePath.replace(\"\\\\\", \".\");\n                    myClassName.add(childFilePath);\n                }\n            }\n        }\n\n        return myClassName;\n    }\n\n\n    private static List<String> getClassNameByJar(JarFile jarFile ,String packagePath) {\n        List<String> myClassName = new ArrayList<String>();\n        try {\n            Enumeration<JarEntry> entrys = jarFile.entries();\n            while (entrys.hasMoreElements()) {\n                JarEntry jarEntry = entrys.nextElement();\n                String entryName = jarEntry.getName();\n                //LOG.info(\"entrys jarfile:\"+entryName);\n                if (entryName.endsWith(\".class\")) {\n                    entryName = entryName.replace(\"/\", \".\").substring(0, entryName.lastIndexOf(\".\"));\n                    myClassName.add(entryName);\n                    //LOG.debug(\"Find Class :\"+entryName);\n                }\n            }\n        } catch (Exception e) {\n            LOG.error(\"发生异常:\"+e.getMessage());\n            throw new RuntimeException(\"发生异常:\"+e.getMessage());\n        }\n        return myClassName;\n    }\n}\n```","slug":"如何展示quartz所有可执行job","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhlb003j2h5p1ked2wo2","content":"<p>最近在写一个定时任务系统，其实是相当简单，也就是用了quartz，但是写的时候遇到了一个小问题，前端创建scheduler的时候，总不能传待执行task的类名吧，这也太尬了。于是就又有了一个小小的需求：要展示所有可执行task的名称</p>\n<p>在我的代码里，我的所有可执行task都提供了一个接口，在一个quartz模块里有一个package里边写了很多个类就专门来调task接口，比如：</p>\n<a id=\"more\"></a>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/job/job001.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">job001</span> <span class=\"keyword\">implements</span> <span class=\"title\">Job</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;do job001&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>于是就在job这个package下所有的类就全部都是可供执行的job。那么这个任务就等价于：如何展示这个package下所有class的类名和名称</p>\n<p>其实最简单的方法：就是搞上一个数据库，把数据都存进去，可是这样未免过于不优雅，每次新增任务的时候还要更新数据库里边的数据。于是我就想：能不能直接操作文件？</p>\n<p>于是搜了一番果然找到有大佬早早就做过类似的工作：<a href=\"https://www.cnblogs.com/wangzhen-fly/p/11002814.html\">获取java接口的所有实现类</a>,大佬做的工作也非常详细，直接提供类方法可以查看jar包和file里的所有类名，一番删除修改之后就直接可以获取到这个package下所有的类名了，可以说是非常方便</p>\n<p>那么还有一个问题：如何给这个类名对应一个便于前端理解的名字呢？我就给每个task类都加了一个<code>getName()</code>的方法，使用反射来调用这个方法，就可以获取到类所对应的名称了。一般而言，这里的方法都是有其固定意义的，想要写重复还是挺难的把！再说就算写重复也还是可以校验的。于是我就写了一个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SchJob</span> <span class=\"keyword\">extends</span> <span class=\"title\">Job</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有的job类都要继承这个SchJob，那么写一个Job类的话就变成了这样子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test1</span> <span class=\"keyword\">implements</span> <span class=\"title\">SchJob</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;测试方法1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</span><br><span class=\"line\">        doSomeThing();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后要写一个配置类来方便的建立所有job class name和name的对应关系：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InitTaskName</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; NameMapClass = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; ClassMapName = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; NameList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        NameMapClass.clear();</span><br><span class=\"line\">        ClassMapName.clear();</span><br><span class=\"line\">        NameList.clear();</span><br><span class=\"line\">        List&lt;String&gt; res = ClazzUtil.getClassName(<span class=\"string\">&quot;com.test.proj1&quot;</span>);</span><br><span class=\"line\">        res.forEach(r -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Class classzz = Class.forName(r);</span><br><span class=\"line\">                Constructor constructor = classzz.getConstructor();</span><br><span class=\"line\">                Object o = constructor.newInstance();</span><br><span class=\"line\">                Method method = classzz.getMethod(<span class=\"string\">&quot;getName&quot;</span>);</span><br><span class=\"line\">                NameMapClass.put((String) method.invoke(o), r);</span><br><span class=\"line\">                ClassMapName.put(r, (String) method.invoke(o));</span><br><span class=\"line\">                NameList.add((String) method.invoke(o));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException | InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (NameList.size() != ClassMapName.size() &amp;&amp; NameList.size() != NameMapClass.size()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServiceException(<span class=\"string\">&quot;duplication job class name!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的话在其他类里边就可以很方便的获取所有可执行job的class name和name的对应关系了！</p>\n<p>最后贴一下大神写的如何获取java接口的所有实现类，我删除了一些用不到的类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取接口的所有实现类 理论上也可以用来获取类的所有子类</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询路径有限制，只局限于接口所在模块下，比如pandora-gateway,而非整个pandora（会递归搜索该文件夹下所以的实现类）</span></span><br><span class=\"line\"><span class=\"comment\"> * 路径中不可含中文，否则会异常。若要支持中文路径，需对该模块代码中url.getPath() 返回值进行urldecode.</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by wangzhen3 on 2017/6/23.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClazzUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG = LoggerFactory.getLogger(ClazzUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取某包下所有类</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> packageName 包名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 类的完整名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassName</span><span class=\"params\">(String packageName)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; fileNames = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        String packagePath = packageName.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        URL url = loader.getResource(packagePath);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;now url is &quot;</span> + url);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String type = url.getProtocol();</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">&quot;file type : &quot;</span> + type);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">&quot;file&quot;</span>)) &#123;</span><br><span class=\"line\">                String fileSearchPath = url.getPath();</span><br><span class=\"line\">                LOG.debug(<span class=\"string\">&quot;fileSearchPath: &quot;</span> + fileSearchPath);</span><br><span class=\"line\">                fileSearchPath = fileSearchPath.substring(<span class=\"number\">0</span>, fileSearchPath.indexOf(<span class=\"string\">&quot;/classes&quot;</span>));</span><br><span class=\"line\">                LOG.debug(<span class=\"string\">&quot;fileSearchPath: &quot;</span> + fileSearchPath);</span><br><span class=\"line\">                fileNames = getClassNameByFile(fileSearchPath);</span><br><span class=\"line\">            &#125;  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">&quot;jar&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    JarURLConnection jarURLConnection = (JarURLConnection)url.openConnection();</span><br><span class=\"line\">                    JarFile jarFile = jarURLConnection.getJarFile();</span><br><span class=\"line\">                    fileNames = getClassNameByJar(jarFile,packagePath);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (java.io.IOException e)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;open Package URL failed：&quot;</span>+e.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;file system not support! cannot load MsgProcessor！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileNames;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从项目文件获取某包下所有类</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filePath 文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 类的完整名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassNameByFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; myClassName = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">        File[] childFiles = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (File childFile : childFiles) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childFile.isDirectory()) &#123;</span><br><span class=\"line\">                myClassName.addAll(getClassNameByFile(childFile.getPath()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String childFilePath = childFile.getPath();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childFilePath.endsWith(<span class=\"string\">&quot;.class&quot;</span>)) &#123;</span><br><span class=\"line\">                    childFilePath = childFilePath.substring(childFilePath.indexOf(<span class=\"string\">&quot;\\\\classes&quot;</span>) + <span class=\"number\">9</span>, childFilePath.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">                    childFilePath = childFilePath.replace(<span class=\"string\">&quot;\\\\&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">                    myClassName.add(childFilePath);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> myClassName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassNameByJar</span><span class=\"params\">(JarFile jarFile ,String packagePath)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; myClassName = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Enumeration&lt;JarEntry&gt; entrys = jarFile.entries();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (entrys.hasMoreElements()) &#123;</span><br><span class=\"line\">                JarEntry jarEntry = entrys.nextElement();</span><br><span class=\"line\">                String entryName = jarEntry.getName();</span><br><span class=\"line\">                <span class=\"comment\">//LOG.info(&quot;entrys jarfile:&quot;+entryName);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entryName.endsWith(<span class=\"string\">&quot;.class&quot;</span>)) &#123;</span><br><span class=\"line\">                    entryName = entryName.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;.&quot;</span>).substring(<span class=\"number\">0</span>, entryName.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">                    myClassName.add(entryName);</span><br><span class=\"line\">                    <span class=\"comment\">//LOG.debug(&quot;Find Class :&quot;+entryName);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">&quot;发生异常:&quot;</span>+e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;发生异常:&quot;</span>+e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myClassName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近在写一个定时任务系统，其实是相当简单，也就是用了quartz，但是写的时候遇到了一个小问题，前端创建scheduler的时候，总不能传待执行task的类名吧，这也太尬了。于是就又有了一个小小的需求：要展示所有可执行task的名称</p>\n<p>在我的代码里，我的所有可执行task都提供了一个接口，在一个quartz模块里有一个package里边写了很多个类就专门来调task接口，比如：</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/job/job001.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">job001</span> <span class=\"keyword\">implements</span> <span class=\"title\">Job</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;do job001&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>于是就在job这个package下所有的类就全部都是可供执行的job。那么这个任务就等价于：如何展示这个package下所有class的类名和名称</p>\n<p>其实最简单的方法：就是搞上一个数据库，把数据都存进去，可是这样未免过于不优雅，每次新增任务的时候还要更新数据库里边的数据。于是我就想：能不能直接操作文件？</p>\n<p>于是搜了一番果然找到有大佬早早就做过类似的工作：<a href=\"https://www.cnblogs.com/wangzhen-fly/p/11002814.html\">获取java接口的所有实现类</a>,大佬做的工作也非常详细，直接提供类方法可以查看jar包和file里的所有类名，一番删除修改之后就直接可以获取到这个package下所有的类名了，可以说是非常方便</p>\n<p>那么还有一个问题：如何给这个类名对应一个便于前端理解的名字呢？我就给每个task类都加了一个<code>getName()</code>的方法，使用反射来调用这个方法，就可以获取到类所对应的名称了。一般而言，这里的方法都是有其固定意义的，想要写重复还是挺难的把！再说就算写重复也还是可以校验的。于是我就写了一个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SchJob</span> <span class=\"keyword\">extends</span> <span class=\"title\">Job</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有的job类都要继承这个SchJob，那么写一个Job类的话就变成了这样子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test1</span> <span class=\"keyword\">implements</span> <span class=\"title\">SchJob</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;测试方法1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</span><br><span class=\"line\">        doSomeThing();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后要写一个配置类来方便的建立所有job class name和name的对应关系：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InitTaskName</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; NameMapClass = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; ClassMapName = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; NameList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        NameMapClass.clear();</span><br><span class=\"line\">        ClassMapName.clear();</span><br><span class=\"line\">        NameList.clear();</span><br><span class=\"line\">        List&lt;String&gt; res = ClazzUtil.getClassName(<span class=\"string\">&quot;com.test.proj1&quot;</span>);</span><br><span class=\"line\">        res.forEach(r -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Class classzz = Class.forName(r);</span><br><span class=\"line\">                Constructor constructor = classzz.getConstructor();</span><br><span class=\"line\">                Object o = constructor.newInstance();</span><br><span class=\"line\">                Method method = classzz.getMethod(<span class=\"string\">&quot;getName&quot;</span>);</span><br><span class=\"line\">                NameMapClass.put((String) method.invoke(o), r);</span><br><span class=\"line\">                ClassMapName.put(r, (String) method.invoke(o));</span><br><span class=\"line\">                NameList.add((String) method.invoke(o));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException | InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (NameList.size() != ClassMapName.size() &amp;&amp; NameList.size() != NameMapClass.size()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServiceException(<span class=\"string\">&quot;duplication job class name!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的话在其他类里边就可以很方便的获取所有可执行job的class name和name的对应关系了！</p>\n<p>最后贴一下大神写的如何获取java接口的所有实现类，我删除了一些用不到的类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取接口的所有实现类 理论上也可以用来获取类的所有子类</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询路径有限制，只局限于接口所在模块下，比如pandora-gateway,而非整个pandora（会递归搜索该文件夹下所以的实现类）</span></span><br><span class=\"line\"><span class=\"comment\"> * 路径中不可含中文，否则会异常。若要支持中文路径，需对该模块代码中url.getPath() 返回值进行urldecode.</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by wangzhen3 on 2017/6/23.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClazzUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG = LoggerFactory.getLogger(ClazzUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取某包下所有类</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> packageName 包名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 类的完整名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassName</span><span class=\"params\">(String packageName)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; fileNames = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        String packagePath = packageName.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        URL url = loader.getResource(packagePath);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;now url is &quot;</span> + url);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String type = url.getProtocol();</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">&quot;file type : &quot;</span> + type);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">&quot;file&quot;</span>)) &#123;</span><br><span class=\"line\">                String fileSearchPath = url.getPath();</span><br><span class=\"line\">                LOG.debug(<span class=\"string\">&quot;fileSearchPath: &quot;</span> + fileSearchPath);</span><br><span class=\"line\">                fileSearchPath = fileSearchPath.substring(<span class=\"number\">0</span>, fileSearchPath.indexOf(<span class=\"string\">&quot;/classes&quot;</span>));</span><br><span class=\"line\">                LOG.debug(<span class=\"string\">&quot;fileSearchPath: &quot;</span> + fileSearchPath);</span><br><span class=\"line\">                fileNames = getClassNameByFile(fileSearchPath);</span><br><span class=\"line\">            &#125;  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">&quot;jar&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    JarURLConnection jarURLConnection = (JarURLConnection)url.openConnection();</span><br><span class=\"line\">                    JarFile jarFile = jarURLConnection.getJarFile();</span><br><span class=\"line\">                    fileNames = getClassNameByJar(jarFile,packagePath);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (java.io.IOException e)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;open Package URL failed：&quot;</span>+e.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;file system not support! cannot load MsgProcessor！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileNames;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从项目文件获取某包下所有类</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filePath 文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 类的完整名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassNameByFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; myClassName = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">        File[] childFiles = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (File childFile : childFiles) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childFile.isDirectory()) &#123;</span><br><span class=\"line\">                myClassName.addAll(getClassNameByFile(childFile.getPath()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String childFilePath = childFile.getPath();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childFilePath.endsWith(<span class=\"string\">&quot;.class&quot;</span>)) &#123;</span><br><span class=\"line\">                    childFilePath = childFilePath.substring(childFilePath.indexOf(<span class=\"string\">&quot;\\\\classes&quot;</span>) + <span class=\"number\">9</span>, childFilePath.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">                    childFilePath = childFilePath.replace(<span class=\"string\">&quot;\\\\&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">                    myClassName.add(childFilePath);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> myClassName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassNameByJar</span><span class=\"params\">(JarFile jarFile ,String packagePath)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; myClassName = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Enumeration&lt;JarEntry&gt; entrys = jarFile.entries();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (entrys.hasMoreElements()) &#123;</span><br><span class=\"line\">                JarEntry jarEntry = entrys.nextElement();</span><br><span class=\"line\">                String entryName = jarEntry.getName();</span><br><span class=\"line\">                <span class=\"comment\">//LOG.info(&quot;entrys jarfile:&quot;+entryName);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entryName.endsWith(<span class=\"string\">&quot;.class&quot;</span>)) &#123;</span><br><span class=\"line\">                    entryName = entryName.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;.&quot;</span>).substring(<span class=\"number\">0</span>, entryName.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">                    myClassName.add(entryName);</span><br><span class=\"line\">                    <span class=\"comment\">//LOG.debug(&quot;Find Class :&quot;+entryName);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">&quot;发生异常:&quot;</span>+e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;发生异常:&quot;</span>+e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myClassName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"展示hexo blog中所有的tags和categories","date":"2021-11-09T17:31:12.000Z","_content":"\n最近写blog感觉有一点好像很不方便：做为一个虚假的强迫症，总是希望自己所有blog的tags和categories更有条理，然而随着blog的越写越多（bushi）,记忆以前写的tag也越来越难，那么有没有一个方法可以帮助我快速回忆起来我以前都写过哪些tag和categories呢？\n\n这就是下个阶段的个人开发任务了：\n\n当前有这么几个思路：\n\n1. 写个python之类的脚本，可以很轻松的parse到所有blog的关键字，但是就是展示问题不太好解决，写到一个文件里又显得有点low\n2. 写个vscode插件，这毕竟是我最常用的文本编辑器了，可以在右边框显示，也可以做输入提醒，唯一的问题就是--看起来似乎有点难\n\n<!--more-->\n\n以下是vscode插件的教程，先记录一下吧！\n\n[vscode开发中文文档](https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/)\n\n[开发官方文档](https://code.visualstudio.com/api)\n\n","source":"_posts/2021-11-09-展示hexo-blog中所有的tags和categories.md","raw":"---\ntitle: 展示hexo blog中所有的tags和categories\ndate: 2021-11-09 17:31:12\ntags:\n- hexo\ncategories:\n- person—devlop\n---\n\n最近写blog感觉有一点好像很不方便：做为一个虚假的强迫症，总是希望自己所有blog的tags和categories更有条理，然而随着blog的越写越多（bushi）,记忆以前写的tag也越来越难，那么有没有一个方法可以帮助我快速回忆起来我以前都写过哪些tag和categories呢？\n\n这就是下个阶段的个人开发任务了：\n\n当前有这么几个思路：\n\n1. 写个python之类的脚本，可以很轻松的parse到所有blog的关键字，但是就是展示问题不太好解决，写到一个文件里又显得有点low\n2. 写个vscode插件，这毕竟是我最常用的文本编辑器了，可以在右边框显示，也可以做输入提醒，唯一的问题就是--看起来似乎有点难\n\n<!--more-->\n\n以下是vscode插件的教程，先记录一下吧！\n\n[vscode开发中文文档](https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/)\n\n[开发官方文档](https://code.visualstudio.com/api)\n\n","slug":"展示hexo-blog中所有的tags和categories","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhmy003m2h5p1l8o7bri","content":"<p>最近写blog感觉有一点好像很不方便：做为一个虚假的强迫症，总是希望自己所有blog的tags和categories更有条理，然而随着blog的越写越多（bushi）,记忆以前写的tag也越来越难，那么有没有一个方法可以帮助我快速回忆起来我以前都写过哪些tag和categories呢？</p>\n<p>这就是下个阶段的个人开发任务了：</p>\n<p>当前有这么几个思路：</p>\n<ol>\n<li>写个python之类的脚本，可以很轻松的parse到所有blog的关键字，但是就是展示问题不太好解决，写到一个文件里又显得有点low</li>\n<li>写个vscode插件，这毕竟是我最常用的文本编辑器了，可以在右边框显示，也可以做输入提醒，唯一的问题就是–看起来似乎有点难</li>\n</ol>\n<a id=\"more\"></a>\n\n<p>以下是vscode插件的教程，先记录一下吧！</p>\n<p><a href=\"https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/\">vscode开发中文文档</a></p>\n<p><a href=\"https://code.visualstudio.com/api\">开发官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>最近写blog感觉有一点好像很不方便：做为一个虚假的强迫症，总是希望自己所有blog的tags和categories更有条理，然而随着blog的越写越多（bushi）,记忆以前写的tag也越来越难，那么有没有一个方法可以帮助我快速回忆起来我以前都写过哪些tag和categories呢？</p>\n<p>这就是下个阶段的个人开发任务了：</p>\n<p>当前有这么几个思路：</p>\n<ol>\n<li>写个python之类的脚本，可以很轻松的parse到所有blog的关键字，但是就是展示问题不太好解决，写到一个文件里又显得有点low</li>\n<li>写个vscode插件，这毕竟是我最常用的文本编辑器了，可以在右边框显示，也可以做输入提醒，唯一的问题就是–看起来似乎有点难</li>\n</ol>","more":"<p>以下是vscode插件的教程，先记录一下吧！</p>\n<p><a href=\"https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/\">vscode开发中文文档</a></p>\n<p><a href=\"https://code.visualstudio.com/api\">开发官方文档</a></p>"},{"title":"MyBatis-Plus 使用tips","date":"2021-11-26T23:51:45.000Z","_content":"\n这两天刷知乎的时候，发现有这么一个问题：“你为什么不用mybtais-plus”，大致进去翻了一下发现自己使用mybatis-plus的姿势还有很多不正确的地方，于是打算再翻一遍mybatis-plus的介绍，想一下有什么东西是可以优化的。\n\n<!--more-->\n\n1. 最明显也是最该优化的地方就是用`LambdaQueryWrapper`来代替`QueryWrapper`\n\n    原先不会的时候，是用的这种写法：\n\n    ```java\n    QueryWrapper<Book> query = new QueryWrapper<>();\n    query.eq(\"id\",123)\n    bookService.select(query)\n    ```\n\n    写的时候就发现了明显的问题：如果有做很多查询的话，就要硬编码很多个数据库的属性放置在service或者map里边，这样显然不安全也不优雅。所以就可以使用`LambdaQueryWrapper`来代替：\n\n    ```java\n    LambdaQueryWrapper<Book> query = new LambdaQueryWrapper<>();\n    query.eq(Book::getId, 123);\n    bookService.selectList(query);\n    ```\n    这样写显然要比用`queryWrapper`来优雅的很多，也安全很多。\n\n2. MBP可以选择排序字段，看文档的话就可以看到：`@OrderBy`注解可以指定sql排序\n\n    \n\n    |属性\t|类型\t|必须指定\t|默认值\t|描述|\n    |--|--|--|--|--|\n    |isDesc|\tboolean|\t否|\t是|\t是否倒序查询|\n    |sort|\tshort|\t否|\tShort.MAX_VALUE|\t数字越小越靠前|\n\n3. 动态表名，大概看了一下，感觉这个功能对于读取纵向分割的表还是很有用的，可以手动指定对应的表名，比如按照时间来做表的划分。看一下gitee里的这个[例子](https://gitee.com/baomidou/mybatis-plus-samples/blob/master/mybatis-plus-sample-dynamic-tablename/src/main/java/com/baomidou/mybatisplus/samples/dytablename/config/MybatisPlusConfig.java)大概就很清楚了\n\n","source":"_posts/2021-11-26-MyBatis-Plus-使用tips.md","raw":"---\ntitle: MyBatis-Plus 使用tips\ndate: 2021-11-26 23:51:45\ntags:\n- MyBatis-Plus\n- Java\ncategories:\n- backend\n---\n\n这两天刷知乎的时候，发现有这么一个问题：“你为什么不用mybtais-plus”，大致进去翻了一下发现自己使用mybatis-plus的姿势还有很多不正确的地方，于是打算再翻一遍mybatis-plus的介绍，想一下有什么东西是可以优化的。\n\n<!--more-->\n\n1. 最明显也是最该优化的地方就是用`LambdaQueryWrapper`来代替`QueryWrapper`\n\n    原先不会的时候，是用的这种写法：\n\n    ```java\n    QueryWrapper<Book> query = new QueryWrapper<>();\n    query.eq(\"id\",123)\n    bookService.select(query)\n    ```\n\n    写的时候就发现了明显的问题：如果有做很多查询的话，就要硬编码很多个数据库的属性放置在service或者map里边，这样显然不安全也不优雅。所以就可以使用`LambdaQueryWrapper`来代替：\n\n    ```java\n    LambdaQueryWrapper<Book> query = new LambdaQueryWrapper<>();\n    query.eq(Book::getId, 123);\n    bookService.selectList(query);\n    ```\n    这样写显然要比用`queryWrapper`来优雅的很多，也安全很多。\n\n2. MBP可以选择排序字段，看文档的话就可以看到：`@OrderBy`注解可以指定sql排序\n\n    \n\n    |属性\t|类型\t|必须指定\t|默认值\t|描述|\n    |--|--|--|--|--|\n    |isDesc|\tboolean|\t否|\t是|\t是否倒序查询|\n    |sort|\tshort|\t否|\tShort.MAX_VALUE|\t数字越小越靠前|\n\n3. 动态表名，大概看了一下，感觉这个功能对于读取纵向分割的表还是很有用的，可以手动指定对应的表名，比如按照时间来做表的划分。看一下gitee里的这个[例子](https://gitee.com/baomidou/mybatis-plus-samples/blob/master/mybatis-plus-sample-dynamic-tablename/src/main/java/com/baomidou/mybatisplus/samples/dytablename/config/MybatisPlusConfig.java)大概就很清楚了\n\n","slug":"MyBatis-Plus-使用tips","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzho3003o2h5p78g12mh8","content":"<p>这两天刷知乎的时候，发现有这么一个问题：“你为什么不用mybtais-plus”，大致进去翻了一下发现自己使用mybatis-plus的姿势还有很多不正确的地方，于是打算再翻一遍mybatis-plus的介绍，想一下有什么东西是可以优化的。</p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p>最明显也是最该优化的地方就是用<code>LambdaQueryWrapper</code>来代替<code>QueryWrapper</code></p>\n<p> 原先不会的时候，是用的这种写法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QueryWrapper&lt;Book&gt; query = <span class=\"keyword\">new</span> QueryWrapper&lt;&gt;();</span><br><span class=\"line\">query.eq(<span class=\"string\">&quot;id&quot;</span>,<span class=\"number\">123</span>)</span><br><span class=\"line\">bookService.select(query)</span><br></pre></td></tr></table></figure>\n<p> 写的时候就发现了明显的问题：如果有做很多查询的话，就要硬编码很多个数据库的属性放置在service或者map里边，这样显然不安全也不优雅。所以就可以使用<code>LambdaQueryWrapper</code>来代替：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LambdaQueryWrapper&lt;Book&gt; query = <span class=\"keyword\">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">query.eq(Book::getId, <span class=\"number\">123</span>);</span><br><span class=\"line\">bookService.selectList(query);</span><br></pre></td></tr></table></figure>\n<p> 这样写显然要比用<code>queryWrapper</code>来优雅的很多，也安全很多。</p>\n</li>\n<li><p>MBP可以选择排序字段，看文档的话就可以看到：<code>@OrderBy</code>注解可以指定sql排序</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>必须指定</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>isDesc</td>\n<td>boolean</td>\n<td>否</td>\n<td>是</td>\n<td>是否倒序查询</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>short</td>\n<td>否</td>\n<td>Short.MAX_VALUE</td>\n<td>数字越小越靠前</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>动态表名，大概看了一下，感觉这个功能对于读取纵向分割的表还是很有用的，可以手动指定对应的表名，比如按照时间来做表的划分。看一下gitee里的这个<a href=\"https://gitee.com/baomidou/mybatis-plus-samples/blob/master/mybatis-plus-sample-dynamic-tablename/src/main/java/com/baomidou/mybatisplus/samples/dytablename/config/MybatisPlusConfig.java\">例子</a>大概就很清楚了</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>这两天刷知乎的时候，发现有这么一个问题：“你为什么不用mybtais-plus”，大致进去翻了一下发现自己使用mybatis-plus的姿势还有很多不正确的地方，于是打算再翻一遍mybatis-plus的介绍，想一下有什么东西是可以优化的。</p>","more":"<ol>\n<li><p>最明显也是最该优化的地方就是用<code>LambdaQueryWrapper</code>来代替<code>QueryWrapper</code></p>\n<p> 原先不会的时候，是用的这种写法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QueryWrapper&lt;Book&gt; query = <span class=\"keyword\">new</span> QueryWrapper&lt;&gt;();</span><br><span class=\"line\">query.eq(<span class=\"string\">&quot;id&quot;</span>,<span class=\"number\">123</span>)</span><br><span class=\"line\">bookService.select(query)</span><br></pre></td></tr></table></figure>\n<p> 写的时候就发现了明显的问题：如果有做很多查询的话，就要硬编码很多个数据库的属性放置在service或者map里边，这样显然不安全也不优雅。所以就可以使用<code>LambdaQueryWrapper</code>来代替：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LambdaQueryWrapper&lt;Book&gt; query = <span class=\"keyword\">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">query.eq(Book::getId, <span class=\"number\">123</span>);</span><br><span class=\"line\">bookService.selectList(query);</span><br></pre></td></tr></table></figure>\n<p> 这样写显然要比用<code>queryWrapper</code>来优雅的很多，也安全很多。</p>\n</li>\n<li><p>MBP可以选择排序字段，看文档的话就可以看到：<code>@OrderBy</code>注解可以指定sql排序</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>必须指定</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>isDesc</td>\n<td>boolean</td>\n<td>否</td>\n<td>是</td>\n<td>是否倒序查询</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>short</td>\n<td>否</td>\n<td>Short.MAX_VALUE</td>\n<td>数字越小越靠前</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>动态表名，大概看了一下，感觉这个功能对于读取纵向分割的表还是很有用的，可以手动指定对应的表名，比如按照时间来做表的划分。看一下gitee里的这个<a href=\"https://gitee.com/baomidou/mybatis-plus-samples/blob/master/mybatis-plus-sample-dynamic-tablename/src/main/java/com/baomidou/mybatisplus/samples/dytablename/config/MybatisPlusConfig.java\">例子</a>大概就很清楚了</p>\n</li>\n</ol>"},{"title":"深圳光明区踩盘参考","date":"2021-12-05T20:42:03.000Z","_content":"\n今天花了大半天的时间看了光明区的几个新盘：\n\n1. 电建洺悦鹏渚\n2. 安联颐景府\n3. 星河天地5期\n4. 中信凯旋君庭\n5. 金茂公园里\n6. 深铁瑞城（没看，了解了一下）\n\n<!--more-->\n这几个盘比较相似的地方在于户型大小差不多都是一致的，当然我主力看的也是70-90平的户型，相对好承受一些。单价也都在5.1左右，上下浮动不是很大。\n\n其中安联、星河天地、金茂三个地方都是挨着的，学区也是共享，周边的医院、学校、公园基本可以认为差不多。中信靠近大学一些，电建距离这三个项目其实也不算太远，距离星河大概2公里的样子。深铁在长圳站，距离以上项目都有一段距离。\n\n接下来都按照最小户型看一下几个盘的优劣\n\n| | 电建 | 安联 | 星河5期 | 中信 | 金茂 | 深铁|\n|--|--|--|--|--|--|--|\n|最小面积|88|89|未知|89|89|95|\n|地铁/距离|待建，100米|1.5公里，楼村站|500米，光明大街|700米，中山大学站|1000米，光明大街|长圳站|\n|户型-优点||三室，窗户较多|/|/|B户型南北通透，三室，利用率较高|/|\n|户型-缺点|次卧旁的阳台较大，要改的话要额外成本| 南北不通透|/|两房两厅，阳台需要自己改|/|/|\n|楼层条件|2梯6户/3梯7户|2梯4户|/|2梯6户|2梯4户/2梯5户|/|\n|朝向|有东南朝向，选择较多|正南|/|东南|正北、正南|/|\n|学区|周围学校还不错|ok|ok|对比最好|ok|ok|\n|商业|一般，依靠其他商业体|星河天地|楼下，星河天地|一般|星河天地||\n|交房时间|2024|2024|/|2023|2023|/|\n|首付|137|/|/|150|141|/|\n\n综合下来优先排除了电建、中信，户型都比较差，后期还需要自己改，星河容积率太高，有7.多。\n\n剩下来对比的就是安联和金茂，后续再考虑一下深铁瑞城\n\n\n","source":"_posts/2021-12-05-深圳光明区踩盘参考.md","raw":"---\ntitle: 深圳光明区踩盘参考\ndate: 2021-12-05 20:42:03\ntags:\n- house\ncategories:\n- life\n---\n\n今天花了大半天的时间看了光明区的几个新盘：\n\n1. 电建洺悦鹏渚\n2. 安联颐景府\n3. 星河天地5期\n4. 中信凯旋君庭\n5. 金茂公园里\n6. 深铁瑞城（没看，了解了一下）\n\n<!--more-->\n这几个盘比较相似的地方在于户型大小差不多都是一致的，当然我主力看的也是70-90平的户型，相对好承受一些。单价也都在5.1左右，上下浮动不是很大。\n\n其中安联、星河天地、金茂三个地方都是挨着的，学区也是共享，周边的医院、学校、公园基本可以认为差不多。中信靠近大学一些，电建距离这三个项目其实也不算太远，距离星河大概2公里的样子。深铁在长圳站，距离以上项目都有一段距离。\n\n接下来都按照最小户型看一下几个盘的优劣\n\n| | 电建 | 安联 | 星河5期 | 中信 | 金茂 | 深铁|\n|--|--|--|--|--|--|--|\n|最小面积|88|89|未知|89|89|95|\n|地铁/距离|待建，100米|1.5公里，楼村站|500米，光明大街|700米，中山大学站|1000米，光明大街|长圳站|\n|户型-优点||三室，窗户较多|/|/|B户型南北通透，三室，利用率较高|/|\n|户型-缺点|次卧旁的阳台较大，要改的话要额外成本| 南北不通透|/|两房两厅，阳台需要自己改|/|/|\n|楼层条件|2梯6户/3梯7户|2梯4户|/|2梯6户|2梯4户/2梯5户|/|\n|朝向|有东南朝向，选择较多|正南|/|东南|正北、正南|/|\n|学区|周围学校还不错|ok|ok|对比最好|ok|ok|\n|商业|一般，依靠其他商业体|星河天地|楼下，星河天地|一般|星河天地||\n|交房时间|2024|2024|/|2023|2023|/|\n|首付|137|/|/|150|141|/|\n\n综合下来优先排除了电建、中信，户型都比较差，后期还需要自己改，星河容积率太高，有7.多。\n\n剩下来对比的就是安联和金茂，后续再考虑一下深铁瑞城\n\n\n","slug":"深圳光明区踩盘参考","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhoq003r2h5p91m5fepb","content":"<p>今天花了大半天的时间看了光明区的几个新盘：</p>\n<ol>\n<li>电建洺悦鹏渚</li>\n<li>安联颐景府</li>\n<li>星河天地5期</li>\n<li>中信凯旋君庭</li>\n<li>金茂公园里</li>\n<li>深铁瑞城（没看，了解了一下）</li>\n</ol>\n<a id=\"more\"></a>\n<p>这几个盘比较相似的地方在于户型大小差不多都是一致的，当然我主力看的也是70-90平的户型，相对好承受一些。单价也都在5.1左右，上下浮动不是很大。</p>\n<p>其中安联、星河天地、金茂三个地方都是挨着的，学区也是共享，周边的医院、学校、公园基本可以认为差不多。中信靠近大学一些，电建距离这三个项目其实也不算太远，距离星河大概2公里的样子。深铁在长圳站，距离以上项目都有一段距离。</p>\n<p>接下来都按照最小户型看一下几个盘的优劣</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>电建</th>\n<th>安联</th>\n<th>星河5期</th>\n<th>中信</th>\n<th>金茂</th>\n<th>深铁</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>最小面积</td>\n<td>88</td>\n<td>89</td>\n<td>未知</td>\n<td>89</td>\n<td>89</td>\n<td>95</td>\n</tr>\n<tr>\n<td>地铁/距离</td>\n<td>待建，100米</td>\n<td>1.5公里，楼村站</td>\n<td>500米，光明大街</td>\n<td>700米，中山大学站</td>\n<td>1000米，光明大街</td>\n<td>长圳站</td>\n</tr>\n<tr>\n<td>户型-优点</td>\n<td></td>\n<td>三室，窗户较多</td>\n<td>/</td>\n<td>/</td>\n<td>B户型南北通透，三室，利用率较高</td>\n<td>/</td>\n</tr>\n<tr>\n<td>户型-缺点</td>\n<td>次卧旁的阳台较大，要改的话要额外成本</td>\n<td>南北不通透</td>\n<td>/</td>\n<td>两房两厅，阳台需要自己改</td>\n<td>/</td>\n<td>/</td>\n</tr>\n<tr>\n<td>楼层条件</td>\n<td>2梯6户/3梯7户</td>\n<td>2梯4户</td>\n<td>/</td>\n<td>2梯6户</td>\n<td>2梯4户/2梯5户</td>\n<td>/</td>\n</tr>\n<tr>\n<td>朝向</td>\n<td>有东南朝向，选择较多</td>\n<td>正南</td>\n<td>/</td>\n<td>东南</td>\n<td>正北、正南</td>\n<td>/</td>\n</tr>\n<tr>\n<td>学区</td>\n<td>周围学校还不错</td>\n<td>ok</td>\n<td>ok</td>\n<td>对比最好</td>\n<td>ok</td>\n<td>ok</td>\n</tr>\n<tr>\n<td>商业</td>\n<td>一般，依靠其他商业体</td>\n<td>星河天地</td>\n<td>楼下，星河天地</td>\n<td>一般</td>\n<td>星河天地</td>\n<td></td>\n</tr>\n<tr>\n<td>交房时间</td>\n<td>2024</td>\n<td>2024</td>\n<td>/</td>\n<td>2023</td>\n<td>2023</td>\n<td>/</td>\n</tr>\n<tr>\n<td>首付</td>\n<td>137</td>\n<td>/</td>\n<td>/</td>\n<td>150</td>\n<td>141</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p>综合下来优先排除了电建、中信，户型都比较差，后期还需要自己改，星河容积率太高，有7.多。</p>\n<p>剩下来对比的就是安联和金茂，后续再考虑一下深铁瑞城</p>\n","site":{"data":{}},"excerpt":"<p>今天花了大半天的时间看了光明区的几个新盘：</p>\n<ol>\n<li>电建洺悦鹏渚</li>\n<li>安联颐景府</li>\n<li>星河天地5期</li>\n<li>中信凯旋君庭</li>\n<li>金茂公园里</li>\n<li>深铁瑞城（没看，了解了一下）</li>\n</ol>","more":"<p>这几个盘比较相似的地方在于户型大小差不多都是一致的，当然我主力看的也是70-90平的户型，相对好承受一些。单价也都在5.1左右，上下浮动不是很大。</p>\n<p>其中安联、星河天地、金茂三个地方都是挨着的，学区也是共享，周边的医院、学校、公园基本可以认为差不多。中信靠近大学一些，电建距离这三个项目其实也不算太远，距离星河大概2公里的样子。深铁在长圳站，距离以上项目都有一段距离。</p>\n<p>接下来都按照最小户型看一下几个盘的优劣</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>电建</th>\n<th>安联</th>\n<th>星河5期</th>\n<th>中信</th>\n<th>金茂</th>\n<th>深铁</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>最小面积</td>\n<td>88</td>\n<td>89</td>\n<td>未知</td>\n<td>89</td>\n<td>89</td>\n<td>95</td>\n</tr>\n<tr>\n<td>地铁/距离</td>\n<td>待建，100米</td>\n<td>1.5公里，楼村站</td>\n<td>500米，光明大街</td>\n<td>700米，中山大学站</td>\n<td>1000米，光明大街</td>\n<td>长圳站</td>\n</tr>\n<tr>\n<td>户型-优点</td>\n<td></td>\n<td>三室，窗户较多</td>\n<td>/</td>\n<td>/</td>\n<td>B户型南北通透，三室，利用率较高</td>\n<td>/</td>\n</tr>\n<tr>\n<td>户型-缺点</td>\n<td>次卧旁的阳台较大，要改的话要额外成本</td>\n<td>南北不通透</td>\n<td>/</td>\n<td>两房两厅，阳台需要自己改</td>\n<td>/</td>\n<td>/</td>\n</tr>\n<tr>\n<td>楼层条件</td>\n<td>2梯6户/3梯7户</td>\n<td>2梯4户</td>\n<td>/</td>\n<td>2梯6户</td>\n<td>2梯4户/2梯5户</td>\n<td>/</td>\n</tr>\n<tr>\n<td>朝向</td>\n<td>有东南朝向，选择较多</td>\n<td>正南</td>\n<td>/</td>\n<td>东南</td>\n<td>正北、正南</td>\n<td>/</td>\n</tr>\n<tr>\n<td>学区</td>\n<td>周围学校还不错</td>\n<td>ok</td>\n<td>ok</td>\n<td>对比最好</td>\n<td>ok</td>\n<td>ok</td>\n</tr>\n<tr>\n<td>商业</td>\n<td>一般，依靠其他商业体</td>\n<td>星河天地</td>\n<td>楼下，星河天地</td>\n<td>一般</td>\n<td>星河天地</td>\n<td></td>\n</tr>\n<tr>\n<td>交房时间</td>\n<td>2024</td>\n<td>2024</td>\n<td>/</td>\n<td>2023</td>\n<td>2023</td>\n<td>/</td>\n</tr>\n<tr>\n<td>首付</td>\n<td>137</td>\n<td>/</td>\n<td>/</td>\n<td>150</td>\n<td>141</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p>综合下来优先排除了电建、中信，户型都比较差，后期还需要自己改，星河容积率太高，有7.多。</p>\n<p>剩下来对比的就是安联和金茂，后续再考虑一下深铁瑞城</p>"},{"title":"mave之为什么找不到我要的依赖","date":"2021-12-07T21:03:06.000Z","_content":"\n今天同事问了我一个问题：为啥找不到项目里边的一个依赖，这个项目我也是刚刚接手，然而我可以正常运行。最开始觉得有点幼稚，依赖都是在远程仓库里边下载下来的，这么可能找不到呢？\n\n于是我也试着分析了一下：\n\n找不到的依赖是一个叫做`telnet-client`的jar包，在[aliyun的仓库](https://developer.aliyun.com/mvn/searchs)搜索了一下，确实没有找到telnet-client这个包。翻了翻程序，程序里边import的是`org.apache.commons.net.examples.telnet.client`，看到这里我就误以为这里的telnet.client就是我要找的包`telnet-client`,于是一顿找，发现怎么都不对劲。\n\n<!--more-->\n\n过了会，同时告诉说，发现删掉`telnet-client`这个依赖，用`commons-net`来替换也可以正常运行，我就去看了一下`commons-net`的代码，发现里边是有这个telnet-client这个类，于是我就误以为maven可以直接引用一个jar包里的一个类。就这么成功的和同事糊弄了过去。\n\n后来怎么想怎么不对劲：一个类哪里来的版本号？这个`telnet-client`必然应该是个jar包嘛。这么看的话，程序里import进来的`telnet.client`确实是`commons-net`的一个类，那为什么会用到这个呢··那就应该是因为`commons-net`是`telnet-client`的依赖··所以被引入了进来。\n\n所以整理一下，程序里边调用的其实是pom里引入jar包的所依赖的jar包··\n\n其实归根结底，还是对maven不太熟悉，那就趁着这个机会，学习一下maven、版本管理相关的知识？\n\n## maven的生命周期：\n\n![](/images/2021-12-7/mvn_life.png)\n\n不过maven实际上并不是只有这几个生命周期，实际上还有很多很多···\n\n## maven的仓库\n\nmaven会默认在用户目录下创建一个`.m2/repository`的仓库目录。运行maven的时候，所有的依赖都要在本地仓库获取，本地没有的就从远程仓库拉取\n\nmaven的搜索顺序是： 本地仓库 -> 中央仓库  -> 远程仓库（如果有设置）->  结束或者抛出未找到的错误\n\n中央仓库是在settings.xml中设置的，可以设置aliyun的镜像节点， 如果想要添加远程仓库的话，则在项目的pom文件里添加repositories-repositories节点\n\n## maven的依赖传递\n\n这个感觉是比较核心的内容：我们写的小项目都动辄十几个依赖，每个依赖又都有自己的依赖··要是人手工管理岂不是给干晕过去了··\n\n1. 子模块可以通过继承获得父模块中声明的全部依赖\n2. exclusion可以用来排除不需要传递的依赖\n3. 两条依赖路径上存在不同版本的话，先选择路径短的，再选择先声明的版本。\n----\n今天上班看了一下，发现昨天的猜测确实没错。\n\npom里引入了一个远程仓库：`https://clojars.org/repo/`, 然后在这个远程仓库里边下载的`telnet-client`，翻一下`telnet-client`的pom依赖，里边确实有`commons-net`这个依赖。\n\n","source":"_posts/2021-12-07-mave之为什么找不到我要的依赖.md","raw":"---\ntitle: mave之为什么找不到我要的依赖\ndate: 2021-12-07 21:03:06\ntags:\n- maven\ncategories:\n- develop\n---\n\n今天同事问了我一个问题：为啥找不到项目里边的一个依赖，这个项目我也是刚刚接手，然而我可以正常运行。最开始觉得有点幼稚，依赖都是在远程仓库里边下载下来的，这么可能找不到呢？\n\n于是我也试着分析了一下：\n\n找不到的依赖是一个叫做`telnet-client`的jar包，在[aliyun的仓库](https://developer.aliyun.com/mvn/searchs)搜索了一下，确实没有找到telnet-client这个包。翻了翻程序，程序里边import的是`org.apache.commons.net.examples.telnet.client`，看到这里我就误以为这里的telnet.client就是我要找的包`telnet-client`,于是一顿找，发现怎么都不对劲。\n\n<!--more-->\n\n过了会，同时告诉说，发现删掉`telnet-client`这个依赖，用`commons-net`来替换也可以正常运行，我就去看了一下`commons-net`的代码，发现里边是有这个telnet-client这个类，于是我就误以为maven可以直接引用一个jar包里的一个类。就这么成功的和同事糊弄了过去。\n\n后来怎么想怎么不对劲：一个类哪里来的版本号？这个`telnet-client`必然应该是个jar包嘛。这么看的话，程序里import进来的`telnet.client`确实是`commons-net`的一个类，那为什么会用到这个呢··那就应该是因为`commons-net`是`telnet-client`的依赖··所以被引入了进来。\n\n所以整理一下，程序里边调用的其实是pom里引入jar包的所依赖的jar包··\n\n其实归根结底，还是对maven不太熟悉，那就趁着这个机会，学习一下maven、版本管理相关的知识？\n\n## maven的生命周期：\n\n![](/images/2021-12-7/mvn_life.png)\n\n不过maven实际上并不是只有这几个生命周期，实际上还有很多很多···\n\n## maven的仓库\n\nmaven会默认在用户目录下创建一个`.m2/repository`的仓库目录。运行maven的时候，所有的依赖都要在本地仓库获取，本地没有的就从远程仓库拉取\n\nmaven的搜索顺序是： 本地仓库 -> 中央仓库  -> 远程仓库（如果有设置）->  结束或者抛出未找到的错误\n\n中央仓库是在settings.xml中设置的，可以设置aliyun的镜像节点， 如果想要添加远程仓库的话，则在项目的pom文件里添加repositories-repositories节点\n\n## maven的依赖传递\n\n这个感觉是比较核心的内容：我们写的小项目都动辄十几个依赖，每个依赖又都有自己的依赖··要是人手工管理岂不是给干晕过去了··\n\n1. 子模块可以通过继承获得父模块中声明的全部依赖\n2. exclusion可以用来排除不需要传递的依赖\n3. 两条依赖路径上存在不同版本的话，先选择路径短的，再选择先声明的版本。\n----\n今天上班看了一下，发现昨天的猜测确实没错。\n\npom里引入了一个远程仓库：`https://clojars.org/repo/`, 然后在这个远程仓库里边下载的`telnet-client`，翻一下`telnet-client`的pom依赖，里边确实有`commons-net`这个依赖。\n\n","slug":"mave之为什么找不到我要的依赖","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhp9003u2h5pgc7r5psn","content":"<p>今天同事问了我一个问题：为啥找不到项目里边的一个依赖，这个项目我也是刚刚接手，然而我可以正常运行。最开始觉得有点幼稚，依赖都是在远程仓库里边下载下来的，这么可能找不到呢？</p>\n<p>于是我也试着分析了一下：</p>\n<p>找不到的依赖是一个叫做<code>telnet-client</code>的jar包，在<a href=\"https://developer.aliyun.com/mvn/searchs\">aliyun的仓库</a>搜索了一下，确实没有找到telnet-client这个包。翻了翻程序，程序里边import的是<code>org.apache.commons.net.examples.telnet.client</code>，看到这里我就误以为这里的telnet.client就是我要找的包<code>telnet-client</code>,于是一顿找，发现怎么都不对劲。</p>\n<a id=\"more\"></a>\n\n<p>过了会，同时告诉说，发现删掉<code>telnet-client</code>这个依赖，用<code>commons-net</code>来替换也可以正常运行，我就去看了一下<code>commons-net</code>的代码，发现里边是有这个telnet-client这个类，于是我就误以为maven可以直接引用一个jar包里的一个类。就这么成功的和同事糊弄了过去。</p>\n<p>后来怎么想怎么不对劲：一个类哪里来的版本号？这个<code>telnet-client</code>必然应该是个jar包嘛。这么看的话，程序里import进来的<code>telnet.client</code>确实是<code>commons-net</code>的一个类，那为什么会用到这个呢··那就应该是因为<code>commons-net</code>是<code>telnet-client</code>的依赖··所以被引入了进来。</p>\n<p>所以整理一下，程序里边调用的其实是pom里引入jar包的所依赖的jar包··</p>\n<p>其实归根结底，还是对maven不太熟悉，那就趁着这个机会，学习一下maven、版本管理相关的知识？</p>\n<h2 id=\"maven的生命周期：\"><a href=\"#maven的生命周期：\" class=\"headerlink\" title=\"maven的生命周期：\"></a>maven的生命周期：</h2><p><img src=\"/images/2021-12-7/mvn_life.png\"></p>\n<p>不过maven实际上并不是只有这几个生命周期，实际上还有很多很多···</p>\n<h2 id=\"maven的仓库\"><a href=\"#maven的仓库\" class=\"headerlink\" title=\"maven的仓库\"></a>maven的仓库</h2><p>maven会默认在用户目录下创建一个<code>.m2/repository</code>的仓库目录。运行maven的时候，所有的依赖都要在本地仓库获取，本地没有的就从远程仓库拉取</p>\n<p>maven的搜索顺序是： 本地仓库 -&gt; 中央仓库  -&gt; 远程仓库（如果有设置）-&gt;  结束或者抛出未找到的错误</p>\n<p>中央仓库是在settings.xml中设置的，可以设置aliyun的镜像节点， 如果想要添加远程仓库的话，则在项目的pom文件里添加repositories-repositories节点</p>\n<h2 id=\"maven的依赖传递\"><a href=\"#maven的依赖传递\" class=\"headerlink\" title=\"maven的依赖传递\"></a>maven的依赖传递</h2><p>这个感觉是比较核心的内容：我们写的小项目都动辄十几个依赖，每个依赖又都有自己的依赖··要是人手工管理岂不是给干晕过去了··</p>\n<ol>\n<li>子模块可以通过继承获得父模块中声明的全部依赖</li>\n<li>exclusion可以用来排除不需要传递的依赖</li>\n<li>两条依赖路径上存在不同版本的话，先选择路径短的，再选择先声明的版本。</li>\n</ol>\n<hr>\n<p>今天上班看了一下，发现昨天的猜测确实没错。</p>\n<p>pom里引入了一个远程仓库：<code>https://clojars.org/repo/</code>, 然后在这个远程仓库里边下载的<code>telnet-client</code>，翻一下<code>telnet-client</code>的pom依赖，里边确实有<code>commons-net</code>这个依赖。</p>\n","site":{"data":{}},"excerpt":"<p>今天同事问了我一个问题：为啥找不到项目里边的一个依赖，这个项目我也是刚刚接手，然而我可以正常运行。最开始觉得有点幼稚，依赖都是在远程仓库里边下载下来的，这么可能找不到呢？</p>\n<p>于是我也试着分析了一下：</p>\n<p>找不到的依赖是一个叫做<code>telnet-client</code>的jar包，在<a href=\"https://developer.aliyun.com/mvn/searchs\">aliyun的仓库</a>搜索了一下，确实没有找到telnet-client这个包。翻了翻程序，程序里边import的是<code>org.apache.commons.net.examples.telnet.client</code>，看到这里我就误以为这里的telnet.client就是我要找的包<code>telnet-client</code>,于是一顿找，发现怎么都不对劲。</p>","more":"<p>过了会，同时告诉说，发现删掉<code>telnet-client</code>这个依赖，用<code>commons-net</code>来替换也可以正常运行，我就去看了一下<code>commons-net</code>的代码，发现里边是有这个telnet-client这个类，于是我就误以为maven可以直接引用一个jar包里的一个类。就这么成功的和同事糊弄了过去。</p>\n<p>后来怎么想怎么不对劲：一个类哪里来的版本号？这个<code>telnet-client</code>必然应该是个jar包嘛。这么看的话，程序里import进来的<code>telnet.client</code>确实是<code>commons-net</code>的一个类，那为什么会用到这个呢··那就应该是因为<code>commons-net</code>是<code>telnet-client</code>的依赖··所以被引入了进来。</p>\n<p>所以整理一下，程序里边调用的其实是pom里引入jar包的所依赖的jar包··</p>\n<p>其实归根结底，还是对maven不太熟悉，那就趁着这个机会，学习一下maven、版本管理相关的知识？</p>\n<h2 id=\"maven的生命周期：\"><a href=\"#maven的生命周期：\" class=\"headerlink\" title=\"maven的生命周期：\"></a>maven的生命周期：</h2><p><img src=\"/images/2021-12-7/mvn_life.png\"></p>\n<p>不过maven实际上并不是只有这几个生命周期，实际上还有很多很多···</p>\n<h2 id=\"maven的仓库\"><a href=\"#maven的仓库\" class=\"headerlink\" title=\"maven的仓库\"></a>maven的仓库</h2><p>maven会默认在用户目录下创建一个<code>.m2/repository</code>的仓库目录。运行maven的时候，所有的依赖都要在本地仓库获取，本地没有的就从远程仓库拉取</p>\n<p>maven的搜索顺序是： 本地仓库 -&gt; 中央仓库  -&gt; 远程仓库（如果有设置）-&gt;  结束或者抛出未找到的错误</p>\n<p>中央仓库是在settings.xml中设置的，可以设置aliyun的镜像节点， 如果想要添加远程仓库的话，则在项目的pom文件里添加repositories-repositories节点</p>\n<h2 id=\"maven的依赖传递\"><a href=\"#maven的依赖传递\" class=\"headerlink\" title=\"maven的依赖传递\"></a>maven的依赖传递</h2><p>这个感觉是比较核心的内容：我们写的小项目都动辄十几个依赖，每个依赖又都有自己的依赖··要是人手工管理岂不是给干晕过去了··</p>\n<ol>\n<li>子模块可以通过继承获得父模块中声明的全部依赖</li>\n<li>exclusion可以用来排除不需要传递的依赖</li>\n<li>两条依赖路径上存在不同版本的话，先选择路径短的，再选择先声明的版本。</li>\n</ol>\n<hr>\n<p>今天上班看了一下，发现昨天的猜测确实没错。</p>\n<p>pom里引入了一个远程仓库：<code>https://clojars.org/repo/</code>, 然后在这个远程仓库里边下载的<code>telnet-client</code>，翻一下<code>telnet-client</code>的pom依赖，里边确实有<code>commons-net</code>这个依赖。</p>"},{"title":"mysql和redis中的数据一致性问题","date":"2021-12-08T10:12:48.000Z","_content":"\n今天早上在地铁上翻腾讯技术工程的微信公众号，发现了一篇文章，发现讲的真不错，就想围绕这一篇文章写点东西。\n\n这篇文章的地址是[认识 MySQL 和 Redis 的数据一致性问题](https://mp.weixin.qq.com/s/GU3cbUkI84IMwttDz16P3w)\n\n主要讲的就是在有无并发的两种情况下，如何保证redis和mysql中的数据一致。围绕这个问题讲的是相当详细。因为我当前在做的模块也涉及到了redis和mysql的数据同步，看完之后感觉还是受益匪浅呀。这种偏向工程实践的文章可以再多来点！\n\n<!--more-->\n\n具体的当然还是看文章更好，我主要浓缩一下就好了：\n\nmysql和redis保证数据一致性的最佳实践应该这么作：\n\n* 只读缓存：\n    * 无并发场景：\n    * 高并发场景：\n\n        先更新数据库再删除缓存，在 “更新数据库 + 删除缓存” 的方案中，推荐使用推荐用 “先更新数据库，再删除缓存” 策略，因为先删除缓存可能会导致大量请求落到数据库，而且延迟双删的时间很难评估。在 “先更新数据库，再删除缓存” 策略中，可以使用“消息队列+重试机制” 的方案保证缓存的删除。并通过 “订阅 binlog” 进行缓存比对，加上一层保障。\n\n\n\n* 读写缓存：\n    * 无并发场景\n    * 高并发场景：\n        更新数据库再更新缓存，可以保证缓存中一直有数据\n\n\n保证缓存和数据库一致的主要策略还是通过消息队列+重试机制来保证。也就是将要删除的消息push到消息队列里边，如果删除、更新成功的话，就消费掉这一条消息，否则就不断重试。固定次数之后向客户端报错。\n\n此外还需要注意数据读写的顺序，也就是通过加锁来保证\n\n此外还可以通过binlog+canal来做数据一致性对比。\n\n文章里关于缓存穿透、缓存击穿、缓存雪崩的描述和解决方案也非常有用，总之赞赞赞\n\n---\n## 附录：\n\n### binlog\nbinlog是Mysql sever层维护的一种二进制日志，其主要是用来记录对mysql数据更新或潜在发生更新的SQL语句，并以\"事务\"的形式保存在磁盘中；\n\n作用主要有：\n\n* 复制：MySQL Replication在Master端开启binlog，Master把它的二进制日志传递给slaves并回放来达到master-slave数据一致的目的\n\n* 数据恢复：通过mysqlbinlog工具恢复数据\n\n* 增量备份\n\n\n### canal\n\ncanal，是阿里开源的组件，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费\n\n工作原理：\n\n* canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议\n* MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )\n* canal 解析 binary log 对象(原始为 byte 流)\n\n通过开启了binlog的mysql + canal，就可以订阅mysql的数据变化，和我们要做的数据变化做对比，确保数据有更新，同时也可以对canal的消息进行消费，比如用来同步缓存、其它数据库的数据","source":"_posts/2021-12-08-mysql和redis中的数据一致性问题.md","raw":"---\ntitle: mysql和redis中的数据一致性问题\ndate: 2021-12-08 10:12:48\ntags:\n- mysql\n- redis\ncategories:\n- develop\n---\n\n今天早上在地铁上翻腾讯技术工程的微信公众号，发现了一篇文章，发现讲的真不错，就想围绕这一篇文章写点东西。\n\n这篇文章的地址是[认识 MySQL 和 Redis 的数据一致性问题](https://mp.weixin.qq.com/s/GU3cbUkI84IMwttDz16P3w)\n\n主要讲的就是在有无并发的两种情况下，如何保证redis和mysql中的数据一致。围绕这个问题讲的是相当详细。因为我当前在做的模块也涉及到了redis和mysql的数据同步，看完之后感觉还是受益匪浅呀。这种偏向工程实践的文章可以再多来点！\n\n<!--more-->\n\n具体的当然还是看文章更好，我主要浓缩一下就好了：\n\nmysql和redis保证数据一致性的最佳实践应该这么作：\n\n* 只读缓存：\n    * 无并发场景：\n    * 高并发场景：\n\n        先更新数据库再删除缓存，在 “更新数据库 + 删除缓存” 的方案中，推荐使用推荐用 “先更新数据库，再删除缓存” 策略，因为先删除缓存可能会导致大量请求落到数据库，而且延迟双删的时间很难评估。在 “先更新数据库，再删除缓存” 策略中，可以使用“消息队列+重试机制” 的方案保证缓存的删除。并通过 “订阅 binlog” 进行缓存比对，加上一层保障。\n\n\n\n* 读写缓存：\n    * 无并发场景\n    * 高并发场景：\n        更新数据库再更新缓存，可以保证缓存中一直有数据\n\n\n保证缓存和数据库一致的主要策略还是通过消息队列+重试机制来保证。也就是将要删除的消息push到消息队列里边，如果删除、更新成功的话，就消费掉这一条消息，否则就不断重试。固定次数之后向客户端报错。\n\n此外还需要注意数据读写的顺序，也就是通过加锁来保证\n\n此外还可以通过binlog+canal来做数据一致性对比。\n\n文章里关于缓存穿透、缓存击穿、缓存雪崩的描述和解决方案也非常有用，总之赞赞赞\n\n---\n## 附录：\n\n### binlog\nbinlog是Mysql sever层维护的一种二进制日志，其主要是用来记录对mysql数据更新或潜在发生更新的SQL语句，并以\"事务\"的形式保存在磁盘中；\n\n作用主要有：\n\n* 复制：MySQL Replication在Master端开启binlog，Master把它的二进制日志传递给slaves并回放来达到master-slave数据一致的目的\n\n* 数据恢复：通过mysqlbinlog工具恢复数据\n\n* 增量备份\n\n\n### canal\n\ncanal，是阿里开源的组件，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费\n\n工作原理：\n\n* canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议\n* MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )\n* canal 解析 binary log 对象(原始为 byte 流)\n\n通过开启了binlog的mysql + canal，就可以订阅mysql的数据变化，和我们要做的数据变化做对比，确保数据有更新，同时也可以对canal的消息进行消费，比如用来同步缓存、其它数据库的数据","slug":"mysql和redis中的数据一致性问题","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhqy003x2h5pcbqua47g","content":"<p>今天早上在地铁上翻腾讯技术工程的微信公众号，发现了一篇文章，发现讲的真不错，就想围绕这一篇文章写点东西。</p>\n<p>这篇文章的地址是<a href=\"https://mp.weixin.qq.com/s/GU3cbUkI84IMwttDz16P3w\">认识 MySQL 和 Redis 的数据一致性问题</a></p>\n<p>主要讲的就是在有无并发的两种情况下，如何保证redis和mysql中的数据一致。围绕这个问题讲的是相当详细。因为我当前在做的模块也涉及到了redis和mysql的数据同步，看完之后感觉还是受益匪浅呀。这种偏向工程实践的文章可以再多来点！</p>\n<a id=\"more\"></a>\n\n<p>具体的当然还是看文章更好，我主要浓缩一下就好了：</p>\n<p>mysql和redis保证数据一致性的最佳实践应该这么作：</p>\n<ul>\n<li><p>只读缓存：</p>\n<ul>\n<li><p>无并发场景：</p>\n</li>\n<li><p>高并发场景：</p>\n<p>  先更新数据库再删除缓存，在 “更新数据库 + 删除缓存” 的方案中，推荐使用推荐用 “先更新数据库，再删除缓存” 策略，因为先删除缓存可能会导致大量请求落到数据库，而且延迟双删的时间很难评估。在 “先更新数据库，再删除缓存” 策略中，可以使用“消息队列+重试机制” 的方案保证缓存的删除。并通过 “订阅 binlog” 进行缓存比对，加上一层保障。</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>读写缓存：<ul>\n<li>无并发场景</li>\n<li>高并发场景：<br>  更新数据库再更新缓存，可以保证缓存中一直有数据</li>\n</ul>\n</li>\n</ul>\n<p>保证缓存和数据库一致的主要策略还是通过消息队列+重试机制来保证。也就是将要删除的消息push到消息队列里边，如果删除、更新成功的话，就消费掉这一条消息，否则就不断重试。固定次数之后向客户端报错。</p>\n<p>此外还需要注意数据读写的顺序，也就是通过加锁来保证</p>\n<p>此外还可以通过binlog+canal来做数据一致性对比。</p>\n<p>文章里关于缓存穿透、缓存击穿、缓存雪崩的描述和解决方案也非常有用，总之赞赞赞</p>\n<hr>\n<h2 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a>附录：</h2><h3 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h3><p>binlog是Mysql sever层维护的一种二进制日志，其主要是用来记录对mysql数据更新或潜在发生更新的SQL语句，并以”事务”的形式保存在磁盘中；</p>\n<p>作用主要有：</p>\n<ul>\n<li><p>复制：MySQL Replication在Master端开启binlog，Master把它的二进制日志传递给slaves并回放来达到master-slave数据一致的目的</p>\n</li>\n<li><p>数据恢复：通过mysqlbinlog工具恢复数据</p>\n</li>\n<li><p>增量备份</p>\n</li>\n</ul>\n<h3 id=\"canal\"><a href=\"#canal\" class=\"headerlink\" title=\"canal\"></a>canal</h3><p>canal，是阿里开源的组件，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费</p>\n<p>工作原理：</p>\n<ul>\n<li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</li>\n<li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li>\n<li>canal 解析 binary log 对象(原始为 byte 流)</li>\n</ul>\n<p>通过开启了binlog的mysql + canal，就可以订阅mysql的数据变化，和我们要做的数据变化做对比，确保数据有更新，同时也可以对canal的消息进行消费，比如用来同步缓存、其它数据库的数据</p>\n","site":{"data":{}},"excerpt":"<p>今天早上在地铁上翻腾讯技术工程的微信公众号，发现了一篇文章，发现讲的真不错，就想围绕这一篇文章写点东西。</p>\n<p>这篇文章的地址是<a href=\"https://mp.weixin.qq.com/s/GU3cbUkI84IMwttDz16P3w\">认识 MySQL 和 Redis 的数据一致性问题</a></p>\n<p>主要讲的就是在有无并发的两种情况下，如何保证redis和mysql中的数据一致。围绕这个问题讲的是相当详细。因为我当前在做的模块也涉及到了redis和mysql的数据同步，看完之后感觉还是受益匪浅呀。这种偏向工程实践的文章可以再多来点！</p>","more":"<p>具体的当然还是看文章更好，我主要浓缩一下就好了：</p>\n<p>mysql和redis保证数据一致性的最佳实践应该这么作：</p>\n<ul>\n<li><p>只读缓存：</p>\n<ul>\n<li><p>无并发场景：</p>\n</li>\n<li><p>高并发场景：</p>\n<p>  先更新数据库再删除缓存，在 “更新数据库 + 删除缓存” 的方案中，推荐使用推荐用 “先更新数据库，再删除缓存” 策略，因为先删除缓存可能会导致大量请求落到数据库，而且延迟双删的时间很难评估。在 “先更新数据库，再删除缓存” 策略中，可以使用“消息队列+重试机制” 的方案保证缓存的删除。并通过 “订阅 binlog” 进行缓存比对，加上一层保障。</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>读写缓存：<ul>\n<li>无并发场景</li>\n<li>高并发场景：<br>  更新数据库再更新缓存，可以保证缓存中一直有数据</li>\n</ul>\n</li>\n</ul>\n<p>保证缓存和数据库一致的主要策略还是通过消息队列+重试机制来保证。也就是将要删除的消息push到消息队列里边，如果删除、更新成功的话，就消费掉这一条消息，否则就不断重试。固定次数之后向客户端报错。</p>\n<p>此外还需要注意数据读写的顺序，也就是通过加锁来保证</p>\n<p>此外还可以通过binlog+canal来做数据一致性对比。</p>\n<p>文章里关于缓存穿透、缓存击穿、缓存雪崩的描述和解决方案也非常有用，总之赞赞赞</p>\n<hr>\n<h2 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a>附录：</h2><h3 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h3><p>binlog是Mysql sever层维护的一种二进制日志，其主要是用来记录对mysql数据更新或潜在发生更新的SQL语句，并以”事务”的形式保存在磁盘中；</p>\n<p>作用主要有：</p>\n<ul>\n<li><p>复制：MySQL Replication在Master端开启binlog，Master把它的二进制日志传递给slaves并回放来达到master-slave数据一致的目的</p>\n</li>\n<li><p>数据恢复：通过mysqlbinlog工具恢复数据</p>\n</li>\n<li><p>增量备份</p>\n</li>\n</ul>\n<h3 id=\"canal\"><a href=\"#canal\" class=\"headerlink\" title=\"canal\"></a>canal</h3><p>canal，是阿里开源的组件，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费</p>\n<p>工作原理：</p>\n<ul>\n<li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</li>\n<li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li>\n<li>canal 解析 binary log 对象(原始为 byte 流)</li>\n</ul>\n<p>通过开启了binlog的mysql + canal，就可以订阅mysql的数据变化，和我们要做的数据变化做对比，确保数据有更新，同时也可以对canal的消息进行消费，比如用来同步缓存、其它数据库的数据</p>"},{"title":"个人邮箱管理计划","date":"2021-12-28T16:53:34.000Z","_content":"\n随着年纪增大，注册的账号也越来越多，就感觉登录越来越是个麻烦的事情，虽然依赖edge的密码记忆功能免去了很多麻烦，但是总感觉缺少一个能自己掌握所有账号密码、自己邮箱里的汇总信息的地方。\n\n于是就计划把自己所有的邮箱都管起来，不要整天搞来搞去了。\n<!--more-->\n现在我自己常用的邮箱有这么几个：\n\n1. @outlook.com 1个outlook邮箱，开通了office365，应该是功能最强大的一个邮箱了\n2. @163.com 最开始注册的163账号，这个估计也是我绑定账号、密码最多的邮箱，使用最频繁的邮箱\n3. @126.com 和163一起注册的邮箱，这个使用的频率稍微低一点，绑定了一些敏感网站的账号\n4. @gmail.com 这个主要绑定的也就是境外网站用的，使用频率很低\n5. @outlook.com 又是一个outlook邮箱，这个就只绑定了gitlab，这个影响不大\n6. 还有一个工作用的邮箱，这个也是日常要看的\n\n邮箱管理软件的话手机端用的是网易邮箱，把outlook都绑了进去。\n\n现在感觉还是分散嘛，计划把我的邮箱都集中起来进行管理，现在计划如下：\n\n邮箱管理软件用outlook\n\n核心邮箱是outlook邮箱\n\n注册国内账号的统一使用126邮箱，注册完成好之后将注册邮件用 【账号】address 的邮件格式转发给outlook邮箱，outlook里边编写规则放入固定的文件夹里边方便查询\n\n国外的统一使用gmail或者另外一个outlook邮箱\n\n工作邮箱统一转发给outlook方便查看\n\n-----\n\n经过一天的使用，发现安卓端的outlook不太好用呀··收信息很慢，发信息也很慢··我猜也许是网络的问题？不管了，先用一段时间，不行再用网易邮箱大师得了。\n\n----\n\n安卓端的outlook到底是个什么玩意？也太难用了吧···","source":"_posts/2021-12-28-个人邮箱管理计划.md","raw":"---\ntitle: 个人邮箱管理计划\ndate: 2021-12-28 16:53:34\ntags:\n- email\ncategories:\n- life\n---\n\n随着年纪增大，注册的账号也越来越多，就感觉登录越来越是个麻烦的事情，虽然依赖edge的密码记忆功能免去了很多麻烦，但是总感觉缺少一个能自己掌握所有账号密码、自己邮箱里的汇总信息的地方。\n\n于是就计划把自己所有的邮箱都管起来，不要整天搞来搞去了。\n<!--more-->\n现在我自己常用的邮箱有这么几个：\n\n1. @outlook.com 1个outlook邮箱，开通了office365，应该是功能最强大的一个邮箱了\n2. @163.com 最开始注册的163账号，这个估计也是我绑定账号、密码最多的邮箱，使用最频繁的邮箱\n3. @126.com 和163一起注册的邮箱，这个使用的频率稍微低一点，绑定了一些敏感网站的账号\n4. @gmail.com 这个主要绑定的也就是境外网站用的，使用频率很低\n5. @outlook.com 又是一个outlook邮箱，这个就只绑定了gitlab，这个影响不大\n6. 还有一个工作用的邮箱，这个也是日常要看的\n\n邮箱管理软件的话手机端用的是网易邮箱，把outlook都绑了进去。\n\n现在感觉还是分散嘛，计划把我的邮箱都集中起来进行管理，现在计划如下：\n\n邮箱管理软件用outlook\n\n核心邮箱是outlook邮箱\n\n注册国内账号的统一使用126邮箱，注册完成好之后将注册邮件用 【账号】address 的邮件格式转发给outlook邮箱，outlook里边编写规则放入固定的文件夹里边方便查询\n\n国外的统一使用gmail或者另外一个outlook邮箱\n\n工作邮箱统一转发给outlook方便查看\n\n-----\n\n经过一天的使用，发现安卓端的outlook不太好用呀··收信息很慢，发信息也很慢··我猜也许是网络的问题？不管了，先用一段时间，不行再用网易邮箱大师得了。\n\n----\n\n安卓端的outlook到底是个什么玩意？也太难用了吧···","slug":"个人邮箱管理计划","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhra00412h5p9e9r6cae","content":"<p>随着年纪增大，注册的账号也越来越多，就感觉登录越来越是个麻烦的事情，虽然依赖edge的密码记忆功能免去了很多麻烦，但是总感觉缺少一个能自己掌握所有账号密码、自己邮箱里的汇总信息的地方。</p>\n<p>于是就计划把自己所有的邮箱都管起来，不要整天搞来搞去了。</p>\n<a id=\"more\"></a>\n<p>现在我自己常用的邮箱有这么几个：</p>\n<ol>\n<li>@outlook.com 1个outlook邮箱，开通了office365，应该是功能最强大的一个邮箱了</li>\n<li>@163.com 最开始注册的163账号，这个估计也是我绑定账号、密码最多的邮箱，使用最频繁的邮箱</li>\n<li>@126.com 和163一起注册的邮箱，这个使用的频率稍微低一点，绑定了一些敏感网站的账号</li>\n<li>@gmail.com 这个主要绑定的也就是境外网站用的，使用频率很低</li>\n<li>@outlook.com 又是一个outlook邮箱，这个就只绑定了gitlab，这个影响不大</li>\n<li>还有一个工作用的邮箱，这个也是日常要看的</li>\n</ol>\n<p>邮箱管理软件的话手机端用的是网易邮箱，把outlook都绑了进去。</p>\n<p>现在感觉还是分散嘛，计划把我的邮箱都集中起来进行管理，现在计划如下：</p>\n<p>邮箱管理软件用outlook</p>\n<p>核心邮箱是outlook邮箱</p>\n<p>注册国内账号的统一使用126邮箱，注册完成好之后将注册邮件用 【账号】address 的邮件格式转发给outlook邮箱，outlook里边编写规则放入固定的文件夹里边方便查询</p>\n<p>国外的统一使用gmail或者另外一个outlook邮箱</p>\n<p>工作邮箱统一转发给outlook方便查看</p>\n<hr>\n<p>经过一天的使用，发现安卓端的outlook不太好用呀··收信息很慢，发信息也很慢··我猜也许是网络的问题？不管了，先用一段时间，不行再用网易邮箱大师得了。</p>\n<hr>\n<p>安卓端的outlook到底是个什么玩意？也太难用了吧···</p>\n","site":{"data":{}},"excerpt":"<p>随着年纪增大，注册的账号也越来越多，就感觉登录越来越是个麻烦的事情，虽然依赖edge的密码记忆功能免去了很多麻烦，但是总感觉缺少一个能自己掌握所有账号密码、自己邮箱里的汇总信息的地方。</p>\n<p>于是就计划把自己所有的邮箱都管起来，不要整天搞来搞去了。</p>","more":"<p>现在我自己常用的邮箱有这么几个：</p>\n<ol>\n<li>@outlook.com 1个outlook邮箱，开通了office365，应该是功能最强大的一个邮箱了</li>\n<li>@163.com 最开始注册的163账号，这个估计也是我绑定账号、密码最多的邮箱，使用最频繁的邮箱</li>\n<li>@126.com 和163一起注册的邮箱，这个使用的频率稍微低一点，绑定了一些敏感网站的账号</li>\n<li>@gmail.com 这个主要绑定的也就是境外网站用的，使用频率很低</li>\n<li>@outlook.com 又是一个outlook邮箱，这个就只绑定了gitlab，这个影响不大</li>\n<li>还有一个工作用的邮箱，这个也是日常要看的</li>\n</ol>\n<p>邮箱管理软件的话手机端用的是网易邮箱，把outlook都绑了进去。</p>\n<p>现在感觉还是分散嘛，计划把我的邮箱都集中起来进行管理，现在计划如下：</p>\n<p>邮箱管理软件用outlook</p>\n<p>核心邮箱是outlook邮箱</p>\n<p>注册国内账号的统一使用126邮箱，注册完成好之后将注册邮件用 【账号】address 的邮件格式转发给outlook邮箱，outlook里边编写规则放入固定的文件夹里边方便查询</p>\n<p>国外的统一使用gmail或者另外一个outlook邮箱</p>\n<p>工作邮箱统一转发给outlook方便查看</p>\n<hr>\n<p>经过一天的使用，发现安卓端的outlook不太好用呀··收信息很慢，发信息也很慢··我猜也许是网络的问题？不管了，先用一段时间，不行再用网易邮箱大师得了。</p>\n<hr>\n<p>安卓端的outlook到底是个什么玩意？也太难用了吧···</p>"},{"title":"NetconfBaseService 到设备的调用链","date":"2021-12-29T11:22:44.000Z","_content":"\n今天起了兴趣想要看一下lightly包中的NetconfBaseService是如何调用到设备上的，其实之前同事和我讲过这个问题，不过当时没搞太明白。正好今天有空，就大概学习一下lightly是怎么做的：\n\n---\n\n最开始是先在最外层创建一个NetconfBaseService对象，要传的参数也很简单了,只要传入挂载设备的id就可以了\n\n<!--more-->\n\n```java\nNetconfBaseService netconfBaseService = netconfSBPlugin.getNetconfBaseService(NodeId.getDefaultInstance(\"1\")).orElseThrow(()->new NullPointerException(\"no such device in device tree!\"));\nDOMRpcResult domRpcResult= netconfBaseService.editConfig(NetconfMessageTransformUtil.NETCONF_RUNNING_QNAME,\n                Optional.ofNullable(yangInstanceIdentifierNormalizedNodeEntry.getValue()),\n                yangInstanceIdentifierNormalizedNodeEntry.getKey(),\n                Optional.empty(),\n                Optional.empty(),\n                true\n        ).get();\n```\n\n然后看一下editConfig方法，毕竟就是靠这个方法来沟通设备的，这个方法在io.lighty.modules.southbound.netconf.impl里边，还在lightly里边。NetconfBaseService其实是个接口，继承了DomService, 里边实现了很多对设备的操作方法。\n\neditConfig的参数大致如下：\n1. QName：要编辑的数据库的名字，比如candidate、running\n2. NormalizedNode： 要向设备传入的内容(odl解析yang文件出来的类)\n3. YangInstanceIdentifier 上边解析出来的类的类名\n\n```java\npublic interface NetconfBaseService extends DOMService {\n    ListenableFuture<? extends DOMRpcResult> get(Optional<YangInstanceIdentifier> var1);\n\n    ListenableFuture<? extends DOMRpcResult> getConfig(QName var1, Optional<YangInstanceIdentifier> var2);\n\n    ListenableFuture<? extends DOMRpcResult> editConfig(QName var1, Optional<NormalizedNode<?, ?>> var2, YangInstanceIdentifier var3, Optional<ModifyAction> var4, Optional<ModifyAction> var5, boolean var6);\n\n    ListenableFuture<? extends DOMRpcResult> copyConfig(QName var1, QName var2);\n\n    ......\n}\n```\n\n然后接着看一下editConfig是怎么实现的：\n\n```java\n    public ListenableFuture<? extends DOMRpcResult> editConfig(QName targetDatastore, Optional<NormalizedNode<?, ?>> data, YangInstanceIdentifier dataPath, Optional<ModifyAction> dataModifyActionAttribute, Optional<ModifyAction> defaultModifyAction, boolean rollback) {\n        Preconditions.checkNotNull(targetDatastore);\n        DataContainerChild<?, ?> editStructure = NetconfUtils.createEditConfigStructure(this.schemaContext, data, dataModifyActionAttribute, dataPath);\n        Preconditions.checkNotNull(editStructure);\n        return this.domRpcService.invokeRpc(NetconfMessageTransformUtil.toPath(NetconfMessageTransformUtil.NETCONF_EDIT_CONFIG_QNAME), NetconfUtils.getEditConfigContent(targetDatastore, editStructure, defaultModifyAction, rollback));\n    }\n```\n\n看一下代码就知道在editConfig里边主要实现功能的还是invokeRpc，前边的几行代码都是在做各种校验。传进invokeRpc的就两个参数，NetconfUtils.getEditConfigContent 这个方法负责将传入的参数组装为我们想要传输的xml，前边这个参数就只是一个编辑config的常量。\n\n\n```java\npackage org.opendaylight.mdsal.dom.api;\n\npublic interface DOMRpcService extends DOMService {\n    @NonNull\n    ListenableFuture<? extends DOMRpcResult> invokeRpc(@NonNull SchemaPath type, @NonNull NormalizedNode<?, ?> input);\n\n    @NonNull\n    <T extends DOMRpcAvailabilityListener> ListenerRegistration<T> registerRpcListener(@NonNull T listener);\n}\n```\n\n这里的DOMRpcService也是继承了DomService，当然这个影响好像不是很大，就是一个空接口。我们继续看看invokeRpc的实现：\n\n这里有多个实现，我们用的是在package org.opendaylight.netconf.sal.connect.netconf.sal里边，(NetconfMessage)this.transformer.toRpcRequest(type, input) 这里就可以将输入转换为xml了。\n\n```java\n    public ListenableFuture<DOMRpcResult> invokeRpc(final SchemaPath type, final NormalizedNode<?, ?> input) {\n        ListenableFuture<RpcResult<NetconfMessage>> delegateFuture = this.communicator.sendRequest((NetconfMessage)this.transformer.toRpcRequest(type, input), type.getLastComponent());\n        final SettableFuture<DOMRpcResult> ret = SettableFuture.create();\n        Futures.addCallback(delegateFuture, new FutureCallback<RpcResult<NetconfMessage>>() {\n            public void onSuccess(final RpcResult<NetconfMessage> result) {\n                try {\n                    ret.set(result.isSuccessful() ? NetconfDeviceRpc.this.transformer.toRpcResult((NetconfMessage)result.getResult(), type) : new DefaultDOMRpcResult(result.getErrors()));\n                } catch (Exception var3) {\n                    ret.setException(new DefaultDOMRpcException(\"Unable to parse rpc reply. type: \" + type + \" input: \" + input, var3));\n                }\n\n            }\n\n            public void onFailure(final Throwable cause) {\n                ret.setException(new DOMRpcImplementationNotAvailableException(cause, \"Unable to invoke rpc %s\", new Object[]{type}));\n            }\n        }, MoreExecutors.directExecutor());\n        return ret;\n    }\n```\n\n看到这里就知道了：第一行代码sendRequest就像设备发送了xml，然后就开始尝试捕捉这个结果··\n\n这里的communicator是一个RemoteDeviceCommunicator\\<NetconfMessage\\>对象，进去看看这个方法的实现：\n\n```java\n public ListenableFuture<RpcResult<NetconfMessage>> sendRequest(final NetconfMessage message, final QName rpc) {\n        this.sessionLock.lock();\n\n        ListenableFuture var3;\n        try {\n            if (this.semaphore != null && !this.semaphore.tryAcquire()) {\n                LOG.warn(\"Limit of concurrent rpc messages was reached (limit: {}). Rpc reply message is needed. Discarding request of Netconf device with id: {}\", this.concurentRpcMsgs, this.id.getName());\n                int var10002 = this.concurentRpcMsgs;\n                FluentFuture var7 = FluentFutures.immediateFailedFluentFuture(new NetconfDocumentedException(\"Limit of rpc messages was reached (Limit :\" + var10002 + \") waiting for emptying the queue of Netconf device with id: \" + this.id.getName()));\n                return var7;\n            }\n\n            var3 = this.sendRequestWithLock(message, rpc);\n        } finally {\n            this.sessionLock.unlock();\n        }\n\n        return var3;\n    }\n```\n在这里也就是对这个session锁住，然后发送信息。\n\n```java\n    private ListenableFuture<RpcResult<NetconfMessage>> sendRequestWithLock(final NetconfMessage message, final QName rpc) {\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"{}: Sending message {}\", this.id, msgToS(message));\n        }\n\n        if (this.currentSession == null) {\n            LOG.warn(\"{}: Session is disconnected, failing RPC request {}\", this.id, message);\n            return FluentFutures.immediateFluentFuture(this.createSessionDownRpcResult());\n        } else {\n            NetconfDeviceCommunicator.Request req = new NetconfDeviceCommunicator.Request(new UncancellableFuture(true), message);\n            this.requests.add(req);\n            this.currentSession.sendMessage(req.request).addListener((future) -> {\n                if (!future.isSuccess()) {\n                    LOG.debug(\"{}: Failed to send request {}\", new Object[]{this.id, XmlUtil.toString(req.request.getDocument()), future.cause()});\n                    if (future.cause() != null) {\n                        req.future.set(createErrorRpcResult(ErrorType.TRANSPORT, future.cause().getLocalizedMessage()));\n                    } else {\n                        req.future.set(this.createSessionDownRpcResult());\n                    }\n\n                    req.future.setException(future.cause());\n                } else {\n                    LOG.trace(\"Finished sending request {}\", req.request);\n                }\n\n            });\n            return req.future;\n        }\n    }\n```\n显然message就是要传给设备的信息。\n\n\n更底层的可以参考[SDNLAB的这篇文章](https://www.sdnlab.com/22997.html)\n\n\n\n\n","source":"_posts/2021-12-29-NetconfBaseService-到设备的调用链.md","raw":"---\ntitle: NetconfBaseService 到设备的调用链\ndate: 2021-12-29 11:22:44\ntags:\n- OpenDayLight\n- java\ncategories:\n- develop\n---\n\n今天起了兴趣想要看一下lightly包中的NetconfBaseService是如何调用到设备上的，其实之前同事和我讲过这个问题，不过当时没搞太明白。正好今天有空，就大概学习一下lightly是怎么做的：\n\n---\n\n最开始是先在最外层创建一个NetconfBaseService对象，要传的参数也很简单了,只要传入挂载设备的id就可以了\n\n<!--more-->\n\n```java\nNetconfBaseService netconfBaseService = netconfSBPlugin.getNetconfBaseService(NodeId.getDefaultInstance(\"1\")).orElseThrow(()->new NullPointerException(\"no such device in device tree!\"));\nDOMRpcResult domRpcResult= netconfBaseService.editConfig(NetconfMessageTransformUtil.NETCONF_RUNNING_QNAME,\n                Optional.ofNullable(yangInstanceIdentifierNormalizedNodeEntry.getValue()),\n                yangInstanceIdentifierNormalizedNodeEntry.getKey(),\n                Optional.empty(),\n                Optional.empty(),\n                true\n        ).get();\n```\n\n然后看一下editConfig方法，毕竟就是靠这个方法来沟通设备的，这个方法在io.lighty.modules.southbound.netconf.impl里边，还在lightly里边。NetconfBaseService其实是个接口，继承了DomService, 里边实现了很多对设备的操作方法。\n\neditConfig的参数大致如下：\n1. QName：要编辑的数据库的名字，比如candidate、running\n2. NormalizedNode： 要向设备传入的内容(odl解析yang文件出来的类)\n3. YangInstanceIdentifier 上边解析出来的类的类名\n\n```java\npublic interface NetconfBaseService extends DOMService {\n    ListenableFuture<? extends DOMRpcResult> get(Optional<YangInstanceIdentifier> var1);\n\n    ListenableFuture<? extends DOMRpcResult> getConfig(QName var1, Optional<YangInstanceIdentifier> var2);\n\n    ListenableFuture<? extends DOMRpcResult> editConfig(QName var1, Optional<NormalizedNode<?, ?>> var2, YangInstanceIdentifier var3, Optional<ModifyAction> var4, Optional<ModifyAction> var5, boolean var6);\n\n    ListenableFuture<? extends DOMRpcResult> copyConfig(QName var1, QName var2);\n\n    ......\n}\n```\n\n然后接着看一下editConfig是怎么实现的：\n\n```java\n    public ListenableFuture<? extends DOMRpcResult> editConfig(QName targetDatastore, Optional<NormalizedNode<?, ?>> data, YangInstanceIdentifier dataPath, Optional<ModifyAction> dataModifyActionAttribute, Optional<ModifyAction> defaultModifyAction, boolean rollback) {\n        Preconditions.checkNotNull(targetDatastore);\n        DataContainerChild<?, ?> editStructure = NetconfUtils.createEditConfigStructure(this.schemaContext, data, dataModifyActionAttribute, dataPath);\n        Preconditions.checkNotNull(editStructure);\n        return this.domRpcService.invokeRpc(NetconfMessageTransformUtil.toPath(NetconfMessageTransformUtil.NETCONF_EDIT_CONFIG_QNAME), NetconfUtils.getEditConfigContent(targetDatastore, editStructure, defaultModifyAction, rollback));\n    }\n```\n\n看一下代码就知道在editConfig里边主要实现功能的还是invokeRpc，前边的几行代码都是在做各种校验。传进invokeRpc的就两个参数，NetconfUtils.getEditConfigContent 这个方法负责将传入的参数组装为我们想要传输的xml，前边这个参数就只是一个编辑config的常量。\n\n\n```java\npackage org.opendaylight.mdsal.dom.api;\n\npublic interface DOMRpcService extends DOMService {\n    @NonNull\n    ListenableFuture<? extends DOMRpcResult> invokeRpc(@NonNull SchemaPath type, @NonNull NormalizedNode<?, ?> input);\n\n    @NonNull\n    <T extends DOMRpcAvailabilityListener> ListenerRegistration<T> registerRpcListener(@NonNull T listener);\n}\n```\n\n这里的DOMRpcService也是继承了DomService，当然这个影响好像不是很大，就是一个空接口。我们继续看看invokeRpc的实现：\n\n这里有多个实现，我们用的是在package org.opendaylight.netconf.sal.connect.netconf.sal里边，(NetconfMessage)this.transformer.toRpcRequest(type, input) 这里就可以将输入转换为xml了。\n\n```java\n    public ListenableFuture<DOMRpcResult> invokeRpc(final SchemaPath type, final NormalizedNode<?, ?> input) {\n        ListenableFuture<RpcResult<NetconfMessage>> delegateFuture = this.communicator.sendRequest((NetconfMessage)this.transformer.toRpcRequest(type, input), type.getLastComponent());\n        final SettableFuture<DOMRpcResult> ret = SettableFuture.create();\n        Futures.addCallback(delegateFuture, new FutureCallback<RpcResult<NetconfMessage>>() {\n            public void onSuccess(final RpcResult<NetconfMessage> result) {\n                try {\n                    ret.set(result.isSuccessful() ? NetconfDeviceRpc.this.transformer.toRpcResult((NetconfMessage)result.getResult(), type) : new DefaultDOMRpcResult(result.getErrors()));\n                } catch (Exception var3) {\n                    ret.setException(new DefaultDOMRpcException(\"Unable to parse rpc reply. type: \" + type + \" input: \" + input, var3));\n                }\n\n            }\n\n            public void onFailure(final Throwable cause) {\n                ret.setException(new DOMRpcImplementationNotAvailableException(cause, \"Unable to invoke rpc %s\", new Object[]{type}));\n            }\n        }, MoreExecutors.directExecutor());\n        return ret;\n    }\n```\n\n看到这里就知道了：第一行代码sendRequest就像设备发送了xml，然后就开始尝试捕捉这个结果··\n\n这里的communicator是一个RemoteDeviceCommunicator\\<NetconfMessage\\>对象，进去看看这个方法的实现：\n\n```java\n public ListenableFuture<RpcResult<NetconfMessage>> sendRequest(final NetconfMessage message, final QName rpc) {\n        this.sessionLock.lock();\n\n        ListenableFuture var3;\n        try {\n            if (this.semaphore != null && !this.semaphore.tryAcquire()) {\n                LOG.warn(\"Limit of concurrent rpc messages was reached (limit: {}). Rpc reply message is needed. Discarding request of Netconf device with id: {}\", this.concurentRpcMsgs, this.id.getName());\n                int var10002 = this.concurentRpcMsgs;\n                FluentFuture var7 = FluentFutures.immediateFailedFluentFuture(new NetconfDocumentedException(\"Limit of rpc messages was reached (Limit :\" + var10002 + \") waiting for emptying the queue of Netconf device with id: \" + this.id.getName()));\n                return var7;\n            }\n\n            var3 = this.sendRequestWithLock(message, rpc);\n        } finally {\n            this.sessionLock.unlock();\n        }\n\n        return var3;\n    }\n```\n在这里也就是对这个session锁住，然后发送信息。\n\n```java\n    private ListenableFuture<RpcResult<NetconfMessage>> sendRequestWithLock(final NetconfMessage message, final QName rpc) {\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"{}: Sending message {}\", this.id, msgToS(message));\n        }\n\n        if (this.currentSession == null) {\n            LOG.warn(\"{}: Session is disconnected, failing RPC request {}\", this.id, message);\n            return FluentFutures.immediateFluentFuture(this.createSessionDownRpcResult());\n        } else {\n            NetconfDeviceCommunicator.Request req = new NetconfDeviceCommunicator.Request(new UncancellableFuture(true), message);\n            this.requests.add(req);\n            this.currentSession.sendMessage(req.request).addListener((future) -> {\n                if (!future.isSuccess()) {\n                    LOG.debug(\"{}: Failed to send request {}\", new Object[]{this.id, XmlUtil.toString(req.request.getDocument()), future.cause()});\n                    if (future.cause() != null) {\n                        req.future.set(createErrorRpcResult(ErrorType.TRANSPORT, future.cause().getLocalizedMessage()));\n                    } else {\n                        req.future.set(this.createSessionDownRpcResult());\n                    }\n\n                    req.future.setException(future.cause());\n                } else {\n                    LOG.trace(\"Finished sending request {}\", req.request);\n                }\n\n            });\n            return req.future;\n        }\n    }\n```\n显然message就是要传给设备的信息。\n\n\n更底层的可以参考[SDNLAB的这篇文章](https://www.sdnlab.com/22997.html)\n\n\n\n\n","slug":"NetconfBaseService-到设备的调用链","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhs800432h5p2eq885j4","content":"<p>今天起了兴趣想要看一下lightly包中的NetconfBaseService是如何调用到设备上的，其实之前同事和我讲过这个问题，不过当时没搞太明白。正好今天有空，就大概学习一下lightly是怎么做的：</p>\n<hr>\n<p>最开始是先在最外层创建一个NetconfBaseService对象，要传的参数也很简单了,只要传入挂载设备的id就可以了</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NetconfBaseService netconfBaseService = netconfSBPlugin.getNetconfBaseService(NodeId.getDefaultInstance(<span class=\"string\">&quot;1&quot;</span>)).orElseThrow(()-&gt;<span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;no such device in device tree!&quot;</span>));</span><br><span class=\"line\">DOMRpcResult domRpcResult= netconfBaseService.editConfig(NetconfMessageTransformUtil.NETCONF_RUNNING_QNAME,</span><br><span class=\"line\">                Optional.ofNullable(yangInstanceIdentifierNormalizedNodeEntry.getValue()),</span><br><span class=\"line\">                yangInstanceIdentifierNormalizedNodeEntry.getKey(),</span><br><span class=\"line\">                Optional.empty(),</span><br><span class=\"line\">                Optional.empty(),</span><br><span class=\"line\">                <span class=\"keyword\">true</span></span><br><span class=\"line\">        ).get();</span><br></pre></td></tr></table></figure>\n<p>然后看一下editConfig方法，毕竟就是靠这个方法来沟通设备的，这个方法在io.lighty.modules.southbound.netconf.impl里边，还在lightly里边。NetconfBaseService其实是个接口，继承了DomService, 里边实现了很多对设备的操作方法。</p>\n<p>editConfig的参数大致如下：</p>\n<ol>\n<li>QName：要编辑的数据库的名字，比如candidate、running</li>\n<li>NormalizedNode： 要向设备传入的内容(odl解析yang文件出来的类)</li>\n<li>YangInstanceIdentifier 上边解析出来的类的类名</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetconfBaseService</span> <span class=\"keyword\">extends</span> <span class=\"title\">DOMService</span> </span>&#123;</span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; get(Optional&lt;YangInstanceIdentifier&gt; var1);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; getConfig(QName var1, Optional&lt;YangInstanceIdentifier&gt; var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; editConfig(QName var1, Optional&lt;NormalizedNode&lt;?, ?&gt;&gt; var2, YangInstanceIdentifier var3, Optional&lt;ModifyAction&gt; var4, Optional&lt;ModifyAction&gt; var5, <span class=\"keyword\">boolean</span> var6);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; copyConfig(QName var1, QName var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后接着看一下editConfig是怎么实现的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListenableFuture&lt;? extends DOMRpcResult&gt; editConfig(QName targetDatastore, Optional&lt;NormalizedNode&lt;?, ?&gt;&gt; data, YangInstanceIdentifier dataPath, Optional&lt;ModifyAction&gt; dataModifyActionAttribute, Optional&lt;ModifyAction&gt; defaultModifyAction, <span class=\"keyword\">boolean</span> rollback) &#123;</span><br><span class=\"line\">    Preconditions.checkNotNull(targetDatastore);</span><br><span class=\"line\">    DataContainerChild&lt;?, ?&gt; editStructure = NetconfUtils.createEditConfigStructure(<span class=\"keyword\">this</span>.schemaContext, data, dataModifyActionAttribute, dataPath);</span><br><span class=\"line\">    Preconditions.checkNotNull(editStructure);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.domRpcService.invokeRpc(NetconfMessageTransformUtil.toPath(NetconfMessageTransformUtil.NETCONF_EDIT_CONFIG_QNAME), NetconfUtils.getEditConfigContent(targetDatastore, editStructure, defaultModifyAction, rollback));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一下代码就知道在editConfig里边主要实现功能的还是invokeRpc，前边的几行代码都是在做各种校验。传进invokeRpc的就两个参数，NetconfUtils.getEditConfigContent 这个方法负责将传入的参数组装为我们想要传输的xml，前边这个参数就只是一个编辑config的常量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.opendaylight.mdsal.dom.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DOMRpcService</span> <span class=\"keyword\">extends</span> <span class=\"title\">DOMService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; invokeRpc(<span class=\"meta\">@NonNull</span> SchemaPath type, <span class=\"meta\">@NonNull</span> NormalizedNode&lt;?, ?&gt; input);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    &lt;T extends DOMRpcAvailabilityListener&gt; <span class=\"function\">ListenerRegistration&lt;T&gt; <span class=\"title\">registerRpcListener</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> T listener)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的DOMRpcService也是继承了DomService，当然这个影响好像不是很大，就是一个空接口。我们继续看看invokeRpc的实现：</p>\n<p>这里有多个实现，我们用的是在package org.opendaylight.netconf.sal.connect.netconf.sal里边，(NetconfMessage)this.transformer.toRpcRequest(type, input) 这里就可以将输入转换为xml了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListenableFuture&lt;DOMRpcResult&gt; <span class=\"title\">invokeRpc</span><span class=\"params\">(<span class=\"keyword\">final</span> SchemaPath type, <span class=\"keyword\">final</span> NormalizedNode&lt;?, ?&gt; input)</span> </span>&#123;</span><br><span class=\"line\">    ListenableFuture&lt;RpcResult&lt;NetconfMessage&gt;&gt; delegateFuture = <span class=\"keyword\">this</span>.communicator.sendRequest((NetconfMessage)<span class=\"keyword\">this</span>.transformer.toRpcRequest(type, input), type.getLastComponent());</span><br><span class=\"line\">    <span class=\"keyword\">final</span> SettableFuture&lt;DOMRpcResult&gt; ret = SettableFuture.create();</span><br><span class=\"line\">    Futures.addCallback(delegateFuture, <span class=\"keyword\">new</span> FutureCallback&lt;RpcResult&lt;NetconfMessage&gt;&gt;() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">final</span> RpcResult&lt;NetconfMessage&gt; result)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ret.set(result.isSuccessful() ? NetconfDeviceRpc.<span class=\"keyword\">this</span>.transformer.toRpcResult((NetconfMessage)result.getResult(), type) : <span class=\"keyword\">new</span> DefaultDOMRpcResult(result.getErrors()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception var3) &#123;</span><br><span class=\"line\">                ret.setException(<span class=\"keyword\">new</span> DefaultDOMRpcException(<span class=\"string\">&quot;Unable to parse rpc reply. type: &quot;</span> + type + <span class=\"string\">&quot; input: &quot;</span> + input, var3));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">final</span> Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">            ret.setException(<span class=\"keyword\">new</span> DOMRpcImplementationNotAvailableException(cause, <span class=\"string\">&quot;Unable to invoke rpc %s&quot;</span>, <span class=\"keyword\">new</span> Object[]&#123;type&#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, MoreExecutors.directExecutor());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这里就知道了：第一行代码sendRequest就像设备发送了xml，然后就开始尝试捕捉这个结果··</p>\n<p>这里的communicator是一个RemoteDeviceCommunicator&lt;NetconfMessage&gt;对象，进去看看这个方法的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListenableFuture&lt;RpcResult&lt;NetconfMessage&gt;&gt; sendRequest(<span class=\"keyword\">final</span> NetconfMessage message, <span class=\"keyword\">final</span> QName rpc) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.sessionLock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">       ListenableFuture var3;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.semaphore != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.semaphore.tryAcquire()) &#123;</span><br><span class=\"line\">               LOG.warn(<span class=\"string\">&quot;Limit of concurrent rpc messages was reached (limit: &#123;&#125;). Rpc reply message is needed. Discarding request of Netconf device with id: &#123;&#125;&quot;</span>, <span class=\"keyword\">this</span>.concurentRpcMsgs, <span class=\"keyword\">this</span>.id.getName());</span><br><span class=\"line\">               <span class=\"keyword\">int</span> var10002 = <span class=\"keyword\">this</span>.concurentRpcMsgs;</span><br><span class=\"line\">               FluentFuture var7 = FluentFutures.immediateFailedFluentFuture(<span class=\"keyword\">new</span> NetconfDocumentedException(<span class=\"string\">&quot;Limit of rpc messages was reached (Limit :&quot;</span> + var10002 + <span class=\"string\">&quot;) waiting for emptying the queue of Netconf device with id: &quot;</span> + <span class=\"keyword\">this</span>.id.getName()));</span><br><span class=\"line\">               <span class=\"keyword\">return</span> var7;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           var3 = <span class=\"keyword\">this</span>.sendRequestWithLock(message, rpc);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.sessionLock.unlock();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> var3;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>在这里也就是对这个session锁住，然后发送信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ListenableFuture&lt;RpcResult&lt;NetconfMessage&gt;&gt; sendRequestWithLock(<span class=\"keyword\">final</span> NetconfMessage message, <span class=\"keyword\">final</span> QName rpc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class=\"line\">        LOG.trace(<span class=\"string\">&quot;&#123;&#125;: Sending message &#123;&#125;&quot;</span>, <span class=\"keyword\">this</span>.id, msgToS(message));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentSession == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">&quot;&#123;&#125;: Session is disconnected, failing RPC request &#123;&#125;&quot;</span>, <span class=\"keyword\">this</span>.id, message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FluentFutures.immediateFluentFuture(<span class=\"keyword\">this</span>.createSessionDownRpcResult());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        NetconfDeviceCommunicator.Request req = <span class=\"keyword\">new</span> NetconfDeviceCommunicator.Request(<span class=\"keyword\">new</span> UncancellableFuture(<span class=\"keyword\">true</span>), message);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.requests.add(req);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentSession.sendMessage(req.request).addListener((future) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!future.isSuccess()) &#123;</span><br><span class=\"line\">                LOG.debug(<span class=\"string\">&quot;&#123;&#125;: Failed to send request &#123;&#125;&quot;</span>, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">this</span>.id, XmlUtil.toString(req.request.getDocument()), future.cause()&#125;);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (future.cause() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    req.future.set(createErrorRpcResult(ErrorType.TRANSPORT, future.cause().getLocalizedMessage()));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    req.future.set(<span class=\"keyword\">this</span>.createSessionDownRpcResult());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                req.future.setException(future.cause());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                LOG.trace(<span class=\"string\">&quot;Finished sending request &#123;&#125;&quot;</span>, req.request);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> req.future;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然message就是要传给设备的信息。</p>\n<p>更底层的可以参考<a href=\"https://www.sdnlab.com/22997.html\">SDNLAB的这篇文章</a></p>\n","site":{"data":{}},"excerpt":"<p>今天起了兴趣想要看一下lightly包中的NetconfBaseService是如何调用到设备上的，其实之前同事和我讲过这个问题，不过当时没搞太明白。正好今天有空，就大概学习一下lightly是怎么做的：</p>\n<hr>\n<p>最开始是先在最外层创建一个NetconfBaseService对象，要传的参数也很简单了,只要传入挂载设备的id就可以了</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NetconfBaseService netconfBaseService = netconfSBPlugin.getNetconfBaseService(NodeId.getDefaultInstance(<span class=\"string\">&quot;1&quot;</span>)).orElseThrow(()-&gt;<span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;no such device in device tree!&quot;</span>));</span><br><span class=\"line\">DOMRpcResult domRpcResult= netconfBaseService.editConfig(NetconfMessageTransformUtil.NETCONF_RUNNING_QNAME,</span><br><span class=\"line\">                Optional.ofNullable(yangInstanceIdentifierNormalizedNodeEntry.getValue()),</span><br><span class=\"line\">                yangInstanceIdentifierNormalizedNodeEntry.getKey(),</span><br><span class=\"line\">                Optional.empty(),</span><br><span class=\"line\">                Optional.empty(),</span><br><span class=\"line\">                <span class=\"keyword\">true</span></span><br><span class=\"line\">        ).get();</span><br></pre></td></tr></table></figure>\n<p>然后看一下editConfig方法，毕竟就是靠这个方法来沟通设备的，这个方法在io.lighty.modules.southbound.netconf.impl里边，还在lightly里边。NetconfBaseService其实是个接口，继承了DomService, 里边实现了很多对设备的操作方法。</p>\n<p>editConfig的参数大致如下：</p>\n<ol>\n<li>QName：要编辑的数据库的名字，比如candidate、running</li>\n<li>NormalizedNode： 要向设备传入的内容(odl解析yang文件出来的类)</li>\n<li>YangInstanceIdentifier 上边解析出来的类的类名</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetconfBaseService</span> <span class=\"keyword\">extends</span> <span class=\"title\">DOMService</span> </span>&#123;</span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; get(Optional&lt;YangInstanceIdentifier&gt; var1);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; getConfig(QName var1, Optional&lt;YangInstanceIdentifier&gt; var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; editConfig(QName var1, Optional&lt;NormalizedNode&lt;?, ?&gt;&gt; var2, YangInstanceIdentifier var3, Optional&lt;ModifyAction&gt; var4, Optional&lt;ModifyAction&gt; var5, <span class=\"keyword\">boolean</span> var6);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; copyConfig(QName var1, QName var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后接着看一下editConfig是怎么实现的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListenableFuture&lt;? extends DOMRpcResult&gt; editConfig(QName targetDatastore, Optional&lt;NormalizedNode&lt;?, ?&gt;&gt; data, YangInstanceIdentifier dataPath, Optional&lt;ModifyAction&gt; dataModifyActionAttribute, Optional&lt;ModifyAction&gt; defaultModifyAction, <span class=\"keyword\">boolean</span> rollback) &#123;</span><br><span class=\"line\">    Preconditions.checkNotNull(targetDatastore);</span><br><span class=\"line\">    DataContainerChild&lt;?, ?&gt; editStructure = NetconfUtils.createEditConfigStructure(<span class=\"keyword\">this</span>.schemaContext, data, dataModifyActionAttribute, dataPath);</span><br><span class=\"line\">    Preconditions.checkNotNull(editStructure);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.domRpcService.invokeRpc(NetconfMessageTransformUtil.toPath(NetconfMessageTransformUtil.NETCONF_EDIT_CONFIG_QNAME), NetconfUtils.getEditConfigContent(targetDatastore, editStructure, defaultModifyAction, rollback));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一下代码就知道在editConfig里边主要实现功能的还是invokeRpc，前边的几行代码都是在做各种校验。传进invokeRpc的就两个参数，NetconfUtils.getEditConfigContent 这个方法负责将传入的参数组装为我们想要传输的xml，前边这个参数就只是一个编辑config的常量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.opendaylight.mdsal.dom.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DOMRpcService</span> <span class=\"keyword\">extends</span> <span class=\"title\">DOMService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    ListenableFuture&lt;? extends DOMRpcResult&gt; invokeRpc(<span class=\"meta\">@NonNull</span> SchemaPath type, <span class=\"meta\">@NonNull</span> NormalizedNode&lt;?, ?&gt; input);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    &lt;T extends DOMRpcAvailabilityListener&gt; <span class=\"function\">ListenerRegistration&lt;T&gt; <span class=\"title\">registerRpcListener</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> T listener)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的DOMRpcService也是继承了DomService，当然这个影响好像不是很大，就是一个空接口。我们继续看看invokeRpc的实现：</p>\n<p>这里有多个实现，我们用的是在package org.opendaylight.netconf.sal.connect.netconf.sal里边，(NetconfMessage)this.transformer.toRpcRequest(type, input) 这里就可以将输入转换为xml了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListenableFuture&lt;DOMRpcResult&gt; <span class=\"title\">invokeRpc</span><span class=\"params\">(<span class=\"keyword\">final</span> SchemaPath type, <span class=\"keyword\">final</span> NormalizedNode&lt;?, ?&gt; input)</span> </span>&#123;</span><br><span class=\"line\">    ListenableFuture&lt;RpcResult&lt;NetconfMessage&gt;&gt; delegateFuture = <span class=\"keyword\">this</span>.communicator.sendRequest((NetconfMessage)<span class=\"keyword\">this</span>.transformer.toRpcRequest(type, input), type.getLastComponent());</span><br><span class=\"line\">    <span class=\"keyword\">final</span> SettableFuture&lt;DOMRpcResult&gt; ret = SettableFuture.create();</span><br><span class=\"line\">    Futures.addCallback(delegateFuture, <span class=\"keyword\">new</span> FutureCallback&lt;RpcResult&lt;NetconfMessage&gt;&gt;() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">final</span> RpcResult&lt;NetconfMessage&gt; result)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ret.set(result.isSuccessful() ? NetconfDeviceRpc.<span class=\"keyword\">this</span>.transformer.toRpcResult((NetconfMessage)result.getResult(), type) : <span class=\"keyword\">new</span> DefaultDOMRpcResult(result.getErrors()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception var3) &#123;</span><br><span class=\"line\">                ret.setException(<span class=\"keyword\">new</span> DefaultDOMRpcException(<span class=\"string\">&quot;Unable to parse rpc reply. type: &quot;</span> + type + <span class=\"string\">&quot; input: &quot;</span> + input, var3));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">final</span> Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">            ret.setException(<span class=\"keyword\">new</span> DOMRpcImplementationNotAvailableException(cause, <span class=\"string\">&quot;Unable to invoke rpc %s&quot;</span>, <span class=\"keyword\">new</span> Object[]&#123;type&#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, MoreExecutors.directExecutor());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这里就知道了：第一行代码sendRequest就像设备发送了xml，然后就开始尝试捕捉这个结果··</p>\n<p>这里的communicator是一个RemoteDeviceCommunicator&lt;NetconfMessage&gt;对象，进去看看这个方法的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListenableFuture&lt;RpcResult&lt;NetconfMessage&gt;&gt; sendRequest(<span class=\"keyword\">final</span> NetconfMessage message, <span class=\"keyword\">final</span> QName rpc) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.sessionLock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">       ListenableFuture var3;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.semaphore != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.semaphore.tryAcquire()) &#123;</span><br><span class=\"line\">               LOG.warn(<span class=\"string\">&quot;Limit of concurrent rpc messages was reached (limit: &#123;&#125;). Rpc reply message is needed. Discarding request of Netconf device with id: &#123;&#125;&quot;</span>, <span class=\"keyword\">this</span>.concurentRpcMsgs, <span class=\"keyword\">this</span>.id.getName());</span><br><span class=\"line\">               <span class=\"keyword\">int</span> var10002 = <span class=\"keyword\">this</span>.concurentRpcMsgs;</span><br><span class=\"line\">               FluentFuture var7 = FluentFutures.immediateFailedFluentFuture(<span class=\"keyword\">new</span> NetconfDocumentedException(<span class=\"string\">&quot;Limit of rpc messages was reached (Limit :&quot;</span> + var10002 + <span class=\"string\">&quot;) waiting for emptying the queue of Netconf device with id: &quot;</span> + <span class=\"keyword\">this</span>.id.getName()));</span><br><span class=\"line\">               <span class=\"keyword\">return</span> var7;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           var3 = <span class=\"keyword\">this</span>.sendRequestWithLock(message, rpc);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.sessionLock.unlock();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> var3;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>在这里也就是对这个session锁住，然后发送信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ListenableFuture&lt;RpcResult&lt;NetconfMessage&gt;&gt; sendRequestWithLock(<span class=\"keyword\">final</span> NetconfMessage message, <span class=\"keyword\">final</span> QName rpc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class=\"line\">        LOG.trace(<span class=\"string\">&quot;&#123;&#125;: Sending message &#123;&#125;&quot;</span>, <span class=\"keyword\">this</span>.id, msgToS(message));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentSession == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">&quot;&#123;&#125;: Session is disconnected, failing RPC request &#123;&#125;&quot;</span>, <span class=\"keyword\">this</span>.id, message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FluentFutures.immediateFluentFuture(<span class=\"keyword\">this</span>.createSessionDownRpcResult());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        NetconfDeviceCommunicator.Request req = <span class=\"keyword\">new</span> NetconfDeviceCommunicator.Request(<span class=\"keyword\">new</span> UncancellableFuture(<span class=\"keyword\">true</span>), message);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.requests.add(req);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentSession.sendMessage(req.request).addListener((future) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!future.isSuccess()) &#123;</span><br><span class=\"line\">                LOG.debug(<span class=\"string\">&quot;&#123;&#125;: Failed to send request &#123;&#125;&quot;</span>, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">this</span>.id, XmlUtil.toString(req.request.getDocument()), future.cause()&#125;);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (future.cause() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    req.future.set(createErrorRpcResult(ErrorType.TRANSPORT, future.cause().getLocalizedMessage()));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    req.future.set(<span class=\"keyword\">this</span>.createSessionDownRpcResult());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                req.future.setException(future.cause());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                LOG.trace(<span class=\"string\">&quot;Finished sending request &#123;&#125;&quot;</span>, req.request);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> req.future;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然message就是要传给设备的信息。</p>\n<p>更底层的可以参考<a href=\"https://www.sdnlab.com/22997.html\">SDNLAB的这篇文章</a></p>"},{"title":"docker部署elk组件&logstash设置","date":"2022-01-21T17:36:15.000Z","_content":"\n由于我们开发环境的elk坏了很久(直到我自己重新安装才知道是哪里坏了)，就计划再重新安装一遍elk，也学习一下elk的知识。\n\n只是安装嘛··elk的基础知识就不介绍了，毕竟网上多的是，就说一下安装方案吧：\n\n把Logstash,Elasticsearch,Kibana部署在一台机器上单独做日志服务，\n\nfilebeat 做为采集器部署分别部署在开发环境和测试环境两台服务器上，连接到logstash传递log\n\n然后分两部分来看安装步骤：\n\n<!--more-->\n\n## filebeat 安装\n\n随手整一个docker-compose：\n\n```yml\nversion: \"3\"\nservices:\n  filebeat:\n    container_name: filebeat\n    hostname: filebeat\n    image: elastic/filebeat:7.16.3\n    restart: always\n    user: root\n    volumes:\n      - /data/logs:/data/logs\n      - /data/elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml\n    network_mode: host\n```\n里边微微注意一下挂载目录就好了，也很直白嘛\n\n然后就是`filebeat.yml`配置文件，给一个精简点的：\n```yml\nfilebeat.config:\n  modules:\n    path: ${path.config}/modules.d/*.yml\n    reload.enabled: false\n\nprocessors:\n  - add_cloud_metadata: ~\n  - add_docker_metadata: ~\n\nfilebeat.inputs:\n  - type: log\n    enabled: true\n    paths:\n      - /data/logs/application/*/*.log\n    exclude_lines: ['\\sDEBUG\\s\\d']\n    fields:\n      docType: sys-log\n    multiline:\n      pattern: '^\\[\\S+:\\S+:\\d{2,}] '\n      negate: true\n      match: after\n\noutput.logstash:\n  hosts: [\"logstash:5044\"]\n  bulk_max_size: 2048\n```\n基本上也很简明易懂嘛，这里针对特定目录的日志给了一个标记，方便在logstash里边处理\n\n## elk部署\n\nelk部署最开始找了几个不靠谱教程，属实没意思，后来发现有一个[docker-elk](https://github.com/deviantony/docker-elk)的项目非常给力，直接clone下来就是一个部署的走起\n\n具体怎么部署里边讲的也很清晰··我就稍微讲几个没有提到的东西\n\n想要无密码登录，直接把所有配置里边和密码相关的都删了就完事，还要要删掉`elasticsearch.yml`里边的这几句：\n\n```yml\nxpack.license.self_generated.type: trial\nxpack.security.enabled: true\nxpack.monitoring.collection.enabled: true\n```\n\n还有一个花时间最多的地方就是logstash的配置上：\n\n举个例子，我们一条日志是这样的：\n\n`[log:111.11.11.11:0000] 2022-01-21 17:37:44.913 INFO 1 [] [XNIO-1 task-1] org.springframework.web.servlet.DispatcherServlet Completed initialization in 34 ms`\n\n里边明显有一些比较重要的信息，比如模块名称，线程名，日志产生时间··这些要分析，然后不做处理的话都在message里边，肯定要logstash做一个处理，那就请出来`grok`来完成这个任务··\n\n写这么一个匹配语句：\n\n`\\[%{NOTSPACE:appName}:%{NOTSPACE:serverIp}:%{NOTSPACE:serverPort}\\] %{TIMESTAMP_ISO8601:logTime} %{LOGLEVEL:logLevel} %{WORD:pid} \\[\\] \\[%{GREEDYDATA:threadName}\\] %{NOTSPACE:classname} %{GREEDYDATA:message}`\n\n就可以讲上边一个看起来很难懂的日志解析成这样简单的形式：\n\n```\n{\n  \"appName\": \"log\",\n  \"pid\": \"1\",\n  \"serverPort\": \"0000\",\n  \"message\": \"Completed initialization in 34 ms\",\n  \"threadName\": \"XNIO-1 task-1\",\n  \"logTime\": \"2022-01-21 17:37:44.913\",\n  \"logLevel\": \"INFO\",\n  \"classname\": \"org.springframework.web.servlet.DispatcherServlet\",\n  \"serverIp\": \"111.11.11.11\"\n}\n```\n那具体要怎么做呢：\n\n在`docker-elk/logstash/pipeline/logstash.conf`里边加一个filter就好啦！\n\n```conf\nfilter {\n  if [fields][docType] == \"sys-log\" {\n    grok {\n      match => { \"message\" => \"\\[%{NOTSPACE:appName}:%{NOTSPACE:serverIp}:%{NOTSPACE:serverPort}\\] %{TIMESTAMP_ISO8601:logTime} %{LOGLEVEL:logLevel} %{WORD:pid} \\[\\] \\[%{GREEDYDATA:threadName}\\] %{NOTSPACE:classname} %{GREEDYDATA:message}\" }\n      overwrite => [\"message\"]\n    }\n    date {\n      match => [\"logTime\",\"yyyy-MM-dd HH:mm:ss.SSS\"]\n    }\n    date {\n      match => [\"logTime\",\"yyyy-MM-dd HH:mm:ss.SSS\"]\n      target => \"timestamp\"\n      locale => \"en\"\n      timezone => \"+08:00\"\n    }\n    mutate {  \n      remove_field => \"logTime\"\n      remove_field => \"@version\"\n      remove_field => \"host\"\n      remove_field => \"offset\"\n    }\n  }\n}\n```\n\n这里用到了之前filebeat的`docType`标记来做处理，至于match里边的grok表达式，写好之后可以在kinbana里边的devtools验证。这里我有踩到一个坑：我有一个自己定义的`threadName`的正则表达式，写在了一个单独的pattern文件里，然而坑的是没有挂在的地方···在网上翻了好长时间也没有找到，如果有大佬知道，还请指教一下。最后还是用`GREADYDATA`来代替。\n\n最后一个要注意的点就是索引模式：如果不对默认的output插件修改的话，那么es里边的所有item都是用`logstash`来开头的，就可以直接用`logstash*`这个匹配模式来做匹配，可以匹配到所有的item。但是如果修改了output，那么对应的索引模式也要修改。","source":"_posts/2022-01-21-docker部署elk组件-logstash设置.md","raw":"---\ntitle: docker部署elk组件&logstash设置\ndate: 2022-01-21 17:36:15\ntags:\n- elk\n- docker\ncategories:\n- develop\n---\n\n由于我们开发环境的elk坏了很久(直到我自己重新安装才知道是哪里坏了)，就计划再重新安装一遍elk，也学习一下elk的知识。\n\n只是安装嘛··elk的基础知识就不介绍了，毕竟网上多的是，就说一下安装方案吧：\n\n把Logstash,Elasticsearch,Kibana部署在一台机器上单独做日志服务，\n\nfilebeat 做为采集器部署分别部署在开发环境和测试环境两台服务器上，连接到logstash传递log\n\n然后分两部分来看安装步骤：\n\n<!--more-->\n\n## filebeat 安装\n\n随手整一个docker-compose：\n\n```yml\nversion: \"3\"\nservices:\n  filebeat:\n    container_name: filebeat\n    hostname: filebeat\n    image: elastic/filebeat:7.16.3\n    restart: always\n    user: root\n    volumes:\n      - /data/logs:/data/logs\n      - /data/elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml\n    network_mode: host\n```\n里边微微注意一下挂载目录就好了，也很直白嘛\n\n然后就是`filebeat.yml`配置文件，给一个精简点的：\n```yml\nfilebeat.config:\n  modules:\n    path: ${path.config}/modules.d/*.yml\n    reload.enabled: false\n\nprocessors:\n  - add_cloud_metadata: ~\n  - add_docker_metadata: ~\n\nfilebeat.inputs:\n  - type: log\n    enabled: true\n    paths:\n      - /data/logs/application/*/*.log\n    exclude_lines: ['\\sDEBUG\\s\\d']\n    fields:\n      docType: sys-log\n    multiline:\n      pattern: '^\\[\\S+:\\S+:\\d{2,}] '\n      negate: true\n      match: after\n\noutput.logstash:\n  hosts: [\"logstash:5044\"]\n  bulk_max_size: 2048\n```\n基本上也很简明易懂嘛，这里针对特定目录的日志给了一个标记，方便在logstash里边处理\n\n## elk部署\n\nelk部署最开始找了几个不靠谱教程，属实没意思，后来发现有一个[docker-elk](https://github.com/deviantony/docker-elk)的项目非常给力，直接clone下来就是一个部署的走起\n\n具体怎么部署里边讲的也很清晰··我就稍微讲几个没有提到的东西\n\n想要无密码登录，直接把所有配置里边和密码相关的都删了就完事，还要要删掉`elasticsearch.yml`里边的这几句：\n\n```yml\nxpack.license.self_generated.type: trial\nxpack.security.enabled: true\nxpack.monitoring.collection.enabled: true\n```\n\n还有一个花时间最多的地方就是logstash的配置上：\n\n举个例子，我们一条日志是这样的：\n\n`[log:111.11.11.11:0000] 2022-01-21 17:37:44.913 INFO 1 [] [XNIO-1 task-1] org.springframework.web.servlet.DispatcherServlet Completed initialization in 34 ms`\n\n里边明显有一些比较重要的信息，比如模块名称，线程名，日志产生时间··这些要分析，然后不做处理的话都在message里边，肯定要logstash做一个处理，那就请出来`grok`来完成这个任务··\n\n写这么一个匹配语句：\n\n`\\[%{NOTSPACE:appName}:%{NOTSPACE:serverIp}:%{NOTSPACE:serverPort}\\] %{TIMESTAMP_ISO8601:logTime} %{LOGLEVEL:logLevel} %{WORD:pid} \\[\\] \\[%{GREEDYDATA:threadName}\\] %{NOTSPACE:classname} %{GREEDYDATA:message}`\n\n就可以讲上边一个看起来很难懂的日志解析成这样简单的形式：\n\n```\n{\n  \"appName\": \"log\",\n  \"pid\": \"1\",\n  \"serverPort\": \"0000\",\n  \"message\": \"Completed initialization in 34 ms\",\n  \"threadName\": \"XNIO-1 task-1\",\n  \"logTime\": \"2022-01-21 17:37:44.913\",\n  \"logLevel\": \"INFO\",\n  \"classname\": \"org.springframework.web.servlet.DispatcherServlet\",\n  \"serverIp\": \"111.11.11.11\"\n}\n```\n那具体要怎么做呢：\n\n在`docker-elk/logstash/pipeline/logstash.conf`里边加一个filter就好啦！\n\n```conf\nfilter {\n  if [fields][docType] == \"sys-log\" {\n    grok {\n      match => { \"message\" => \"\\[%{NOTSPACE:appName}:%{NOTSPACE:serverIp}:%{NOTSPACE:serverPort}\\] %{TIMESTAMP_ISO8601:logTime} %{LOGLEVEL:logLevel} %{WORD:pid} \\[\\] \\[%{GREEDYDATA:threadName}\\] %{NOTSPACE:classname} %{GREEDYDATA:message}\" }\n      overwrite => [\"message\"]\n    }\n    date {\n      match => [\"logTime\",\"yyyy-MM-dd HH:mm:ss.SSS\"]\n    }\n    date {\n      match => [\"logTime\",\"yyyy-MM-dd HH:mm:ss.SSS\"]\n      target => \"timestamp\"\n      locale => \"en\"\n      timezone => \"+08:00\"\n    }\n    mutate {  \n      remove_field => \"logTime\"\n      remove_field => \"@version\"\n      remove_field => \"host\"\n      remove_field => \"offset\"\n    }\n  }\n}\n```\n\n这里用到了之前filebeat的`docType`标记来做处理，至于match里边的grok表达式，写好之后可以在kinbana里边的devtools验证。这里我有踩到一个坑：我有一个自己定义的`threadName`的正则表达式，写在了一个单独的pattern文件里，然而坑的是没有挂在的地方···在网上翻了好长时间也没有找到，如果有大佬知道，还请指教一下。最后还是用`GREADYDATA`来代替。\n\n最后一个要注意的点就是索引模式：如果不对默认的output插件修改的话，那么es里边的所有item都是用`logstash`来开头的，就可以直接用`logstash*`这个匹配模式来做匹配，可以匹配到所有的item。但是如果修改了output，那么对应的索引模式也要修改。","slug":"docker部署elk组件-logstash设置","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhsw00462h5p32czg3oa","content":"<p>由于我们开发环境的elk坏了很久(直到我自己重新安装才知道是哪里坏了)，就计划再重新安装一遍elk，也学习一下elk的知识。</p>\n<p>只是安装嘛··elk的基础知识就不介绍了，毕竟网上多的是，就说一下安装方案吧：</p>\n<p>把Logstash,Elasticsearch,Kibana部署在一台机器上单独做日志服务，</p>\n<p>filebeat 做为采集器部署分别部署在开发环境和测试环境两台服务器上，连接到logstash传递log</p>\n<p>然后分两部分来看安装步骤：</p>\n<a id=\"more\"></a>\n\n<h2 id=\"filebeat-安装\"><a href=\"#filebeat-安装\" class=\"headerlink\" title=\"filebeat 安装\"></a>filebeat 安装</h2><p>随手整一个docker-compose：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">filebeat:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">elastic/filebeat:7.16.3</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/data/logs:/data/logs</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/data/elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br></pre></td></tr></table></figure>\n<p>里边微微注意一下挂载目录就好了，也很直白嘛</p>\n<p>然后就是<code>filebeat.yml</code>配置文件，给一个精简点的：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">filebeat.config:</span></span><br><span class=\"line\">  <span class=\"attr\">modules:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class=\"line\">    <span class=\"attr\">reload.enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">processors:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">add_cloud_metadata:</span> <span class=\"string\">~</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">add_docker_metadata:</span> <span class=\"string\">~</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filebeat.inputs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/data/logs/application/*/*.log</span></span><br><span class=\"line\">    <span class=\"attr\">exclude_lines:</span> [<span class=\"string\">&#x27;\\sDEBUG\\s\\d&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">fields:</span></span><br><span class=\"line\">      <span class=\"attr\">docType:</span> <span class=\"string\">sys-log</span></span><br><span class=\"line\">    <span class=\"attr\">multiline:</span></span><br><span class=\"line\">      <span class=\"attr\">pattern:</span> <span class=\"string\">&#x27;^\\[\\S+:\\S+:\\d&#123;2,&#125;] &#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">negate:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">match:</span> <span class=\"string\">after</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">output.logstash:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> [<span class=\"string\">&quot;logstash:5044&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">bulk_max_size:</span> <span class=\"number\">2048</span></span><br></pre></td></tr></table></figure>\n<p>基本上也很简明易懂嘛，这里针对特定目录的日志给了一个标记，方便在logstash里边处理</p>\n<h2 id=\"elk部署\"><a href=\"#elk部署\" class=\"headerlink\" title=\"elk部署\"></a>elk部署</h2><p>elk部署最开始找了几个不靠谱教程，属实没意思，后来发现有一个<a href=\"https://github.com/deviantony/docker-elk\">docker-elk</a>的项目非常给力，直接clone下来就是一个部署的走起</p>\n<p>具体怎么部署里边讲的也很清晰··我就稍微讲几个没有提到的东西</p>\n<p>想要无密码登录，直接把所有配置里边和密码相关的都删了就完事，还要要删掉<code>elasticsearch.yml</code>里边的这几句：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.monitoring.collection.enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>还有一个花时间最多的地方就是logstash的配置上：</p>\n<p>举个例子，我们一条日志是这样的：</p>\n<p><code>[log:111.11.11.11:0000] 2022-01-21 17:37:44.913 INFO 1 [] [XNIO-1 task-1] org.springframework.web.servlet.DispatcherServlet Completed initialization in 34 ms</code></p>\n<p>里边明显有一些比较重要的信息，比如模块名称，线程名，日志产生时间··这些要分析，然后不做处理的话都在message里边，肯定要logstash做一个处理，那就请出来<code>grok</code>来完成这个任务··</p>\n<p>写这么一个匹配语句：</p>\n<p><code>\\[%&#123;NOTSPACE:appName&#125;:%&#123;NOTSPACE:serverIp&#125;:%&#123;NOTSPACE:serverPort&#125;\\] %&#123;TIMESTAMP_ISO8601:logTime&#125; %&#123;LOGLEVEL:logLevel&#125; %&#123;WORD:pid&#125; \\[\\] \\[%&#123;GREEDYDATA:threadName&#125;\\] %&#123;NOTSPACE:classname&#125; %&#123;GREEDYDATA:message&#125;</code></p>\n<p>就可以讲上边一个看起来很难懂的日志解析成这样简单的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;appName&quot;: &quot;log&quot;,</span><br><span class=\"line\">  &quot;pid&quot;: &quot;1&quot;,</span><br><span class=\"line\">  &quot;serverPort&quot;: &quot;0000&quot;,</span><br><span class=\"line\">  &quot;message&quot;: &quot;Completed initialization in 34 ms&quot;,</span><br><span class=\"line\">  &quot;threadName&quot;: &quot;XNIO-1 task-1&quot;,</span><br><span class=\"line\">  &quot;logTime&quot;: &quot;2022-01-21 17:37:44.913&quot;,</span><br><span class=\"line\">  &quot;logLevel&quot;: &quot;INFO&quot;,</span><br><span class=\"line\">  &quot;classname&quot;: &quot;org.springframework.web.servlet.DispatcherServlet&quot;,</span><br><span class=\"line\">  &quot;serverIp&quot;: &quot;111.11.11.11&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那具体要怎么做呢：</p>\n<p>在<code>docker-elk/logstash/pipeline/logstash.conf</code>里边加一个filter就好啦！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter &#123;</span><br><span class=\"line\">  if [fields][docType] &#x3D;&#x3D; &quot;sys-log&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match &#x3D;&gt; &#123; &quot;message&quot; &#x3D;&gt; &quot;\\[%&#123;NOTSPACE:appName&#125;:%&#123;NOTSPACE:serverIp&#125;:%&#123;NOTSPACE:serverPort&#125;\\] %&#123;TIMESTAMP_ISO8601:logTime&#125; %&#123;LOGLEVEL:logLevel&#125; %&#123;WORD:pid&#125; \\[\\] \\[%&#123;GREEDYDATA:threadName&#125;\\] %&#123;NOTSPACE:classname&#125; %&#123;GREEDYDATA:message&#125;&quot; &#125;</span><br><span class=\"line\">      overwrite &#x3D;&gt; [&quot;message&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    date &#123;</span><br><span class=\"line\">      match &#x3D;&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    date &#123;</span><br><span class=\"line\">      match &#x3D;&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class=\"line\">      target &#x3D;&gt; &quot;timestamp&quot;</span><br><span class=\"line\">      locale &#x3D;&gt; &quot;en&quot;</span><br><span class=\"line\">      timezone &#x3D;&gt; &quot;+08:00&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mutate &#123;  </span><br><span class=\"line\">      remove_field &#x3D;&gt; &quot;logTime&quot;</span><br><span class=\"line\">      remove_field &#x3D;&gt; &quot;@version&quot;</span><br><span class=\"line\">      remove_field &#x3D;&gt; &quot;host&quot;</span><br><span class=\"line\">      remove_field &#x3D;&gt; &quot;offset&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里用到了之前filebeat的<code>docType</code>标记来做处理，至于match里边的grok表达式，写好之后可以在kinbana里边的devtools验证。这里我有踩到一个坑：我有一个自己定义的<code>threadName</code>的正则表达式，写在了一个单独的pattern文件里，然而坑的是没有挂在的地方···在网上翻了好长时间也没有找到，如果有大佬知道，还请指教一下。最后还是用<code>GREADYDATA</code>来代替。</p>\n<p>最后一个要注意的点就是索引模式：如果不对默认的output插件修改的话，那么es里边的所有item都是用<code>logstash</code>来开头的，就可以直接用<code>logstash*</code>这个匹配模式来做匹配，可以匹配到所有的item。但是如果修改了output，那么对应的索引模式也要修改。</p>\n","site":{"data":{}},"excerpt":"<p>由于我们开发环境的elk坏了很久(直到我自己重新安装才知道是哪里坏了)，就计划再重新安装一遍elk，也学习一下elk的知识。</p>\n<p>只是安装嘛··elk的基础知识就不介绍了，毕竟网上多的是，就说一下安装方案吧：</p>\n<p>把Logstash,Elasticsearch,Kibana部署在一台机器上单独做日志服务，</p>\n<p>filebeat 做为采集器部署分别部署在开发环境和测试环境两台服务器上，连接到logstash传递log</p>\n<p>然后分两部分来看安装步骤：</p>","more":"<h2 id=\"filebeat-安装\"><a href=\"#filebeat-安装\" class=\"headerlink\" title=\"filebeat 安装\"></a>filebeat 安装</h2><p>随手整一个docker-compose：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">filebeat:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">elastic/filebeat:7.16.3</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/data/logs:/data/logs</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/data/elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br></pre></td></tr></table></figure>\n<p>里边微微注意一下挂载目录就好了，也很直白嘛</p>\n<p>然后就是<code>filebeat.yml</code>配置文件，给一个精简点的：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">filebeat.config:</span></span><br><span class=\"line\">  <span class=\"attr\">modules:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class=\"line\">    <span class=\"attr\">reload.enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">processors:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">add_cloud_metadata:</span> <span class=\"string\">~</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">add_docker_metadata:</span> <span class=\"string\">~</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filebeat.inputs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/data/logs/application/*/*.log</span></span><br><span class=\"line\">    <span class=\"attr\">exclude_lines:</span> [<span class=\"string\">&#x27;\\sDEBUG\\s\\d&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">fields:</span></span><br><span class=\"line\">      <span class=\"attr\">docType:</span> <span class=\"string\">sys-log</span></span><br><span class=\"line\">    <span class=\"attr\">multiline:</span></span><br><span class=\"line\">      <span class=\"attr\">pattern:</span> <span class=\"string\">&#x27;^\\[\\S+:\\S+:\\d&#123;2,&#125;] &#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">negate:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">match:</span> <span class=\"string\">after</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">output.logstash:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> [<span class=\"string\">&quot;logstash:5044&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">bulk_max_size:</span> <span class=\"number\">2048</span></span><br></pre></td></tr></table></figure>\n<p>基本上也很简明易懂嘛，这里针对特定目录的日志给了一个标记，方便在logstash里边处理</p>\n<h2 id=\"elk部署\"><a href=\"#elk部署\" class=\"headerlink\" title=\"elk部署\"></a>elk部署</h2><p>elk部署最开始找了几个不靠谱教程，属实没意思，后来发现有一个<a href=\"https://github.com/deviantony/docker-elk\">docker-elk</a>的项目非常给力，直接clone下来就是一个部署的走起</p>\n<p>具体怎么部署里边讲的也很清晰··我就稍微讲几个没有提到的东西</p>\n<p>想要无密码登录，直接把所有配置里边和密码相关的都删了就完事，还要要删掉<code>elasticsearch.yml</code>里边的这几句：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.monitoring.collection.enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>还有一个花时间最多的地方就是logstash的配置上：</p>\n<p>举个例子，我们一条日志是这样的：</p>\n<p><code>[log:111.11.11.11:0000] 2022-01-21 17:37:44.913 INFO 1 [] [XNIO-1 task-1] org.springframework.web.servlet.DispatcherServlet Completed initialization in 34 ms</code></p>\n<p>里边明显有一些比较重要的信息，比如模块名称，线程名，日志产生时间··这些要分析，然后不做处理的话都在message里边，肯定要logstash做一个处理，那就请出来<code>grok</code>来完成这个任务··</p>\n<p>写这么一个匹配语句：</p>\n<p><code>\\[%&#123;NOTSPACE:appName&#125;:%&#123;NOTSPACE:serverIp&#125;:%&#123;NOTSPACE:serverPort&#125;\\] %&#123;TIMESTAMP_ISO8601:logTime&#125; %&#123;LOGLEVEL:logLevel&#125; %&#123;WORD:pid&#125; \\[\\] \\[%&#123;GREEDYDATA:threadName&#125;\\] %&#123;NOTSPACE:classname&#125; %&#123;GREEDYDATA:message&#125;</code></p>\n<p>就可以讲上边一个看起来很难懂的日志解析成这样简单的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;appName&quot;: &quot;log&quot;,</span><br><span class=\"line\">  &quot;pid&quot;: &quot;1&quot;,</span><br><span class=\"line\">  &quot;serverPort&quot;: &quot;0000&quot;,</span><br><span class=\"line\">  &quot;message&quot;: &quot;Completed initialization in 34 ms&quot;,</span><br><span class=\"line\">  &quot;threadName&quot;: &quot;XNIO-1 task-1&quot;,</span><br><span class=\"line\">  &quot;logTime&quot;: &quot;2022-01-21 17:37:44.913&quot;,</span><br><span class=\"line\">  &quot;logLevel&quot;: &quot;INFO&quot;,</span><br><span class=\"line\">  &quot;classname&quot;: &quot;org.springframework.web.servlet.DispatcherServlet&quot;,</span><br><span class=\"line\">  &quot;serverIp&quot;: &quot;111.11.11.11&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那具体要怎么做呢：</p>\n<p>在<code>docker-elk/logstash/pipeline/logstash.conf</code>里边加一个filter就好啦！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter &#123;</span><br><span class=\"line\">  if [fields][docType] &#x3D;&#x3D; &quot;sys-log&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match &#x3D;&gt; &#123; &quot;message&quot; &#x3D;&gt; &quot;\\[%&#123;NOTSPACE:appName&#125;:%&#123;NOTSPACE:serverIp&#125;:%&#123;NOTSPACE:serverPort&#125;\\] %&#123;TIMESTAMP_ISO8601:logTime&#125; %&#123;LOGLEVEL:logLevel&#125; %&#123;WORD:pid&#125; \\[\\] \\[%&#123;GREEDYDATA:threadName&#125;\\] %&#123;NOTSPACE:classname&#125; %&#123;GREEDYDATA:message&#125;&quot; &#125;</span><br><span class=\"line\">      overwrite &#x3D;&gt; [&quot;message&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    date &#123;</span><br><span class=\"line\">      match &#x3D;&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    date &#123;</span><br><span class=\"line\">      match &#x3D;&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class=\"line\">      target &#x3D;&gt; &quot;timestamp&quot;</span><br><span class=\"line\">      locale &#x3D;&gt; &quot;en&quot;</span><br><span class=\"line\">      timezone &#x3D;&gt; &quot;+08:00&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mutate &#123;  </span><br><span class=\"line\">      remove_field &#x3D;&gt; &quot;logTime&quot;</span><br><span class=\"line\">      remove_field &#x3D;&gt; &quot;@version&quot;</span><br><span class=\"line\">      remove_field &#x3D;&gt; &quot;host&quot;</span><br><span class=\"line\">      remove_field &#x3D;&gt; &quot;offset&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里用到了之前filebeat的<code>docType</code>标记来做处理，至于match里边的grok表达式，写好之后可以在kinbana里边的devtools验证。这里我有踩到一个坑：我有一个自己定义的<code>threadName</code>的正则表达式，写在了一个单独的pattern文件里，然而坑的是没有挂在的地方···在网上翻了好长时间也没有找到，如果有大佬知道，还请指教一下。最后还是用<code>GREADYDATA</code>来代替。</p>\n<p>最后一个要注意的点就是索引模式：如果不对默认的output插件修改的话，那么es里边的所有item都是用<code>logstash</code>来开头的，就可以直接用<code>logstash*</code>这个匹配模式来做匹配，可以匹配到所有的item。但是如果修改了output，那么对应的索引模式也要修改。</p>"},{"title":"从0开始学习go微服务","date":"2022-02-25T16:44:51.000Z","_content":"\n今天经过仔细思考，感觉走java这条路只能越走越窄，不如开始转go，才有一线生机···\n\n虽然写过一点点go代码，但是还是算是小白状态，所以我决定今天开始每天都要学习go！！\n\n于是找到的第一个教程就是这个： Go语言中文网的[带你十天轻松搞定 Go 微服务系列](https://mp.weixin.qq.com/s/oRX-OUOP9Ak5R1MEHRU5gg)\n\n于是今天就从一个全新的状态开始学习--\n\n<!--more-->\n\n## 安装go\n\n看了一下系统里的go version还是1.14，起码得升级一下吧。就安排了go1.17，参考了官方的[安装文档](https://golang.google.cn/doc/install),下载好包之后一行代码搞定:`rm -rf /usr/local/go && tar -C /usr/local -xzf go1.17.7.linux-amd64.tar.gz`, `export PATH=$PATH:/usr/local/go/bin`\n\n## 环境搭建\n\n看文档里边为了保证读者的开发环境相同，用了docker来搭建统一的go1.17开发环境，装了一些必要的软件，比如curl, zip, unzip, git, vim\n\n开发相关的，框架要用go-zero, 装了goctl, protoc-gen-go, protoc工具\n\n微服务的其它组件里边，mysql, redis, prometheus, grafana这三个很了解了，不了解的有etcd, jaeger, dtm这三个\n\n* etcd 服务发现注册\n* jaeger 链路追踪\n* dtm 分布式事务管理器\n\n\n\n","source":"_posts/2022-02-25-从0开始学习go微服务.md","raw":"---\ntitle: 从0开始学习go微服务\ndate: 2022-02-25 16:44:51\ntags:\n- go\n- micro service\ncategories:\n- develop\n---\n\n今天经过仔细思考，感觉走java这条路只能越走越窄，不如开始转go，才有一线生机···\n\n虽然写过一点点go代码，但是还是算是小白状态，所以我决定今天开始每天都要学习go！！\n\n于是找到的第一个教程就是这个： Go语言中文网的[带你十天轻松搞定 Go 微服务系列](https://mp.weixin.qq.com/s/oRX-OUOP9Ak5R1MEHRU5gg)\n\n于是今天就从一个全新的状态开始学习--\n\n<!--more-->\n\n## 安装go\n\n看了一下系统里的go version还是1.14，起码得升级一下吧。就安排了go1.17，参考了官方的[安装文档](https://golang.google.cn/doc/install),下载好包之后一行代码搞定:`rm -rf /usr/local/go && tar -C /usr/local -xzf go1.17.7.linux-amd64.tar.gz`, `export PATH=$PATH:/usr/local/go/bin`\n\n## 环境搭建\n\n看文档里边为了保证读者的开发环境相同，用了docker来搭建统一的go1.17开发环境，装了一些必要的软件，比如curl, zip, unzip, git, vim\n\n开发相关的，框架要用go-zero, 装了goctl, protoc-gen-go, protoc工具\n\n微服务的其它组件里边，mysql, redis, prometheus, grafana这三个很了解了，不了解的有etcd, jaeger, dtm这三个\n\n* etcd 服务发现注册\n* jaeger 链路追踪\n* dtm 分布式事务管理器\n\n\n\n","slug":"从0开始学习go微服务","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhtx00482h5p07uc3b8y","content":"<p>今天经过仔细思考，感觉走java这条路只能越走越窄，不如开始转go，才有一线生机···</p>\n<p>虽然写过一点点go代码，但是还是算是小白状态，所以我决定今天开始每天都要学习go！！</p>\n<p>于是找到的第一个教程就是这个： Go语言中文网的<a href=\"https://mp.weixin.qq.com/s/oRX-OUOP9Ak5R1MEHRU5gg\">带你十天轻松搞定 Go 微服务系列</a></p>\n<p>于是今天就从一个全新的状态开始学习–</p>\n<a id=\"more\"></a>\n\n<h2 id=\"安装go\"><a href=\"#安装go\" class=\"headerlink\" title=\"安装go\"></a>安装go</h2><p>看了一下系统里的go version还是1.14，起码得升级一下吧。就安排了go1.17，参考了官方的<a href=\"https://golang.google.cn/doc/install\">安装文档</a>,下载好包之后一行代码搞定:<code>rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.17.7.linux-amd64.tar.gz</code>, <code>export PATH=$PATH:/usr/local/go/bin</code></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>看文档里边为了保证读者的开发环境相同，用了docker来搭建统一的go1.17开发环境，装了一些必要的软件，比如curl, zip, unzip, git, vim</p>\n<p>开发相关的，框架要用go-zero, 装了goctl, protoc-gen-go, protoc工具</p>\n<p>微服务的其它组件里边，mysql, redis, prometheus, grafana这三个很了解了，不了解的有etcd, jaeger, dtm这三个</p>\n<ul>\n<li>etcd 服务发现注册</li>\n<li>jaeger 链路追踪</li>\n<li>dtm 分布式事务管理器</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今天经过仔细思考，感觉走java这条路只能越走越窄，不如开始转go，才有一线生机···</p>\n<p>虽然写过一点点go代码，但是还是算是小白状态，所以我决定今天开始每天都要学习go！！</p>\n<p>于是找到的第一个教程就是这个： Go语言中文网的<a href=\"https://mp.weixin.qq.com/s/oRX-OUOP9Ak5R1MEHRU5gg\">带你十天轻松搞定 Go 微服务系列</a></p>\n<p>于是今天就从一个全新的状态开始学习–</p>","more":"<h2 id=\"安装go\"><a href=\"#安装go\" class=\"headerlink\" title=\"安装go\"></a>安装go</h2><p>看了一下系统里的go version还是1.14，起码得升级一下吧。就安排了go1.17，参考了官方的<a href=\"https://golang.google.cn/doc/install\">安装文档</a>,下载好包之后一行代码搞定:<code>rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.17.7.linux-amd64.tar.gz</code>, <code>export PATH=$PATH:/usr/local/go/bin</code></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>看文档里边为了保证读者的开发环境相同，用了docker来搭建统一的go1.17开发环境，装了一些必要的软件，比如curl, zip, unzip, git, vim</p>\n<p>开发相关的，框架要用go-zero, 装了goctl, protoc-gen-go, protoc工具</p>\n<p>微服务的其它组件里边，mysql, redis, prometheus, grafana这三个很了解了，不了解的有etcd, jaeger, dtm这三个</p>\n<ul>\n<li>etcd 服务发现注册</li>\n<li>jaeger 链路追踪</li>\n<li>dtm 分布式事务管理器</li>\n</ul>"},{"title":"删除docker images的正确姿势","date":"2022-02-15T12:10:35.000Z","_content":"\n今天看了一下机器里的docker image，发现居然有20来个，好多现在都不用了，各个image又挺大的，就想着干脆全删了得了，常用的image再下载一遍就好啦，于是就随手搜了一下怎么删掉所有的image， 所有的网站都给了同一条指令：\n\n```\ndocker rmi $(docker images -q)\n```\n\n很好理解吧，`docker images -q`就是列出来所有image的id，然后再挨个删掉。然后我就报了一个错：\n\n<!--more-->\n```\nError response from daemon: conflict: unable to delete 3a5e93284781 (must be forced) - image is referenced in multiple repositories\nError response from daemon: conflict: unable to delete 3a5e93284781 (must be forced) - image is referenced in multiple repositories\n```\n\n好吧，这是因为一个镜像id指向了多个镜像，删除的时候只能用repository:tag的形式来删除，然而又没有人写怎么一次性全删除==那就只好我来写了：\n\n```\ndocker rmi $(docker images --format \"{{.Repository}}:{{.Tag}}\")\n```\n\n删除images的时候用Repository:Tag的方式来删除就搞定了","source":"_posts/2022-02-15-删除docker-images的正确姿势.md","raw":"---\ntitle: 删除docker images的正确姿势\ndate: 2022-02-15 12:10:35\ntags:\n- docker\ncategories:\n- develop\n---\n\n今天看了一下机器里的docker image，发现居然有20来个，好多现在都不用了，各个image又挺大的，就想着干脆全删了得了，常用的image再下载一遍就好啦，于是就随手搜了一下怎么删掉所有的image， 所有的网站都给了同一条指令：\n\n```\ndocker rmi $(docker images -q)\n```\n\n很好理解吧，`docker images -q`就是列出来所有image的id，然后再挨个删掉。然后我就报了一个错：\n\n<!--more-->\n```\nError response from daemon: conflict: unable to delete 3a5e93284781 (must be forced) - image is referenced in multiple repositories\nError response from daemon: conflict: unable to delete 3a5e93284781 (must be forced) - image is referenced in multiple repositories\n```\n\n好吧，这是因为一个镜像id指向了多个镜像，删除的时候只能用repository:tag的形式来删除，然而又没有人写怎么一次性全删除==那就只好我来写了：\n\n```\ndocker rmi $(docker images --format \"{{.Repository}}:{{.Tag}}\")\n```\n\n删除images的时候用Repository:Tag的方式来删除就搞定了","slug":"删除docker-images的正确姿势","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhv0004c2h5p20o7hv60","content":"<p>今天看了一下机器里的docker image，发现居然有20来个，好多现在都不用了，各个image又挺大的，就想着干脆全删了得了，常用的image再下载一遍就好啦，于是就随手搜了一下怎么删掉所有的image， 所有的网站都给了同一条指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>\n<p>很好理解吧，<code>docker images -q</code>就是列出来所有image的id，然后再挨个删掉。然后我就报了一个错：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error response from daemon: conflict: unable to delete 3a5e93284781 (must be forced) - image is referenced in multiple repositories</span><br><span class=\"line\">Error response from daemon: conflict: unable to delete 3a5e93284781 (must be forced) - image is referenced in multiple repositories</span><br></pre></td></tr></table></figure>\n<p>好吧，这是因为一个镜像id指向了多个镜像，删除的时候只能用repository:tag的形式来删除，然而又没有人写怎么一次性全删除==那就只好我来写了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images --format &quot;&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;&quot;)</span><br></pre></td></tr></table></figure>\n<p>删除images的时候用Repository:Tag的方式来删除就搞定了</p>\n","site":{"data":{}},"excerpt":"<p>今天看了一下机器里的docker image，发现居然有20来个，好多现在都不用了，各个image又挺大的，就想着干脆全删了得了，常用的image再下载一遍就好啦，于是就随手搜了一下怎么删掉所有的image， 所有的网站都给了同一条指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>\n<p>很好理解吧，<code>docker images -q</code>就是列出来所有image的id，然后再挨个删掉。然后我就报了一个错：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error response from daemon: conflict: unable to delete 3a5e93284781 (must be forced) - image is referenced in multiple repositories</span><br><span class=\"line\">Error response from daemon: conflict: unable to delete 3a5e93284781 (must be forced) - image is referenced in multiple repositories</span><br></pre></td></tr></table></figure>\n<p>好吧，这是因为一个镜像id指向了多个镜像，删除的时候只能用repository:tag的形式来删除，然而又没有人写怎么一次性全删除==那就只好我来写了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images --format &quot;&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;&quot;)</span><br></pre></td></tr></table></figure>\n<p>删除images的时候用Repository:Tag的方式来删除就搞定了</p>"},{"title":"feign调用失败后返回错误结果","date":"2022-03-03T17:02:04.000Z","_content":"\n这又是一篇开发过程中遇到的问题，其实解决也很简单啦，spring的文档感觉还是挺全面的，[这里](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html#spring-cloud-feign-hystrix-fallback)是对应的文档。\n\n\n问题很简单，在我们的框架里边，内部接口调用用的是feign，然后就很正常的用了Hystrix来做服务降级，实现也很简单，在feign的注解上加上`fallback`的字段，然后在对应的降级类里边实现对应要返回的信息就好了。这就带来了一个小小的问题：原服务里边写好的错误就获取不到了，只能获取到Hystrix里边fallback函数抛出来的错误。\n\n<!--more-->\n\n其实也很好解决：在`FeignClient`里边可以加上`fallbackFactory`，然后修改原先的降级函数，实现`FallbackFactory<HystrixClient>`就好了。\n\n看代码可能更简单？\n\n没有实现`fallbackFactory`的版本：\n\n```java\n@FeignClient(name = \"hello\", fallback = HystrixClientFallback.class)\nprotected interface HystrixClient {\n    @RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n    Hello iFailSometimes();\n}\n\nstatic class HystrixClientFallback implements HystrixClient {\n    @Override\n    public Hello iFailSometimes() {\n        return new Hello(\"fallback\");\n    }\n}\n```\n\n实现了`fallbackFactory`的版本\n\n```java\n@FeignClient(name = \"hello\", fallbackFactory = HystrixClientFallbackFactory.class)\nprotected interface HystrixClient {\n\t@RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n\tHello iFailSometimes();\n}\n\n@Component\nstatic class HystrixClientFallbackFactory implements FallbackFactory<HystrixClient> {\n\t@Override\n\tpublic HystrixClient create(Throwable cause) {\n\t\treturn new HystrixClient() {\n\t\t\t@Override\n\t\t\tpublic Hello iFailSometimes() {\n\t\t\t\treturn new Hello(\"fallback; reason was: \" + cause.getMessage());\n\t\t\t}\n\t\t};\n\t}\n}\n```\n\n这里很明显啦，传进来的`throwable`对象就包含了原先抛出来的错误原因。\n\n还有一个要注意的就是`@FeignClient`里的`fallback`属性一定要修改为`fallbackFactory`,毕竟改了之后就没有fallback这个东西了==","source":"_posts/2022-03-03-feign调用失败后返回错误结果.md","raw":"---\ntitle: feign调用失败后返回错误结果\ndate: 2022-03-03 17:02:04\ntags:\n- feign\n- spring cloud\ncategories:\n- develop\n---\n\n这又是一篇开发过程中遇到的问题，其实解决也很简单啦，spring的文档感觉还是挺全面的，[这里](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html#spring-cloud-feign-hystrix-fallback)是对应的文档。\n\n\n问题很简单，在我们的框架里边，内部接口调用用的是feign，然后就很正常的用了Hystrix来做服务降级，实现也很简单，在feign的注解上加上`fallback`的字段，然后在对应的降级类里边实现对应要返回的信息就好了。这就带来了一个小小的问题：原服务里边写好的错误就获取不到了，只能获取到Hystrix里边fallback函数抛出来的错误。\n\n<!--more-->\n\n其实也很好解决：在`FeignClient`里边可以加上`fallbackFactory`，然后修改原先的降级函数，实现`FallbackFactory<HystrixClient>`就好了。\n\n看代码可能更简单？\n\n没有实现`fallbackFactory`的版本：\n\n```java\n@FeignClient(name = \"hello\", fallback = HystrixClientFallback.class)\nprotected interface HystrixClient {\n    @RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n    Hello iFailSometimes();\n}\n\nstatic class HystrixClientFallback implements HystrixClient {\n    @Override\n    public Hello iFailSometimes() {\n        return new Hello(\"fallback\");\n    }\n}\n```\n\n实现了`fallbackFactory`的版本\n\n```java\n@FeignClient(name = \"hello\", fallbackFactory = HystrixClientFallbackFactory.class)\nprotected interface HystrixClient {\n\t@RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n\tHello iFailSometimes();\n}\n\n@Component\nstatic class HystrixClientFallbackFactory implements FallbackFactory<HystrixClient> {\n\t@Override\n\tpublic HystrixClient create(Throwable cause) {\n\t\treturn new HystrixClient() {\n\t\t\t@Override\n\t\t\tpublic Hello iFailSometimes() {\n\t\t\t\treturn new Hello(\"fallback; reason was: \" + cause.getMessage());\n\t\t\t}\n\t\t};\n\t}\n}\n```\n\n这里很明显啦，传进来的`throwable`对象就包含了原先抛出来的错误原因。\n\n还有一个要注意的就是`@FeignClient`里的`fallback`属性一定要修改为`fallbackFactory`,毕竟改了之后就没有fallback这个东西了==","slug":"feign调用失败后返回错误结果","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhv2004f2h5pb6hf8f54","content":"<p>这又是一篇开发过程中遇到的问题，其实解决也很简单啦，spring的文档感觉还是挺全面的，<a href=\"https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html#spring-cloud-feign-hystrix-fallback\">这里</a>是对应的文档。</p>\n<p>问题很简单，在我们的框架里边，内部接口调用用的是feign，然后就很正常的用了Hystrix来做服务降级，实现也很简单，在feign的注解上加上<code>fallback</code>的字段，然后在对应的降级类里边实现对应要返回的信息就好了。这就带来了一个小小的问题：原服务里边写好的错误就获取不到了，只能获取到Hystrix里边fallback函数抛出来的错误。</p>\n<a id=\"more\"></a>\n\n<p>其实也很好解决：在<code>FeignClient</code>里边可以加上<code>fallbackFactory</code>，然后修改原先的降级函数，实现<code>FallbackFactory&lt;HystrixClient&gt;</code>就好了。</p>\n<p>看代码可能更简单？</p>\n<p>没有实现<code>fallbackFactory</code>的版本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(name = &quot;hello&quot;, fallback = HystrixClientFallback.class)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HystrixClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(method = RequestMethod.GET, value = &quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixClientFallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">HystrixClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hello(<span class=\"string\">&quot;fallback&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现了<code>fallbackFactory</code>的版本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(name = &quot;hello&quot;, fallbackFactory = HystrixClientFallbackFactory.class)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HystrixClient</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(method = RequestMethod.GET, value = &quot;/hello&quot;)</span></span><br><span class=\"line\">\t<span class=\"function\">Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixClientFallbackFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FallbackFactory</span>&lt;<span class=\"title\">HystrixClient</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HystrixClient <span class=\"title\">create</span><span class=\"params\">(Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixClient() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hello(<span class=\"string\">&quot;fallback; reason was: &quot;</span> + cause.getMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里很明显啦，传进来的<code>throwable</code>对象就包含了原先抛出来的错误原因。</p>\n<p>还有一个要注意的就是<code>@FeignClient</code>里的<code>fallback</code>属性一定要修改为<code>fallbackFactory</code>,毕竟改了之后就没有fallback这个东西了==</p>\n","site":{"data":{}},"excerpt":"<p>这又是一篇开发过程中遇到的问题，其实解决也很简单啦，spring的文档感觉还是挺全面的，<a href=\"https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html#spring-cloud-feign-hystrix-fallback\">这里</a>是对应的文档。</p>\n<p>问题很简单，在我们的框架里边，内部接口调用用的是feign，然后就很正常的用了Hystrix来做服务降级，实现也很简单，在feign的注解上加上<code>fallback</code>的字段，然后在对应的降级类里边实现对应要返回的信息就好了。这就带来了一个小小的问题：原服务里边写好的错误就获取不到了，只能获取到Hystrix里边fallback函数抛出来的错误。</p>","more":"<p>其实也很好解决：在<code>FeignClient</code>里边可以加上<code>fallbackFactory</code>，然后修改原先的降级函数，实现<code>FallbackFactory&lt;HystrixClient&gt;</code>就好了。</p>\n<p>看代码可能更简单？</p>\n<p>没有实现<code>fallbackFactory</code>的版本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(name = &quot;hello&quot;, fallback = HystrixClientFallback.class)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HystrixClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(method = RequestMethod.GET, value = &quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixClientFallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">HystrixClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hello(<span class=\"string\">&quot;fallback&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现了<code>fallbackFactory</code>的版本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(name = &quot;hello&quot;, fallbackFactory = HystrixClientFallbackFactory.class)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HystrixClient</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(method = RequestMethod.GET, value = &quot;/hello&quot;)</span></span><br><span class=\"line\">\t<span class=\"function\">Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixClientFallbackFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">FallbackFactory</span>&lt;<span class=\"title\">HystrixClient</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HystrixClient <span class=\"title\">create</span><span class=\"params\">(Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixClient() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hello(<span class=\"string\">&quot;fallback; reason was: &quot;</span> + cause.getMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里很明显啦，传进来的<code>throwable</code>对象就包含了原先抛出来的错误原因。</p>\n<p>还有一个要注意的就是<code>@FeignClient</code>里的<code>fallback</code>属性一定要修改为<code>fallbackFactory</code>,毕竟改了之后就没有fallback这个东西了==</p>"},{"title":"AutoCloseable的妙用","date":"2022-04-07T16:46:45.000Z","_content":"\n讲真java里有不少奇妙的接口/注解，我觉得其实都挺好用，然而日常就是用的太少了。\n\n为啥要提到`AutoCloseable`这个接口，是因为前段时间遇到一个bug：发现很多设备连接在get之后没有正确关闭，这个问题很明显，这是代码的问题嘛，不管get过程中有没有抛出错误，都应该关闭掉这个连接。按照正常的写法，我们一般会这么写：\n\n<!--more-->\n\n```java\ntry{\n    device.connect()\n    Object obj = device.get()\n}catch(Exception e){\n    log.warn(e.get())\n}finally{\n    device.close()\n}\n```\n而我犯得错误就是把`device.close()`写到了`try`里边，没有最后这个`finally`来关闭连接，导致`get`报错的时候连接没有正确关闭。\n\n修bug的时候看了一下`device`这个类，看到他实现了`AutoCloseable`这个接口，就顺手搜了一下，发现这个还是有点意思:\n\n1. 实现了`AutoCloseable`和`Closeable`接口的对象可以用在`try-with-resources`语句中来实现资源的自动关闭\n1. 适用范围（资源的定义）： 任何实现 `java.lang.AutoCloseable`或者 `java.io.Closeable` 的对象\n2. 关闭资源和 finally 块的执行顺序： 在 `try-with-resources` 语句中，任何 `catch` 或 `finally` 块在声明的资源关闭后运行\n\n直接上代码：\n\n```java\ntry(Device device = new Device()){\n    Object obj = device.get()\n}catch(Exception e){\n    log.warn(e.get())\n}\n```\n\n对比上面的写法可以说是简单了很多，就算是有多个资源要开启，也很方便:\n\n```java\ntry(Device device = new Device();\n    Device device1 = new Device()){\n    Object obj = device.get()\n    Object obj1 = device1.get()\n}catch(Exception e){\n    log.warn(e.get())\n}\n```\n\n总之这个语法糖相当好用嘛。\n\n","source":"_posts/2022-04-07-AutoCloseable的妙用.md","raw":"---\ntitle: AutoCloseable的妙用\ndate: 2022-04-07 16:46:45\ntags:\n- java\ncategories:\n- develop\n---\n\n讲真java里有不少奇妙的接口/注解，我觉得其实都挺好用，然而日常就是用的太少了。\n\n为啥要提到`AutoCloseable`这个接口，是因为前段时间遇到一个bug：发现很多设备连接在get之后没有正确关闭，这个问题很明显，这是代码的问题嘛，不管get过程中有没有抛出错误，都应该关闭掉这个连接。按照正常的写法，我们一般会这么写：\n\n<!--more-->\n\n```java\ntry{\n    device.connect()\n    Object obj = device.get()\n}catch(Exception e){\n    log.warn(e.get())\n}finally{\n    device.close()\n}\n```\n而我犯得错误就是把`device.close()`写到了`try`里边，没有最后这个`finally`来关闭连接，导致`get`报错的时候连接没有正确关闭。\n\n修bug的时候看了一下`device`这个类，看到他实现了`AutoCloseable`这个接口，就顺手搜了一下，发现这个还是有点意思:\n\n1. 实现了`AutoCloseable`和`Closeable`接口的对象可以用在`try-with-resources`语句中来实现资源的自动关闭\n1. 适用范围（资源的定义）： 任何实现 `java.lang.AutoCloseable`或者 `java.io.Closeable` 的对象\n2. 关闭资源和 finally 块的执行顺序： 在 `try-with-resources` 语句中，任何 `catch` 或 `finally` 块在声明的资源关闭后运行\n\n直接上代码：\n\n```java\ntry(Device device = new Device()){\n    Object obj = device.get()\n}catch(Exception e){\n    log.warn(e.get())\n}\n```\n\n对比上面的写法可以说是简单了很多，就算是有多个资源要开启，也很方便:\n\n```java\ntry(Device device = new Device();\n    Device device1 = new Device()){\n    Object obj = device.get()\n    Object obj1 = device1.get()\n}catch(Exception e){\n    log.warn(e.get())\n}\n```\n\n总之这个语法糖相当好用嘛。\n\n","slug":"AutoCloseable的妙用","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhwi004i2h5p1bxggen0","content":"<p>讲真java里有不少奇妙的接口/注解，我觉得其实都挺好用，然而日常就是用的太少了。</p>\n<p>为啥要提到<code>AutoCloseable</code>这个接口，是因为前段时间遇到一个bug：发现很多设备连接在get之后没有正确关闭，这个问题很明显，这是代码的问题嘛，不管get过程中有没有抛出错误，都应该关闭掉这个连接。按照正常的写法，我们一般会这么写：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    device.connect()</span><br><span class=\"line\">    Object obj = device.get()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    log.warn(e.get())</span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    device.close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而我犯得错误就是把<code>device.close()</code>写到了<code>try</code>里边，没有最后这个<code>finally</code>来关闭连接，导致<code>get</code>报错的时候连接没有正确关闭。</p>\n<p>修bug的时候看了一下<code>device</code>这个类，看到他实现了<code>AutoCloseable</code>这个接口，就顺手搜了一下，发现这个还是有点意思:</p>\n<ol>\n<li>实现了<code>AutoCloseable</code>和<code>Closeable</code>接口的对象可以用在<code>try-with-resources</code>语句中来实现资源的自动关闭</li>\n<li>适用范围（资源的定义）： 任何实现 <code>java.lang.AutoCloseable</code>或者 <code>java.io.Closeable</code> 的对象</li>\n<li>关闭资源和 finally 块的执行顺序： 在 <code>try-with-resources</code> 语句中，任何 <code>catch</code> 或 <code>finally</code> 块在声明的资源关闭后运行</li>\n</ol>\n<p>直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(Device device = <span class=\"keyword\">new</span> Device())&#123;</span><br><span class=\"line\">    Object obj = device.get()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    log.warn(e.get())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比上面的写法可以说是简单了很多，就算是有多个资源要开启，也很方便:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(Device device = <span class=\"keyword\">new</span> Device();</span><br><span class=\"line\">    Device device1 = <span class=\"keyword\">new</span> Device())&#123;</span><br><span class=\"line\">    Object obj = device.get()</span><br><span class=\"line\">    Object obj1 = device1.get()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    log.warn(e.get())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总之这个语法糖相当好用嘛。</p>\n","site":{"data":{}},"excerpt":"<p>讲真java里有不少奇妙的接口/注解，我觉得其实都挺好用，然而日常就是用的太少了。</p>\n<p>为啥要提到<code>AutoCloseable</code>这个接口，是因为前段时间遇到一个bug：发现很多设备连接在get之后没有正确关闭，这个问题很明显，这是代码的问题嘛，不管get过程中有没有抛出错误，都应该关闭掉这个连接。按照正常的写法，我们一般会这么写：</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    device.connect()</span><br><span class=\"line\">    Object obj = device.get()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    log.warn(e.get())</span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    device.close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而我犯得错误就是把<code>device.close()</code>写到了<code>try</code>里边，没有最后这个<code>finally</code>来关闭连接，导致<code>get</code>报错的时候连接没有正确关闭。</p>\n<p>修bug的时候看了一下<code>device</code>这个类，看到他实现了<code>AutoCloseable</code>这个接口，就顺手搜了一下，发现这个还是有点意思:</p>\n<ol>\n<li>实现了<code>AutoCloseable</code>和<code>Closeable</code>接口的对象可以用在<code>try-with-resources</code>语句中来实现资源的自动关闭</li>\n<li>适用范围（资源的定义）： 任何实现 <code>java.lang.AutoCloseable</code>或者 <code>java.io.Closeable</code> 的对象</li>\n<li>关闭资源和 finally 块的执行顺序： 在 <code>try-with-resources</code> 语句中，任何 <code>catch</code> 或 <code>finally</code> 块在声明的资源关闭后运行</li>\n</ol>\n<p>直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(Device device = <span class=\"keyword\">new</span> Device())&#123;</span><br><span class=\"line\">    Object obj = device.get()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    log.warn(e.get())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比上面的写法可以说是简单了很多，就算是有多个资源要开启，也很方便:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(Device device = <span class=\"keyword\">new</span> Device();</span><br><span class=\"line\">    Device device1 = <span class=\"keyword\">new</span> Device())&#123;</span><br><span class=\"line\">    Object obj = device.get()</span><br><span class=\"line\">    Object obj1 = device1.get()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    log.warn(e.get())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总之这个语法糖相当好用嘛。</p>"},{"title":"FeignException中body长度的小坑","date":"2022-04-07T17:03:36.000Z","_content":"\n前几天看到一个bug：别的模块通过feign调用我的模块报错，错误信息显示不完整··当然我是有点懵的：不应该啊，我看日志里边整个日志都是有的，怎么会用feign传过来就出了问题呢？然后第一反应就是肯定是feign限制了http传输过程中body的长度，当然这个第一反应也没有错。\n\n我就开始在代码中定位问题，然而没想到我自己彻底走歪了：先到公共组件库里边发现公共组件对`Fallback`做了封装，写了一个专属的`fallbackFactory`，在这个里边把`errormsg`转成了`FeignException`的格式，在这个里边确实会对超长的body做压缩，变成`[response.status() during [response.request().httpMethod()] to [response.request().url()] [methodKey]: [body]]`的形式，如果body长度大于400，就会截取前200个`char`，然后在后边补上`...(xxx bytes)`。\n\n我就想那我不转成`FeignException`不就完事了？一顿操作下去就搞定了，接下来一顿调试发现怎么改都不成，不对劲啊，怎么没有用呢··然后又想了想，发现我刚开始写的时候根本没看公共组件库，用的是原生的`fallbackFactory`。那就只有一个可能：feign会自己把`error`消息转换成`FeignException`类。\n\n接下来我觉得这么搓肯定是因为我们用的版本太老了，新的版本里边这个长度肯定是可以配置的，就跑到github上一顿看··发现最新版本的确实有优化，然而只是把变量抽了出来，还是不可配置····\n\n那没辙了，乖乖自己修改callback长度吧。","source":"_posts/2022-04-07-FeignException中body长度的小坑.md","raw":"---\ntitle: FeignException中body长度的小坑\ndate: 2022-04-07 17:03:36\ntags:\n- feign\n- spring cloud\ncategories:\n- develop\n---\n\n前几天看到一个bug：别的模块通过feign调用我的模块报错，错误信息显示不完整··当然我是有点懵的：不应该啊，我看日志里边整个日志都是有的，怎么会用feign传过来就出了问题呢？然后第一反应就是肯定是feign限制了http传输过程中body的长度，当然这个第一反应也没有错。\n\n我就开始在代码中定位问题，然而没想到我自己彻底走歪了：先到公共组件库里边发现公共组件对`Fallback`做了封装，写了一个专属的`fallbackFactory`，在这个里边把`errormsg`转成了`FeignException`的格式，在这个里边确实会对超长的body做压缩，变成`[response.status() during [response.request().httpMethod()] to [response.request().url()] [methodKey]: [body]]`的形式，如果body长度大于400，就会截取前200个`char`，然后在后边补上`...(xxx bytes)`。\n\n我就想那我不转成`FeignException`不就完事了？一顿操作下去就搞定了，接下来一顿调试发现怎么改都不成，不对劲啊，怎么没有用呢··然后又想了想，发现我刚开始写的时候根本没看公共组件库，用的是原生的`fallbackFactory`。那就只有一个可能：feign会自己把`error`消息转换成`FeignException`类。\n\n接下来我觉得这么搓肯定是因为我们用的版本太老了，新的版本里边这个长度肯定是可以配置的，就跑到github上一顿看··发现最新版本的确实有优化，然而只是把变量抽了出来，还是不可配置····\n\n那没辙了，乖乖自己修改callback长度吧。","slug":"FeignException中body长度的小坑","published":1,"updated":"2023-05-18T07:48:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhstzhx9004l2h5pbihmgakk","content":"<p>前几天看到一个bug：别的模块通过feign调用我的模块报错，错误信息显示不完整··当然我是有点懵的：不应该啊，我看日志里边整个日志都是有的，怎么会用feign传过来就出了问题呢？然后第一反应就是肯定是feign限制了http传输过程中body的长度，当然这个第一反应也没有错。</p>\n<p>我就开始在代码中定位问题，然而没想到我自己彻底走歪了：先到公共组件库里边发现公共组件对<code>Fallback</code>做了封装，写了一个专属的<code>fallbackFactory</code>，在这个里边把<code>errormsg</code>转成了<code>FeignException</code>的格式，在这个里边确实会对超长的body做压缩，变成<code>[response.status() during [response.request().httpMethod()] to [response.request().url()] [methodKey]: [body]]</code>的形式，如果body长度大于400，就会截取前200个<code>char</code>，然后在后边补上<code>...(xxx bytes)</code>。</p>\n<p>我就想那我不转成<code>FeignException</code>不就完事了？一顿操作下去就搞定了，接下来一顿调试发现怎么改都不成，不对劲啊，怎么没有用呢··然后又想了想，发现我刚开始写的时候根本没看公共组件库，用的是原生的<code>fallbackFactory</code>。那就只有一个可能：feign会自己把<code>error</code>消息转换成<code>FeignException</code>类。</p>\n<p>接下来我觉得这么搓肯定是因为我们用的版本太老了，新的版本里边这个长度肯定是可以配置的，就跑到github上一顿看··发现最新版本的确实有优化，然而只是把变量抽了出来，还是不可配置····</p>\n<p>那没辙了，乖乖自己修改callback长度吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天看到一个bug：别的模块通过feign调用我的模块报错，错误信息显示不完整··当然我是有点懵的：不应该啊，我看日志里边整个日志都是有的，怎么会用feign传过来就出了问题呢？然后第一反应就是肯定是feign限制了http传输过程中body的长度，当然这个第一反应也没有错。</p>\n<p>我就开始在代码中定位问题，然而没想到我自己彻底走歪了：先到公共组件库里边发现公共组件对<code>Fallback</code>做了封装，写了一个专属的<code>fallbackFactory</code>，在这个里边把<code>errormsg</code>转成了<code>FeignException</code>的格式，在这个里边确实会对超长的body做压缩，变成<code>[response.status() during [response.request().httpMethod()] to [response.request().url()] [methodKey]: [body]]</code>的形式，如果body长度大于400，就会截取前200个<code>char</code>，然后在后边补上<code>...(xxx bytes)</code>。</p>\n<p>我就想那我不转成<code>FeignException</code>不就完事了？一顿操作下去就搞定了，接下来一顿调试发现怎么改都不成，不对劲啊，怎么没有用呢··然后又想了想，发现我刚开始写的时候根本没看公共组件库，用的是原生的<code>fallbackFactory</code>。那就只有一个可能：feign会自己把<code>error</code>消息转换成<code>FeignException</code>类。</p>\n<p>接下来我觉得这么搓肯定是因为我们用的版本太老了，新的版本里边这个长度肯定是可以配置的，就跑到github上一顿看··发现最新版本的确实有优化，然而只是把变量抽了出来，还是不可配置····</p>\n<p>那没辙了，乖乖自己修改callback长度吧。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clhstzftf00012h5p0f0lgxtu","category_id":"clhstzfyk00042h5pdnt26qvc","_id":"clhstzg8f000e2h5p3m2ehopd"},{"post_id":"clhstzg3e00092h5ph9iq0qhx","category_id":"clhstzfyk00042h5pdnt26qvc","_id":"clhstzgck000i2h5p4k2sbkka"},{"post_id":"clhstzg57000c2h5pbaandlm6","category_id":"clhstzfyk00042h5pdnt26qvc","_id":"clhstzgg5000l2h5pbjdb1r1n"},{"post_id":"clhstzfxx00032h5p7kbd0psk","category_id":"clhstzg3t000a2h5p77stb6zb","_id":"clhstzgiv000q2h5p6jpe86mu"},{"post_id":"clhstzg1e00072h5p5jlb2kdr","category_id":"clhstzg3t000a2h5p77stb6zb","_id":"clhstzgke000t2h5p6cds71uw"},{"post_id":"clhstzgeh000k2h5phxaj9n88","category_id":"clhstzg3t000a2h5p77stb6zb","_id":"clhstzglw000w2h5p8l3pbosi"},{"post_id":"clhstzg2f00082h5pgbd4grz7","category_id":"clhstzg3t000a2h5p77stb6zb","_id":"clhstzgmc000y2h5pfrr768gg"},{"post_id":"clhstzg7w000d2h5pefga0v4c","category_id":"clhstzgkd000s2h5phcpch5t2","_id":"clhstzgoe00142h5pe0yd8fs0"},{"post_id":"clhstzgmb000x2h5p77ezggq0","category_id":"clhstzgkd000s2h5phcpch5t2","_id":"clhstzgoh00192h5p2sfj4js0"},{"post_id":"clhstzgmd00102h5p86wj4ypo","category_id":"clhstzgkd000s2h5phcpch5t2","_id":"clhstzgq5001c2h5pasmmgusu"},{"post_id":"clhstzgby000h2h5p7icabslr","category_id":"clhstzgmc000z2h5p91he8sxn","_id":"clhstzgqv001f2h5p96bbdwz6"},{"post_id":"clhstzgh0000p2h5p9c68cyz1","category_id":"clhstzgmc000z2h5p91he8sxn","_id":"clhstzgu0001i2h5p0raoaesw"},{"post_id":"clhstzgjm000r2h5phcf9a8jz","category_id":"clhstzgq6001d2h5pbnwj0ngd","_id":"clhstzgz3001p2h5pfxyia2oh"},{"post_id":"clhstzguk001j2h5p53k54qro","category_id":"clhstzg3t000a2h5p77stb6zb","_id":"clhstzh18001t2h5p5mqdaklb"},{"post_id":"clhstzgl2000v2h5p5zau2giv","category_id":"clhstzgvk001k2h5p6udwedft","_id":"clhstzh1a001x2h5p79437976"},{"post_id":"clhstzgof00172h5pgsnz835d","category_id":"clhstzgz4001q2h5p726s5it1","_id":"clhstzh5s00242h5p56fn1jt0"},{"post_id":"clhstzgoh001b2h5p70a3h8za","category_id":"clhstzh1a001y2h5pe5qhf0ek","_id":"clhstzh7v002c2h5p5mvogqaj"},{"post_id":"clhstzgqf001e2h5pfo7hhshk","category_id":"clhstzh5s00262h5p8o16ef26","_id":"clhstzhb8002k2h5phu0i3nyv"},{"post_id":"clhstzgqv001h2h5p17xidwp9","category_id":"clhstzgvk001k2h5p6udwedft","_id":"clhstzhcm002p2h5pc1u5c5r8"},{"post_id":"clhstzgw6001m2h5p63241u2m","category_id":"clhstzhac002j2h5paw0075sx","_id":"clhstzhfb002x2h5p7ayualls"},{"post_id":"clhstzgy4001o2h5peux52o6s","category_id":"clhstzhac002j2h5paw0075sx","_id":"clhstzhgy00312h5pd4loeavo"},{"post_id":"clhstzh02001s2h5payfn6yji","category_id":"clhstzhf0002w2h5pcaw228cj","_id":"clhstzhj300372h5pf2tx74dd"},{"post_id":"clhstzhh500332h5p2fokce7a","category_id":"clhstzh5s00262h5p8o16ef26","_id":"clhstzhk4003d2h5p13ar07oo"},{"post_id":"clhstzh19001w2h5p4y8u8szu","category_id":"clhstzhh100322h5p0y2pcmi1","_id":"clhstzhkq003h2h5p921n8ic6"},{"post_id":"clhstzh3i00202h5pdq7x7p9w","category_id":"clhstzhh100322h5p0y2pcmi1","_id":"clhstzhmy003l2h5p6l5y8g1k"},{"post_id":"clhstzh4q00232h5paquo3elx","category_id":"clhstzhkp003f2h5pedr58jff","_id":"clhstzhp8003t2h5p7kq6bvbs"},{"post_id":"clhstzh5t00272h5p3jjobuvg","category_id":"clhstzh5s00262h5p8o16ef26","_id":"clhstzhr9003y2h5pb016eqfh"},{"post_id":"clhstzh79002a2h5pdgfkh76e","category_id":"clhstzhp8003s2h5phssgaryw","_id":"clhstzhss00442h5p1pnw7em0"},{"post_id":"clhstzh7v002d2h5p56575eym","category_id":"clhstzhr9003z2h5pflkcfu4r","_id":"clhstzhuk004a2h5pcu49c4as"},{"post_id":"clhstzh9t002h2h5p6wkqcnrv","category_id":"clhstzhss00452h5p9417gllj","_id":"clhstzhwi004h2h5p62h9di30"},{"post_id":"clhstzhab002i2h5p6jzjg071","category_id":"clhstzhuk004b2h5p5rf1exsv","_id":"clhstzhy8004o2h5pevl34t5v"},{"post_id":"clhstzhbg002m2h5p9eg9etv6","category_id":"clhstzhr9003z2h5pflkcfu4r","_id":"clhstzhzg004s2h5pbj3b8w5h"},{"post_id":"clhstzhbs002o2h5pcwiq6b9m","category_id":"clhstzhr9003z2h5pflkcfu4r","_id":"clhstzhzg004v2h5p64zb0rw2"},{"post_id":"clhstzhd8002t2h5p1fsl7ly8","category_id":"clhstzhzf004r2h5p5z9g622q","_id":"clhstzhzi00512h5phfe97uk2"},{"post_id":"clhstzhen002v2h5p5cg935d0","category_id":"clhstzhzf004r2h5p5z9g622q","_id":"clhstzi1j00542h5pdmqwae9t"},{"post_id":"clhstzhfe002y2h5p5pic5wvx","category_id":"clhstzhss00452h5p9417gllj","_id":"clhstzi1q00562h5pfitb47mp"},{"post_id":"clhstzhfx00302h5p2vvd1ee7","category_id":"clhstzi1b00532h5p7pav8tuk","_id":"clhstzi2m005b2h5pbcjshaky"},{"post_id":"clhstzhin00352h5p1rbue9b2","category_id":"clhstzi1q00582h5papsz6503","_id":"clhstzi2s005f2h5p29pb2y2z"},{"post_id":"clhstzhj900392h5p1mutgjsj","category_id":"clhstzi2n005d2h5p9qu29wwc","_id":"clhstzi3g005i2h5pcpho9brm"},{"post_id":"clhstzhk3003c2h5pdyvn9dw1","category_id":"clhstzi2s005g2h5p05rhat02","_id":"clhstzi3s005m2h5p9p2mf26u"},{"post_id":"clhstzhkp003g2h5p850s23r1","category_id":"clhstzi3h005j2h5p4wvf0vib","_id":"clhstzi4j005s2h5p9nlqg2vj"},{"post_id":"clhstzhlb003j2h5p1ked2wo2","category_id":"clhstzi2s005g2h5p05rhat02","_id":"clhstzi5m005v2h5pbl8efj4z"},{"post_id":"clhstzhmy003m2h5p1l8o7bri","category_id":"clhstzi4j005r2h5p1ws25xdz","_id":"clhstzi6400612h5pf2kgepi4"},{"post_id":"clhstzho3003o2h5p78g12mh8","category_id":"clhstzi2s005g2h5p05rhat02","_id":"clhstzi7d00642h5p1ncnbhig"},{"post_id":"clhstzhoq003r2h5p91m5fepb","category_id":"clhstzi6400602h5p3yl487z1","_id":"clhstzi7o00682h5pbbhubv72"},{"post_id":"clhstzhp9003u2h5pgc7r5psn","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstzi82006d2h5pfwtlcopy"},{"post_id":"clhstzhqy003x2h5pcbqua47g","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstzi9d006h2h5p85y2ek3b"},{"post_id":"clhstzhra00412h5p9e9r6cae","category_id":"clhstzi6400602h5p3yl487z1","_id":"clhstzia2006l2h5p0p0xg279"},{"post_id":"clhstzhs800432h5p2eq885j4","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstziag006o2h5ph4sffv82"},{"post_id":"clhstzhsw00462h5p32czg3oa","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstziah006s2h5p8m62gpbg"},{"post_id":"clhstzhtx00482h5p07uc3b8y","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstzibr006x2h5phgh542u4"},{"post_id":"clhstzhv0004c2h5p20o7hv60","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstzic800712h5p90a26dbk"},{"post_id":"clhstzhv2004f2h5pb6hf8f54","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstzicn00742h5p8zg47spj"},{"post_id":"clhstzhwi004i2h5p1bxggen0","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstzico00762h5ph0jnfvrr"},{"post_id":"clhstzhx9004l2h5pbihmgakk","category_id":"clhstzi7d00652h5pavkp0v4x","_id":"clhstzicp007a2h5p0rxp9j6d"}],"PostTag":[{"post_id":"clhstzftf00012h5p0f0lgxtu","tag_id":"clhstzfzx00052h5pbv9meool","_id":"clhstzgcl000j2h5p5lroc9er"},{"post_id":"clhstzftf00012h5p0f0lgxtu","tag_id":"clhstzg4f000b2h5p16po83c7","_id":"clhstzgg5000m2h5p3s94cf5d"},{"post_id":"clhstzfxx00032h5p7kbd0psk","tag_id":"clhstzg9k000g2h5pdtnoelhu","_id":"clhstzgme00122h5p2ha96593"},{"post_id":"clhstzfxx00032h5p7kbd0psk","tag_id":"clhstzgg6000o2h5p3ygj43am","_id":"clhstzgof00162h5p24hf55li"},{"post_id":"clhstzfxx00032h5p7kbd0psk","tag_id":"clhstzgl0000u2h5p8dft2k47","_id":"clhstzgoh001a2h5phl649pfv"},{"post_id":"clhstzg1e00072h5p5jlb2kdr","tag_id":"clhstzgmd00112h5p490o6jor","_id":"clhstzgy4001n2h5p6fw1dnn7"},{"post_id":"clhstzg1e00072h5p5jlb2kdr","tag_id":"clhstzgog00182h5ph8h2fn6l","_id":"clhstzh02001r2h5pfxbn0x90"},{"post_id":"clhstzg1e00072h5p5jlb2kdr","tag_id":"clhstzgqv001g2h5p5t555q5c","_id":"clhstzh19001v2h5pbawoc8t1"},{"post_id":"clhstzg2f00082h5pgbd4grz7","tag_id":"clhstzfzx00052h5pbv9meool","_id":"clhstzh3i001z2h5pbmnqcspf"},{"post_id":"clhstzg2f00082h5pgbd4grz7","tag_id":"clhstzgw5001l2h5pdyoh9gh8","_id":"clhstzh4q00222h5p84b33vlz"},{"post_id":"clhstzg3e00092h5ph9iq0qhx","tag_id":"clhstzfzx00052h5pbv9meool","_id":"clhstzh5s00252h5p6lqz9fuj"},{"post_id":"clhstzg3e00092h5ph9iq0qhx","tag_id":"clhstzh18001u2h5p0w6vctmb","_id":"clhstzh7900292h5pcyf6679d"},{"post_id":"clhstzg57000c2h5pbaandlm6","tag_id":"clhstzfzx00052h5pbv9meool","_id":"clhstzh7v002b2h5p5gazg01q"},{"post_id":"clhstzg57000c2h5pbaandlm6","tag_id":"clhstzh18001u2h5p0w6vctmb","_id":"clhstzh9g002g2h5p29kg47ys"},{"post_id":"clhstzg7w000d2h5pefga0v4c","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzhbr002n2h5pgksg938e"},{"post_id":"clhstzg7w000d2h5pefga0v4c","tag_id":"clhstzh18001u2h5p0w6vctmb","_id":"clhstzhcm002r2h5p9pu176s5"},{"post_id":"clhstzgby000h2h5p7icabslr","tag_id":"clhstzhb9002l2h5pfh087jku","_id":"clhstzhen002u2h5p3wtsfnxm"},{"post_id":"clhstzgeh000k2h5phxaj9n88","tag_id":"clhstzhd7002s2h5p5woy5dbw","_id":"clhstzhj300362h5pgyf7dqpb"},{"post_id":"clhstzgeh000k2h5phxaj9n88","tag_id":"clhstzhfw002z2h5p8kax33l1","_id":"clhstzhjv003a2h5pa58d4ac7"},{"post_id":"clhstzgh0000p2h5p9c68cyz1","tag_id":"clhstzhi700342h5p720ub8c2","_id":"clhstzhkn003e2h5p8aqeb8vf"},{"post_id":"clhstzgjm000r2h5phcf9a8jz","tag_id":"clhstzhk3003b2h5p0sogd4tw","_id":"clhstzhmm003k2h5phxvi6vwc"},{"post_id":"clhstzhmy003m2h5p1l8o7bri","tag_id":"clhstzgog00182h5ph8h2fn6l","_id":"clhstzhoq003q2h5p01i8cjqv"},{"post_id":"clhstzgl2000v2h5p5zau2giv","tag_id":"clhstzhlb003i2h5p2uvmf16v","_id":"clhstzhqw003w2h5pff1o02h0"},{"post_id":"clhstzgl2000v2h5p5zau2giv","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzhra00402h5p4j5l34zk"},{"post_id":"clhstzgmb000x2h5p77ezggq0","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzhuh00492h5ph6461380"},{"post_id":"clhstzgmb000x2h5p77ezggq0","tag_id":"clhstzhs100422h5pe3qnfnug","_id":"clhstzhv1004d2h5p0b4vbo3g"},{"post_id":"clhstzgmd00102h5p86wj4ypo","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzhwh004g2h5pduv27t5u"},{"post_id":"clhstzgof00172h5pgsnz835d","tag_id":"clhstzhv1004e2h5paz1x6foj","_id":"clhstzhy7004m2h5pbnmyaf02"},{"post_id":"clhstzhwi004i2h5p1bxggen0","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzhy8004p2h5pcn1ve9oy"},{"post_id":"clhstzgoh001b2h5p70a3h8za","tag_id":"clhstzhx8004k2h5p3xbjc9yb","_id":"clhstzhzg004u2h5pb3500jns"},{"post_id":"clhstzgoh001b2h5p70a3h8za","tag_id":"clhstzhzf004q2h5pfeskb8l5","_id":"clhstzhzh004x2h5p8hr39ohf"},{"post_id":"clhstzgqf001e2h5pfo7hhshk","tag_id":"clhstzhzg004t2h5pdaje0uyp","_id":"clhstzhzi004z2h5p11fhg67s"},{"post_id":"clhstzgqv001h2h5p17xidwp9","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzi1q00572h5p3lao92j0"},{"post_id":"clhstzgqv001h2h5p17xidwp9","tag_id":"clhstzhzi00522h5p1rsb6vi9","_id":"clhstzi2e00592h5p2v7b4fx8"},{"post_id":"clhstzguk001j2h5p53k54qro","tag_id":"clhstzi1p00552h5pffsu3y3e","_id":"clhstzi2n005c2h5pfjv9h65d"},{"post_id":"clhstzgw6001m2h5p63241u2m","tag_id":"clhstzi2h005a2h5p5b87b7iq","_id":"clhstzi3s005l2h5p9je303c9"},{"post_id":"clhstzgw6001m2h5p63241u2m","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzi48005o2h5p02zz647n"},{"post_id":"clhstzgw6001m2h5p63241u2m","tag_id":"clhstzhzi00522h5p1rsb6vi9","_id":"clhstzi4i005q2h5pfd7i5e0u"},{"post_id":"clhstzgy4001o2h5peux52o6s","tag_id":"clhstzi2h005a2h5p5b87b7iq","_id":"clhstzi4u005u2h5p909mbh1x"},{"post_id":"clhstzgy4001o2h5peux52o6s","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzi5q005x2h5p0isqcimw"},{"post_id":"clhstzh02001s2h5payfn6yji","tag_id":"clhstzgg6000o2h5p3ygj43am","_id":"clhstzi63005z2h5phmuq3688"},{"post_id":"clhstzh02001s2h5payfn6yji","tag_id":"clhstzi4t005t2h5p7w5y0c7c","_id":"clhstzi6400622h5p8bi978oo"},{"post_id":"clhstzh19001w2h5p4y8u8szu","tag_id":"clhstzhd7002s2h5p5woy5dbw","_id":"clhstzi7n00672h5pdmn3cong"},{"post_id":"clhstzh19001w2h5p4y8u8szu","tag_id":"clhstzi6400632h5p70ssgizv","_id":"clhstzi7s006a2h5p8zd13eix"},{"post_id":"clhstzh3i00202h5pdq7x7p9w","tag_id":"clhstzhd7002s2h5p5woy5dbw","_id":"clhstzi98006f2h5p74p46xmp"},{"post_id":"clhstzh3i00202h5pdq7x7p9w","tag_id":"clhstzi6400632h5p70ssgizv","_id":"clhstzi9d006i2h5p3px7348x"},{"post_id":"clhstzh4q00232h5paquo3elx","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstziah006q2h5payuaeup1"},{"post_id":"clhstzh4q00232h5paquo3elx","tag_id":"clhstzi9d006j2h5p96a4d8v4","_id":"clhstziah006t2h5pem3x5l6i"},{"post_id":"clhstzh4q00232h5paquo3elx","tag_id":"clhstziaf006m2h5p5upmhv1z","_id":"clhstziah006v2h5pbu5heqh4"},{"post_id":"clhstzh5t00272h5p3jjobuvg","tag_id":"clhstzhzg004t2h5pdaje0uyp","_id":"clhstzibs006y2h5p8oi3dj19"},{"post_id":"clhstzh79002a2h5pdgfkh76e","tag_id":"clhstziah006u2h5pf93b49sa","_id":"clhstzico00772h5p7p2g97ar"},{"post_id":"clhstzh79002a2h5pdgfkh76e","tag_id":"clhstzibs006z2h5pebx596xs","_id":"clhstzico00782h5pfccbh1kg"},{"post_id":"clhstzh79002a2h5pdgfkh76e","tag_id":"clhstzicc00722h5pfd7wdyza","_id":"clhstzicp007b2h5pds1gel50"},{"post_id":"clhstzh7v002d2h5p56575eym","tag_id":"clhstzico00752h5pdjylde9l","_id":"clhstzicp007d2h5p97h96v4j"},{"post_id":"clhstzh7v002d2h5p56575eym","tag_id":"clhstzhzg004t2h5pdaje0uyp","_id":"clhstzicp007e2h5p76aid06p"},{"post_id":"clhstzh9t002h2h5p6wkqcnrv","tag_id":"clhstzicp007c2h5p9g33515m","_id":"clhstzicq007h2h5pcf666a3b"},{"post_id":"clhstzh9t002h2h5p6wkqcnrv","tag_id":"clhstzicq007f2h5p5jhd9745","_id":"clhstzido007i2h5p91yb0gdv"},{"post_id":"clhstzhbg002m2h5p9eg9etv6","tag_id":"clhstzicq007g2h5ph7wffof0","_id":"clhstzidp007l2h5pdxo06nqn"},{"post_id":"clhstzhbg002m2h5p9eg9etv6","tag_id":"clhstzfzx00052h5pbv9meool","_id":"clhstzidp007m2h5p5gobehii"},{"post_id":"clhstzhbg002m2h5p9eg9etv6","tag_id":"clhstzido007j2h5p45tudwl3","_id":"clhstzidp007o2h5pf34wbv1i"},{"post_id":"clhstzhbs002o2h5pcwiq6b9m","tag_id":"clhstzido007j2h5p45tudwl3","_id":"clhstzidq007q2h5pb1c24mtq"},{"post_id":"clhstzhbs002o2h5pcwiq6b9m","tag_id":"clhstzico00752h5pdjylde9l","_id":"clhstzidq007r2h5pf22l6cs0"},{"post_id":"clhstzhd8002t2h5p1fsl7ly8","tag_id":"clhstzidq007p2h5p17ivhdni","_id":"clhstziee007t2h5p334hed0v"},{"post_id":"clhstzhen002v2h5p5cg935d0","tag_id":"clhstzidq007p2h5p17ivhdni","_id":"clhstzier007v2h5p0tm391qv"},{"post_id":"clhstzhfe002y2h5p5pic5wvx","tag_id":"clhstziee007u2h5p3ou0bxti","_id":"clhstzier007x2h5pf28mfem1"},{"post_id":"clhstzhfx00302h5p2vvd1ee7","tag_id":"clhstzier007w2h5p81b6518e","_id":"clhstzifa007z2h5p1gzra5mv"},{"post_id":"clhstzhh500332h5p2fokce7a","tag_id":"clhstzhzg004t2h5pdaje0uyp","_id":"clhstzifb00812h5p5zq26x8z"},{"post_id":"clhstzhin00352h5p1rbue9b2","tag_id":"clhstzifa00802h5p68hxd1hi","_id":"clhstzifb00832h5p56nc4b00"},{"post_id":"clhstzhj900392h5p1mutgjsj","tag_id":"clhstzifb00822h5palj689w3","_id":"clhstzifb00852h5p1iju5lcg"},{"post_id":"clhstzhk3003c2h5pdyvn9dw1","tag_id":"clhstzifb00842h5p3by1glww","_id":"clhstzifc00882h5pgi79423f"},{"post_id":"clhstzhk3003c2h5pdyvn9dw1","tag_id":"clhstzifc00862h5p6e1v87fd","_id":"clhstzifc00892h5p76484ult"},{"post_id":"clhstzhk3003c2h5pdyvn9dw1","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzig7008b2h5pffrg7atc"},{"post_id":"clhstzhkp003g2h5p850s23r1","tag_id":"clhstzifc00872h5p9sv5ftuk","_id":"clhstzig7008c2h5pbeagg4gi"},{"post_id":"clhstzhlb003j2h5p1ked2wo2","tag_id":"clhstzifc008a2h5p1fel68md","_id":"clhstzig8008e2h5p1mo13rip"},{"post_id":"clhstzhlb003j2h5p1ked2wo2","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzig8008f2h5p3v79gv56"},{"post_id":"clhstzho3003o2h5p78g12mh8","tag_id":"clhstzig7008d2h5p7j8565wj","_id":"clhstzig9008i2h5p2e7o1lmm"},{"post_id":"clhstzho3003o2h5p78g12mh8","tag_id":"clhstzig8008g2h5p3imk43is","_id":"clhstzigs008j2h5pgkxn9c9q"},{"post_id":"clhstzhoq003r2h5p91m5fepb","tag_id":"clhstzig9008h2h5pb55whk7c","_id":"clhstzigt008l2h5pgnc74b39"},{"post_id":"clhstzhp9003u2h5pgc7r5psn","tag_id":"clhstzigs008k2h5p8ldcgpf7","_id":"clhstzigu008n2h5p0aud5yzt"},{"post_id":"clhstzhqy003x2h5pcbqua47g","tag_id":"clhstzigt008m2h5pdnw09u40","_id":"clhstzih4008q2h5p584480hz"},{"post_id":"clhstzhqy003x2h5pcbqua47g","tag_id":"clhstzigu008o2h5p04l179m5","_id":"clhstzih4008r2h5phngpeifk"},{"post_id":"clhstzhra00412h5p9e9r6cae","tag_id":"clhstzigu008p2h5pbjg8h2ss","_id":"clhstzihe008t2h5pg53gfk3f"},{"post_id":"clhstzhs800432h5p2eq885j4","tag_id":"clhstziha008s2h5pha1maa19","_id":"clhstzihg008v2h5p4p6n5ih9"},{"post_id":"clhstzhs800432h5p2eq885j4","tag_id":"clhstzh7300282h5pdnq1ezh7","_id":"clhstzihg008w2h5p80wz4c8e"},{"post_id":"clhstzhsw00462h5p32czg3oa","tag_id":"clhstzihg008u2h5p0qkp0wfl","_id":"clhstzihv008z2h5p0t4gaon1"},{"post_id":"clhstzhsw00462h5p32czg3oa","tag_id":"clhstzicp007c2h5p9g33515m","_id":"clhstzihv00902h5p2uek9yvc"},{"post_id":"clhstzhtx00482h5p07uc3b8y","tag_id":"clhstzfzx00052h5pbv9meool","_id":"clhstzihw00922h5pann6f8z9"},{"post_id":"clhstzhtx00482h5p07uc3b8y","tag_id":"clhstzihv008y2h5p31809s2x","_id":"clhstzihw00932h5p3her4s4x"},{"post_id":"clhstzhv0004c2h5p20o7hv60","tag_id":"clhstzicp007c2h5p9g33515m","_id":"clhstzii700952h5p3k0gfbtm"},{"post_id":"clhstzhv2004f2h5pb6hf8f54","tag_id":"clhstzihw00942h5pdx00fyer","_id":"clhstziiq00982h5p0t3rg8l4"},{"post_id":"clhstzhv2004f2h5pb6hf8f54","tag_id":"clhstzii700962h5pfsvadd2m","_id":"clhstziiq00992h5pbfs9110i"},{"post_id":"clhstzhx9004l2h5pbihmgakk","tag_id":"clhstzihw00942h5pdx00fyer","_id":"clhstziiw009b2h5pg3bwhzyr"},{"post_id":"clhstzhx9004l2h5pbihmgakk","tag_id":"clhstzii700962h5pfsvadd2m","_id":"clhstziiw009c2h5pg7a13nxk"}],"Tag":[{"name":"go","_id":"clhstzfzx00052h5pbv9meool"},{"name":"语法糖","_id":"clhstzg4f000b2h5p16po83c7"},{"name":"Windows","_id":"clhstzg9k000g2h5pdtnoelhu"},{"name":"wsl2","_id":"clhstzgg6000o2h5p3ygj43am"},{"name":"Ubuntu","_id":"clhstzgl0000u2h5p8dft2k47"},{"name":"github","_id":"clhstzgmd00112h5p490o6jor"},{"name":"hexo","_id":"clhstzgog00182h5ph8h2fn6l"},{"name":"blog","_id":"clhstzgqv001g2h5p5t555q5c"},{"name":"telegram","_id":"clhstzgw5001l2h5pdyoh9gh8"},{"name":"并发","_id":"clhstzh18001u2h5p0w6vctmb"},{"name":"java","_id":"clhstzh7300282h5pdnq1ezh7"},{"name":"Segment Routing","_id":"clhstzhb9002l2h5pfh087jku"},{"name":"TICK","_id":"clhstzhd7002s2h5p5woy5dbw"},{"name":"监控系统","_id":"clhstzhfw002z2h5p8kax33l1"},{"name":"协议","_id":"clhstzhi700342h5p720ub8c2"},{"name":"mvn","_id":"clhstzhk3003b2h5p0sogd4tw"},{"name":"Lambok","_id":"clhstzhlb003i2h5p2uvmf16v"},{"name":"jsch","_id":"clhstzhs100422h5pe3qnfnug"},{"name":"装饰模式","_id":"clhstzhv1004e2h5paz1x6foj"},{"name":"学习","_id":"clhstzhx8004k2h5p3xbjc9yb"},{"name":"理财","_id":"clhstzhzf004q2h5pfeskb8l5"},{"name":"selFund","_id":"clhstzhzg004t2h5pdaje0uyp"},{"name":"语法","_id":"clhstzhzi00522h5p1rsb6vi9"},{"name":"转载","_id":"clhstzi1p00552h5pffsu3y3e"},{"name":"读后感","_id":"clhstzi2h005a2h5p5b87b7iq"},{"name":"问题记录","_id":"clhstzi4t005t2h5p7w5y0c7c"},{"name":"influxdb","_id":"clhstzi6400632h5p70ssgizv"},{"name":"bug修复","_id":"clhstzi9d006j2h5p96a4d8v4"},{"name":"代码异味","_id":"clhstziaf006m2h5p5upmhv1z"},{"name":"nodejs","_id":"clhstziah006u2h5pf93b49sa"},{"name":"eggjs","_id":"clhstzibs006z2h5pebx596xs"},{"name":"开源","_id":"clhstzicc00722h5pfd7wdyza"},{"name":"gin","_id":"clhstzico00752h5pdjylde9l"},{"name":"docker","_id":"clhstzicp007c2h5p9g33515m"},{"name":"docker-compose","_id":"clhstzicq007f2h5p5jhd9745"},{"name":"gorm","_id":"clhstzicq007g2h5ph7wffof0"},{"name":"selfund","_id":"clhstzido007j2h5p45tudwl3"},{"name":"python","_id":"clhstzidq007p2h5p17ivhdni"},{"name":"harbor","_id":"clhstziee007u2h5p3ou0bxti"},{"name":"编程思想","_id":"clhstzier007w2h5p81b6518e"},{"name":"随笔","_id":"clhstzifa00802h5p68hxd1hi"},{"name":"mongo","_id":"clhstzifb00822h5palj689w3"},{"name":"spring","_id":"clhstzifb00842h5p3by1glww"},{"name":"database","_id":"clhstzifc00862h5p6e1v87fd"},{"name":"平台","_id":"clhstzifc00872h5p9sv5ftuk"},{"name":"quartz","_id":"clhstzifc008a2h5p1fel68md"},{"name":"MyBatis-Plus","_id":"clhstzig7008d2h5p7j8565wj"},{"name":"Java","_id":"clhstzig8008g2h5p3imk43is"},{"name":"house","_id":"clhstzig9008h2h5pb55whk7c"},{"name":"maven","_id":"clhstzigs008k2h5p8ldcgpf7"},{"name":"mysql","_id":"clhstzigt008m2h5pdnw09u40"},{"name":"redis","_id":"clhstzigu008o2h5p04l179m5"},{"name":"email","_id":"clhstzigu008p2h5pbjg8h2ss"},{"name":"OpenDayLight","_id":"clhstziha008s2h5pha1maa19"},{"name":"elk","_id":"clhstzihg008u2h5p0qkp0wfl"},{"name":"micro service","_id":"clhstzihv008y2h5p31809s2x"},{"name":"feign","_id":"clhstzihw00942h5pdx00fyer"},{"name":"spring cloud","_id":"clhstzii700962h5pfsvadd2m"}]}}